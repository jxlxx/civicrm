//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for ExtensionStatus.
const (
	Active   ExtensionStatus = "active"
	Error    ExtensionStatus = "error"
	Inactive ExtensionStatus = "inactive"
)

// Defines values for HealthResponseStatus.
const (
	Healthy   HealthResponseStatus = "healthy"
	Unhealthy HealthResponseStatus = "unhealthy"
)

// APIInfo defines model for APIInfo.
type APIInfo struct {
	Description *string   `json:"description,omitempty"`
	Entities    *[]string `json:"entities,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Version     *string   `json:"version,omitempty"`
}

// APIResponse defines model for APIResponse.
type APIResponse struct {
	// Count Number of records returned
	Count        *int                      `json:"count,omitempty"`
	ErrorCode    *string                   `json:"error_code,omitempty"`
	ErrorMessage *string                   `json:"error_message,omitempty"`
	IsError      *bool                     `json:"is_error,omitempty"`
	Values       *[]map[string]interface{} `json:"values,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// ErrorCode Machine-readable error code
	ErrorCode *string `json:"error_code,omitempty"`

	// ErrorData Additional error context
	ErrorData *map[string]interface{} `json:"error_data,omitempty"`

	// ErrorMessage Human-readable error message
	ErrorMessage *string `json:"error_message,omitempty"`
	IsError      *bool   `json:"is_error,omitempty"`
}

// Extension defines model for Extension.
type Extension struct {
	// Description Extension description
	Description *string `json:"description,omitempty"`

	// Name Extension name
	Name *string `json:"name,omitempty"`

	// Status Extension status
	Status *ExtensionStatus `json:"status,omitempty"`

	// Version Extension version
	Version *string `json:"version,omitempty"`
}

// ExtensionStatus Extension status
type ExtensionStatus string

// HealthResponse defines model for HealthResponse.
type HealthResponse struct {
	Status    *HealthResponseStatus `json:"status,omitempty"`
	Timestamp *time.Time            `json:"timestamp,omitempty"`

	// Uptime Service uptime in human-readable format
	Uptime  *string `json:"uptime,omitempty"`
	Version *string `json:"version,omitempty"`
}

// HealthResponseStatus defines model for HealthResponse.Status.
type HealthResponseStatus string

// EntityDeleteParams defines parameters for EntityDelete.
type EntityDeleteParams struct {
	// Id Entity ID to delete
	Id string `form:"id" json:"id"`
}

// EntityGetParams defines parameters for EntityGet.
type EntityGetParams struct {
	// Id Entity ID for single entity retrieval
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Select Comma-separated list of fields to select
	Select *string `form:"select,omitempty" json:"select,omitempty"`

	// Where JSON string of where conditions
	Where *string `form:"where,omitempty" json:"where,omitempty"`

	// OrderBy JSON string of order by clauses
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// Limit Maximum number of records to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of records to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// EntityCreateJSONBody defines parameters for EntityCreate.
type EntityCreateJSONBody map[string]interface{}

// EntityUpdateJSONBody defines parameters for EntityUpdate.
type EntityUpdateJSONBody map[string]interface{}

// EntityUpdateParams defines parameters for EntityUpdate.
type EntityUpdateParams struct {
	// Id Entity ID to update
	Id string `form:"id" json:"id"`
}

// EntityCreateJSONRequestBody defines body for EntityCreate for application/json ContentType.
type EntityCreateJSONRequestBody EntityCreateJSONBody

// EntityUpdateJSONRequestBody defines body for EntityUpdate for application/json ContentType.
type EntityUpdateJSONRequestBody EntityUpdateJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get API information
	// (GET /)
	ApiInfo(w http.ResponseWriter, r *http.Request)
	// List extensions
	// (GET /extensions)
	ListExtensions(w http.ResponseWriter, r *http.Request)
	// Health check
	// (GET /health)
	HealthCheck(w http.ResponseWriter, r *http.Request)
	// Get OpenAPI specification
	// (GET /openapi.json)
	OpenAPISpec(w http.ResponseWriter, r *http.Request)
	// Serve static assets
	// (GET /static/{path})
	ServeStatic(w http.ResponseWriter, r *http.Request, path string)
	// Delete entity
	// (DELETE /{entity}/{action})
	EntityDelete(w http.ResponseWriter, r *http.Request, entity string, action string, params EntityDeleteParams)
	// Get entities
	// (GET /{entity}/{action})
	EntityGet(w http.ResponseWriter, r *http.Request, entity string, action string, params EntityGetParams)
	// Create entity
	// (POST /{entity}/{action})
	EntityCreate(w http.ResponseWriter, r *http.Request, entity string, action string)
	// Update entity
	// (PUT /{entity}/{action})
	EntityUpdate(w http.ResponseWriter, r *http.Request, entity string, action string, params EntityUpdateParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ApiInfo operation middleware
func (siw *ServerInterfaceWrapper) ApiInfo(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ApiInfo(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListExtensions operation middleware
func (siw *ServerInterfaceWrapper) ListExtensions(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListExtensions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.HealthCheck(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OpenAPISpec operation middleware
func (siw *ServerInterfaceWrapper) OpenAPISpec(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OpenAPISpec(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ServeStatic operation middleware
func (siw *ServerInterfaceWrapper) ServeStatic(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "path" -------------
	var path string

	err = runtime.BindStyledParameterWithOptions("simple", "path", r.PathValue("path"), &path, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ServeStatic(w, r, path)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// EntityDelete operation middleware
func (siw *ServerInterfaceWrapper) EntityDelete(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "entity" -------------
	var entity string

	err = runtime.BindStyledParameterWithOptions("simple", "entity", r.PathValue("entity"), &entity, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entity", Err: err})
		return
	}

	// ------------- Path parameter "action" -------------
	var action string

	err = runtime.BindStyledParameterWithOptions("simple", "action", r.PathValue("action"), &action, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "action", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params EntityDeleteParams

	// ------------- Required query parameter "id" -------------

	if paramValue := r.URL.Query().Get("id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.EntityDelete(w, r, entity, action, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// EntityGet operation middleware
func (siw *ServerInterfaceWrapper) EntityGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "entity" -------------
	var entity string

	err = runtime.BindStyledParameterWithOptions("simple", "entity", r.PathValue("entity"), &entity, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entity", Err: err})
		return
	}

	// ------------- Path parameter "action" -------------
	var action string

	err = runtime.BindStyledParameterWithOptions("simple", "action", r.PathValue("action"), &action, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "action", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params EntityGetParams

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Optional query parameter "select" -------------

	err = runtime.BindQueryParameter("form", true, false, "select", r.URL.Query(), &params.Select)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "select", Err: err})
		return
	}

	// ------------- Optional query parameter "where" -------------

	err = runtime.BindQueryParameter("form", true, false, "where", r.URL.Query(), &params.Where)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "where", Err: err})
		return
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", r.URL.Query(), &params.OrderBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderBy", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.EntityGet(w, r, entity, action, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// EntityCreate operation middleware
func (siw *ServerInterfaceWrapper) EntityCreate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "entity" -------------
	var entity string

	err = runtime.BindStyledParameterWithOptions("simple", "entity", r.PathValue("entity"), &entity, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entity", Err: err})
		return
	}

	// ------------- Path parameter "action" -------------
	var action string

	err = runtime.BindStyledParameterWithOptions("simple", "action", r.PathValue("action"), &action, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "action", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.EntityCreate(w, r, entity, action)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// EntityUpdate operation middleware
func (siw *ServerInterfaceWrapper) EntityUpdate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "entity" -------------
	var entity string

	err = runtime.BindStyledParameterWithOptions("simple", "entity", r.PathValue("entity"), &entity, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "entity", Err: err})
		return
	}

	// ------------- Path parameter "action" -------------
	var action string

	err = runtime.BindStyledParameterWithOptions("simple", "action", r.PathValue("action"), &action, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "action", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params EntityUpdateParams

	// ------------- Required query parameter "id" -------------

	if paramValue := r.URL.Query().Get("id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.EntityUpdate(w, r, entity, action, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/{$}", wrapper.ApiInfo)
	m.HandleFunc("GET "+options.BaseURL+"/extensions", wrapper.ListExtensions)
	m.HandleFunc("GET "+options.BaseURL+"/health", wrapper.HealthCheck)
	m.HandleFunc("GET "+options.BaseURL+"/openapi.json", wrapper.OpenAPISpec)
	m.HandleFunc("GET "+options.BaseURL+"/static/{path}", wrapper.ServeStatic)
	m.HandleFunc("DELETE "+options.BaseURL+"/{entity}/{action}", wrapper.EntityDelete)
	m.HandleFunc("GET "+options.BaseURL+"/{entity}/{action}", wrapper.EntityGet)
	m.HandleFunc("POST "+options.BaseURL+"/{entity}/{action}", wrapper.EntityCreate)
	m.HandleFunc("PUT "+options.BaseURL+"/{entity}/{action}", wrapper.EntityUpdate)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYX2/TOhT/KpbvlQApNOWyp75tY0ARG9MKug9oQm5y0hgS29hOWTX1u18d20mbJuko",
	"g4F0X7YkPsfnnJ9/5099SxNZKilAWEMnt9QkOZTMPR5fTqcik/iotFSgLQe3kIJJNFeWS4GvcMNKVQCd",
	"0FO+5KdX5+TqbPaeHF9OyfKIRtSuFC4aq7lY0HVEQVhe79Uof6SnUliWWBq5J83nlbMQ0bMlCPx8DuUc",
	"tMm5otcR5RZKt0Vn//CBac1W+C5YCf2ODvu4BG068R2NxqNxV3pjUs4/Q2JR//hyegVGSWGgC2AiK2E7",
	"SNKLCuMjMiMaEqlTQzTYSgtINza5sLAA7WDUWupPiUyhFwW/XIIxbNEvwc0nJ9QKMmOFgcbcXMoCmHCI",
	"sKLy7jfIszTl6DsrLrfis7qCHkTap9KH2Rk6M4xaO942dOcsybmApxpYyuYFECdMnHA0hE3KLLsrjLaZ",
	"40ayMSAs3FjaE00H//ZWr6uSiV1/a+noOw+rBXVzVr3Y3lgQNaP3pnPbzUaPbH/v8a9OsiF1t96jZyyz",
	"ldmnGSSwblQlFgqWWL7EzbhoHj021/szechCLfJdmf0aWGHzYZpuAqr9zZ3Gika0EvVzn6eWl2AsKxUq",
	"Z1KXzNIJTZmFp7jUh16l3EonthnoJU+A+HXCBcnbfAvb78frTjTw/CCpNLerGTYOj8AJMA36uLI5vs3d",
	"28s6nDf/vqeRbzOOtG5140duraJr3JiH3pOEtjC5DRxrqvd7YCWCqougaCZxnPAlT3Q5ktpF04alp0ER",
	"oyDhGU9YzWxu+3tEA0zoA+uISgWCKU4n9PloPHpOI6qYzR0IMf5ZQE+Zv3JF3RAMEEFBBrK5rCyxOZCO",
	"WeSWE5qmWIEUd005ojow0Fn7ZzyusQLfWphSRQgq/mz8efrmjk9/a8johP4Vb7p/HFp/XPd9dwo79e9y",
	"uu22J0BVlkyv6IS+Akv6JGKoM80MgoK6BTcWu18hWQop2dLaReEtN/Zse/leYDT9bB8qmwLa7WUdnN6G",
	"SLZCaEPlBHZWY18bBiE6zSH5QnjmaGJCgnNDNuWlDZIvVE7rV9Jlpx72oDHr+tpGw29BEueqgyIk1qh2",
	"ZW8iIR7oWAEWyDsFAkn4fDRupzZhhryZvbvo4BQ0ZgqS++K0c2B3+tSdG7ro1cptxW7mDcvF2JJ4Et9i",
	"cVoPwonHBMTLkowXYEimZengxck7xaTE78SsjIWyA6TbYOb0XSXUrAQL2tDJx11bl8zmxEpP5Y1F19Pp",
	"xFVRWs8U9ZuGrxXXkNZjzwb23T51fdgxsiXzvrUPs9v9eMkWEC941hZsWvWcCzyPaFD1s4LFj+oq8QOq",
	"OJzGiTF3RebkclsW+wW7qb05O1LDu47o0fioy6+XKCSkJZmsRLrD4Bb5mDFgQ1G8db8WV+v4Fmc9KdZ+",
	"Y8yrrokX7jthgnitDkXP3GcvdhdHvSxxGPTysrHx/cyMdo0cu6DI48pUrChW5JEP7dGTfpMeg/uZDHFN",
	"X2ACpjUUztjXChyRgjWe/sq0O3Qo2ddiQkw+mnSLgj/FePuH6bD5IXIHWga+rKPBdqY5LIMcB4MThCuQ",
	"vqJDWnOxj9OvwB5AaPIYRotRRMKdi3+or1wi4m5cnvxy1ltJFGisY7U/C7ARSTQwCxGpVOr++1N9kIzI",
	"pCaGi0VRnxbR/lRYsS9HDrB1KsuSPTWAJ2UhbYbejEORGoTEQAHuGqzPXLN4gEmceohfRkvfctCuWvu7",
	"DDNgyYndy5DUKWgyX5GkYBXWhH5DTuxkdZipc3bDy6okonNnZmW4NhswV/CStwEs/V508mw8Hke05CK8",
	"dm/duo5c9DlgvnA1FG2WGdixXxsc9xj8jUV1ViUJGOOr6fjhqukJSwlmMxj74JX8YqCE44Td3FuvI6qk",
	"6fuJ5ioXYUTAt7qAHFLEvf6fOZj4qvwTB5NrLwzGnsh0ddARH3DxjMfY9mndyahnDzymeCjT35tYLXoH",
	"4m4mFFX10PuDa8huvL7hxmKZ3ztne/k/k85+uHiwObuqofhZc/YfkTgPPd97FNP/VUe647dFyMk6c7ev",
	"5F2ubV/Gf7xG7hj8qd2bieFGfM4MkA9Xb5u79ZgpHi+P6Pp6/V8AAAD//7B5HnMwHgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
