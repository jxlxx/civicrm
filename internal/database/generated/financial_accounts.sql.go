// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: financial_accounts.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const CountFinancialAccounts = `-- name: CountFinancialAccounts :one
SELECT COUNT(*) FROM financial_accounts WHERE is_active = $1
`

func (q *Queries) CountFinancialAccounts(ctx context.Context, isActive sql.NullBool) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountFinancialAccounts, isActive)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountFinancialAccountsByType = `-- name: CountFinancialAccountsByType :one
SELECT COUNT(*) FROM financial_accounts 
WHERE account_type_code = $1 AND is_active = $2
`

type CountFinancialAccountsByTypeParams struct {
	AccountTypeCode sql.NullString `json:"account_type_code"`
	IsActive        sql.NullBool   `json:"is_active"`
}

func (q *Queries) CountFinancialAccountsByType(ctx context.Context, arg CountFinancialAccountsByTypeParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountFinancialAccountsByType, arg.AccountTypeCode, arg.IsActive)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateFinancialAccount = `-- name: CreateFinancialAccount :one
INSERT INTO financial_accounts (
    name, description, account_type_code, account_code, parent_id, 
    is_header_account, is_deductible, is_tax, is_reserved, is_active
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id, name, description, account_type_code, account_code, parent_id, is_header_account, is_deductible, is_tax, is_reserved, is_active, created_at, updated_at
`

type CreateFinancialAccountParams struct {
	Name            string         `json:"name"`
	Description     sql.NullString `json:"description"`
	AccountTypeCode sql.NullString `json:"account_type_code"`
	AccountCode     sql.NullString `json:"account_code"`
	ParentID        uuid.NullUUID  `json:"parent_id"`
	IsHeaderAccount sql.NullBool   `json:"is_header_account"`
	IsDeductible    sql.NullBool   `json:"is_deductible"`
	IsTax           sql.NullBool   `json:"is_tax"`
	IsReserved      sql.NullBool   `json:"is_reserved"`
	IsActive        sql.NullBool   `json:"is_active"`
}

func (q *Queries) CreateFinancialAccount(ctx context.Context, arg CreateFinancialAccountParams) (FinancialAccount, error) {
	row := q.db.QueryRowContext(ctx, CreateFinancialAccount,
		arg.Name,
		arg.Description,
		arg.AccountTypeCode,
		arg.AccountCode,
		arg.ParentID,
		arg.IsHeaderAccount,
		arg.IsDeductible,
		arg.IsTax,
		arg.IsReserved,
		arg.IsActive,
	)
	var i FinancialAccount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.AccountTypeCode,
		&i.AccountCode,
		&i.ParentID,
		&i.IsHeaderAccount,
		&i.IsDeductible,
		&i.IsTax,
		&i.IsReserved,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteFinancialAccount = `-- name: DeleteFinancialAccount :exec
DELETE FROM financial_accounts WHERE id = $1
`

func (q *Queries) DeleteFinancialAccount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteFinancialAccount, id)
	return err
}

const GetFinancialAccount = `-- name: GetFinancialAccount :one
SELECT id, name, description, account_type_code, account_code, parent_id, is_header_account, is_deductible, is_tax, is_reserved, is_active, created_at, updated_at FROM financial_accounts WHERE id = $1
`

func (q *Queries) GetFinancialAccount(ctx context.Context, id uuid.UUID) (FinancialAccount, error) {
	row := q.db.QueryRowContext(ctx, GetFinancialAccount, id)
	var i FinancialAccount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.AccountTypeCode,
		&i.AccountCode,
		&i.ParentID,
		&i.IsHeaderAccount,
		&i.IsDeductible,
		&i.IsTax,
		&i.IsReserved,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetFinancialAccountByCode = `-- name: GetFinancialAccountByCode :one
SELECT id, name, description, account_type_code, account_code, parent_id, is_header_account, is_deductible, is_tax, is_reserved, is_active, created_at, updated_at FROM financial_accounts WHERE account_code = $1
`

func (q *Queries) GetFinancialAccountByCode(ctx context.Context, accountCode sql.NullString) (FinancialAccount, error) {
	row := q.db.QueryRowContext(ctx, GetFinancialAccountByCode, accountCode)
	var i FinancialAccount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.AccountTypeCode,
		&i.AccountCode,
		&i.ParentID,
		&i.IsHeaderAccount,
		&i.IsDeductible,
		&i.IsTax,
		&i.IsReserved,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetFinancialAccountByName = `-- name: GetFinancialAccountByName :one
SELECT id, name, description, account_type_code, account_code, parent_id, is_header_account, is_deductible, is_tax, is_reserved, is_active, created_at, updated_at FROM financial_accounts WHERE name = $1
`

func (q *Queries) GetFinancialAccountByName(ctx context.Context, name string) (FinancialAccount, error) {
	row := q.db.QueryRowContext(ctx, GetFinancialAccountByName, name)
	var i FinancialAccount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.AccountTypeCode,
		&i.AccountCode,
		&i.ParentID,
		&i.IsHeaderAccount,
		&i.IsDeductible,
		&i.IsTax,
		&i.IsReserved,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListChildAccounts = `-- name: ListChildAccounts :many
SELECT id, name, description, account_type_code, account_code, parent_id, is_header_account, is_deductible, is_tax, is_reserved, is_active, created_at, updated_at FROM financial_accounts 
WHERE parent_id = $1 AND is_active = $2
ORDER BY account_code
`

type ListChildAccountsParams struct {
	ParentID uuid.NullUUID `json:"parent_id"`
	IsActive sql.NullBool  `json:"is_active"`
}

func (q *Queries) ListChildAccounts(ctx context.Context, arg ListChildAccountsParams) ([]FinancialAccount, error) {
	rows, err := q.db.QueryContext(ctx, ListChildAccounts, arg.ParentID, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FinancialAccount{}
	for rows.Next() {
		var i FinancialAccount
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.AccountTypeCode,
			&i.AccountCode,
			&i.ParentID,
			&i.IsHeaderAccount,
			&i.IsDeductible,
			&i.IsTax,
			&i.IsReserved,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListFinancialAccounts = `-- name: ListFinancialAccounts :many
SELECT id, name, description, account_type_code, account_code, parent_id, is_header_account, is_deductible, is_tax, is_reserved, is_active, created_at, updated_at FROM financial_accounts 
WHERE is_active = $1 
ORDER BY account_code
`

func (q *Queries) ListFinancialAccounts(ctx context.Context, isActive sql.NullBool) ([]FinancialAccount, error) {
	rows, err := q.db.QueryContext(ctx, ListFinancialAccounts, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FinancialAccount{}
	for rows.Next() {
		var i FinancialAccount
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.AccountTypeCode,
			&i.AccountCode,
			&i.ParentID,
			&i.IsHeaderAccount,
			&i.IsDeductible,
			&i.IsTax,
			&i.IsReserved,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListFinancialAccountsByType = `-- name: ListFinancialAccountsByType :many
SELECT id, name, description, account_type_code, account_code, parent_id, is_header_account, is_deductible, is_tax, is_reserved, is_active, created_at, updated_at FROM financial_accounts 
WHERE account_type_code = $1 AND is_active = $2
ORDER BY account_code
`

type ListFinancialAccountsByTypeParams struct {
	AccountTypeCode sql.NullString `json:"account_type_code"`
	IsActive        sql.NullBool   `json:"is_active"`
}

func (q *Queries) ListFinancialAccountsByType(ctx context.Context, arg ListFinancialAccountsByTypeParams) ([]FinancialAccount, error) {
	rows, err := q.db.QueryContext(ctx, ListFinancialAccountsByType, arg.AccountTypeCode, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FinancialAccount{}
	for rows.Next() {
		var i FinancialAccount
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.AccountTypeCode,
			&i.AccountCode,
			&i.ParentID,
			&i.IsHeaderAccount,
			&i.IsDeductible,
			&i.IsTax,
			&i.IsReserved,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListHeaderAccounts = `-- name: ListHeaderAccounts :many
SELECT id, name, description, account_type_code, account_code, parent_id, is_header_account, is_deductible, is_tax, is_reserved, is_active, created_at, updated_at FROM financial_accounts 
WHERE is_header_account = $1 AND is_active = $2
ORDER BY account_code
`

type ListHeaderAccountsParams struct {
	IsHeaderAccount sql.NullBool `json:"is_header_account"`
	IsActive        sql.NullBool `json:"is_active"`
}

func (q *Queries) ListHeaderAccounts(ctx context.Context, arg ListHeaderAccountsParams) ([]FinancialAccount, error) {
	rows, err := q.db.QueryContext(ctx, ListHeaderAccounts, arg.IsHeaderAccount, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FinancialAccount{}
	for rows.Next() {
		var i FinancialAccount
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.AccountTypeCode,
			&i.AccountCode,
			&i.ParentID,
			&i.IsHeaderAccount,
			&i.IsDeductible,
			&i.IsTax,
			&i.IsReserved,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchFinancialAccounts = `-- name: SearchFinancialAccounts :many
SELECT id, name, description, account_type_code, account_code, parent_id, is_header_account, is_deductible, is_tax, is_reserved, is_active, created_at, updated_at FROM financial_accounts 
WHERE (name ILIKE $1 OR description ILIKE $1 OR account_code ILIKE $1)
AND is_active = $2
ORDER BY account_code
`

type SearchFinancialAccountsParams struct {
	Name     string       `json:"name"`
	IsActive sql.NullBool `json:"is_active"`
}

func (q *Queries) SearchFinancialAccounts(ctx context.Context, arg SearchFinancialAccountsParams) ([]FinancialAccount, error) {
	rows, err := q.db.QueryContext(ctx, SearchFinancialAccounts, arg.Name, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FinancialAccount{}
	for rows.Next() {
		var i FinancialAccount
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.AccountTypeCode,
			&i.AccountCode,
			&i.ParentID,
			&i.IsHeaderAccount,
			&i.IsDeductible,
			&i.IsTax,
			&i.IsReserved,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateFinancialAccount = `-- name: UpdateFinancialAccount :one
UPDATE financial_accounts SET
    name = $2, description = $3, account_type_code = $4, account_code = $5,
    parent_id = $6, is_header_account = $7, is_deductible = $8, 
    is_tax = $9, is_reserved = $10, is_active = $11, updated_at = NOW()
WHERE id = $1 RETURNING id, name, description, account_type_code, account_code, parent_id, is_header_account, is_deductible, is_tax, is_reserved, is_active, created_at, updated_at
`

type UpdateFinancialAccountParams struct {
	ID              uuid.UUID      `json:"id"`
	Name            string         `json:"name"`
	Description     sql.NullString `json:"description"`
	AccountTypeCode sql.NullString `json:"account_type_code"`
	AccountCode     sql.NullString `json:"account_code"`
	ParentID        uuid.NullUUID  `json:"parent_id"`
	IsHeaderAccount sql.NullBool   `json:"is_header_account"`
	IsDeductible    sql.NullBool   `json:"is_deductible"`
	IsTax           sql.NullBool   `json:"is_tax"`
	IsReserved      sql.NullBool   `json:"is_reserved"`
	IsActive        sql.NullBool   `json:"is_active"`
}

func (q *Queries) UpdateFinancialAccount(ctx context.Context, arg UpdateFinancialAccountParams) (FinancialAccount, error) {
	row := q.db.QueryRowContext(ctx, UpdateFinancialAccount,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.AccountTypeCode,
		arg.AccountCode,
		arg.ParentID,
		arg.IsHeaderAccount,
		arg.IsDeductible,
		arg.IsTax,
		arg.IsReserved,
		arg.IsActive,
	)
	var i FinancialAccount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.AccountTypeCode,
		&i.AccountCode,
		&i.ParentID,
		&i.IsHeaderAccount,
		&i.IsDeductible,
		&i.IsTax,
		&i.IsReserved,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
