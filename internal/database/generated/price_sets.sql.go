// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: price_sets.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const CountPriceSets = `-- name: CountPriceSets :one
SELECT COUNT(*) FROM price_sets WHERE is_active = $1
`

func (q *Queries) CountPriceSets(ctx context.Context, isActive sql.NullBool) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountPriceSets, isActive)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountPriceSetsByExtends = `-- name: CountPriceSetsByExtends :one
SELECT COUNT(*) FROM price_sets 
WHERE extends = $1 AND is_active = $2
`

type CountPriceSetsByExtendsParams struct {
	Extends  sql.NullString `json:"extends"`
	IsActive sql.NullBool   `json:"is_active"`
}

func (q *Queries) CountPriceSetsByExtends(ctx context.Context, arg CountPriceSetsByExtendsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountPriceSetsByExtends, arg.Extends, arg.IsActive)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreatePriceSet = `-- name: CreatePriceSet :one
INSERT INTO price_sets (
    name, title, description, extends, financial_type_id, 
    is_active, is_quick_config, min_amount, max_amount
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, name, title, description, extends, financial_type_id, is_active, is_quick_config, min_amount, max_amount, created_at, updated_at
`

type CreatePriceSetParams struct {
	Name            string         `json:"name"`
	Title           string         `json:"title"`
	Description     sql.NullString `json:"description"`
	Extends         sql.NullString `json:"extends"`
	FinancialTypeID uuid.NullUUID  `json:"financial_type_id"`
	IsActive        sql.NullBool   `json:"is_active"`
	IsQuickConfig   sql.NullBool   `json:"is_quick_config"`
	MinAmount       sql.NullString `json:"min_amount"`
	MaxAmount       sql.NullString `json:"max_amount"`
}

func (q *Queries) CreatePriceSet(ctx context.Context, arg CreatePriceSetParams) (PriceSet, error) {
	row := q.db.QueryRowContext(ctx, CreatePriceSet,
		arg.Name,
		arg.Title,
		arg.Description,
		arg.Extends,
		arg.FinancialTypeID,
		arg.IsActive,
		arg.IsQuickConfig,
		arg.MinAmount,
		arg.MaxAmount,
	)
	var i PriceSet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.Extends,
		&i.FinancialTypeID,
		&i.IsActive,
		&i.IsQuickConfig,
		&i.MinAmount,
		&i.MaxAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeletePriceSet = `-- name: DeletePriceSet :exec
DELETE FROM price_sets WHERE id = $1
`

func (q *Queries) DeletePriceSet(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeletePriceSet, id)
	return err
}

const GetPriceSet = `-- name: GetPriceSet :one
SELECT id, name, title, description, extends, financial_type_id, is_active, is_quick_config, min_amount, max_amount, created_at, updated_at FROM price_sets WHERE id = $1
`

func (q *Queries) GetPriceSet(ctx context.Context, id uuid.UUID) (PriceSet, error) {
	row := q.db.QueryRowContext(ctx, GetPriceSet, id)
	var i PriceSet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.Extends,
		&i.FinancialTypeID,
		&i.IsActive,
		&i.IsQuickConfig,
		&i.MinAmount,
		&i.MaxAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetPriceSetByName = `-- name: GetPriceSetByName :one
SELECT id, name, title, description, extends, financial_type_id, is_active, is_quick_config, min_amount, max_amount, created_at, updated_at FROM price_sets WHERE name = $1
`

func (q *Queries) GetPriceSetByName(ctx context.Context, name string) (PriceSet, error) {
	row := q.db.QueryRowContext(ctx, GetPriceSetByName, name)
	var i PriceSet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.Extends,
		&i.FinancialTypeID,
		&i.IsActive,
		&i.IsQuickConfig,
		&i.MinAmount,
		&i.MaxAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetPriceSetByTitle = `-- name: GetPriceSetByTitle :one
SELECT id, name, title, description, extends, financial_type_id, is_active, is_quick_config, min_amount, max_amount, created_at, updated_at FROM price_sets WHERE title = $1
`

func (q *Queries) GetPriceSetByTitle(ctx context.Context, title string) (PriceSet, error) {
	row := q.db.QueryRowContext(ctx, GetPriceSetByTitle, title)
	var i PriceSet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.Extends,
		&i.FinancialTypeID,
		&i.IsActive,
		&i.IsQuickConfig,
		&i.MinAmount,
		&i.MaxAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListActivePriceSets = `-- name: ListActivePriceSets :many
SELECT id, name, title, description, extends, financial_type_id, is_active, is_quick_config, min_amount, max_amount, created_at, updated_at FROM price_sets 
WHERE is_active = TRUE 
ORDER BY name
`

func (q *Queries) ListActivePriceSets(ctx context.Context) ([]PriceSet, error) {
	rows, err := q.db.QueryContext(ctx, ListActivePriceSets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PriceSet{}
	for rows.Next() {
		var i PriceSet
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.Extends,
			&i.FinancialTypeID,
			&i.IsActive,
			&i.IsQuickConfig,
			&i.MinAmount,
			&i.MaxAmount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListPriceSets = `-- name: ListPriceSets :many
SELECT id, name, title, description, extends, financial_type_id, is_active, is_quick_config, min_amount, max_amount, created_at, updated_at FROM price_sets 
WHERE is_active = $1 
ORDER BY name
`

func (q *Queries) ListPriceSets(ctx context.Context, isActive sql.NullBool) ([]PriceSet, error) {
	rows, err := q.db.QueryContext(ctx, ListPriceSets, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PriceSet{}
	for rows.Next() {
		var i PriceSet
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.Extends,
			&i.FinancialTypeID,
			&i.IsActive,
			&i.IsQuickConfig,
			&i.MinAmount,
			&i.MaxAmount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListPriceSetsByExtends = `-- name: ListPriceSetsByExtends :many
SELECT id, name, title, description, extends, financial_type_id, is_active, is_quick_config, min_amount, max_amount, created_at, updated_at FROM price_sets 
WHERE extends = $1 AND is_active = $2
ORDER BY name
`

type ListPriceSetsByExtendsParams struct {
	Extends  sql.NullString `json:"extends"`
	IsActive sql.NullBool   `json:"is_active"`
}

func (q *Queries) ListPriceSetsByExtends(ctx context.Context, arg ListPriceSetsByExtendsParams) ([]PriceSet, error) {
	rows, err := q.db.QueryContext(ctx, ListPriceSetsByExtends, arg.Extends, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PriceSet{}
	for rows.Next() {
		var i PriceSet
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.Extends,
			&i.FinancialTypeID,
			&i.IsActive,
			&i.IsQuickConfig,
			&i.MinAmount,
			&i.MaxAmount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListPriceSetsByFinancialType = `-- name: ListPriceSetsByFinancialType :many
SELECT id, name, title, description, extends, financial_type_id, is_active, is_quick_config, min_amount, max_amount, created_at, updated_at FROM price_sets 
WHERE financial_type_id = $1 AND is_active = $2
ORDER BY name
`

type ListPriceSetsByFinancialTypeParams struct {
	FinancialTypeID uuid.NullUUID `json:"financial_type_id"`
	IsActive        sql.NullBool  `json:"is_active"`
}

func (q *Queries) ListPriceSetsByFinancialType(ctx context.Context, arg ListPriceSetsByFinancialTypeParams) ([]PriceSet, error) {
	rows, err := q.db.QueryContext(ctx, ListPriceSetsByFinancialType, arg.FinancialTypeID, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PriceSet{}
	for rows.Next() {
		var i PriceSet
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.Extends,
			&i.FinancialTypeID,
			&i.IsActive,
			&i.IsQuickConfig,
			&i.MinAmount,
			&i.MaxAmount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchPriceSets = `-- name: SearchPriceSets :many
SELECT id, name, title, description, extends, financial_type_id, is_active, is_quick_config, min_amount, max_amount, created_at, updated_at FROM price_sets 
WHERE (name ILIKE $1 OR title ILIKE $1 OR description ILIKE $1)
AND is_active = $2
ORDER BY name
`

type SearchPriceSetsParams struct {
	Name     string       `json:"name"`
	IsActive sql.NullBool `json:"is_active"`
}

func (q *Queries) SearchPriceSets(ctx context.Context, arg SearchPriceSetsParams) ([]PriceSet, error) {
	rows, err := q.db.QueryContext(ctx, SearchPriceSets, arg.Name, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PriceSet{}
	for rows.Next() {
		var i PriceSet
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.Extends,
			&i.FinancialTypeID,
			&i.IsActive,
			&i.IsQuickConfig,
			&i.MinAmount,
			&i.MaxAmount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdatePriceSet = `-- name: UpdatePriceSet :one
UPDATE price_sets SET
    name = $2, title = $3, description = $4, extends = $5,
    financial_type_id = $6, is_active = $7, is_quick_config = $8,
    min_amount = $9, max_amount = $10, updated_at = NOW()
WHERE id = $1 RETURNING id, name, title, description, extends, financial_type_id, is_active, is_quick_config, min_amount, max_amount, created_at, updated_at
`

type UpdatePriceSetParams struct {
	ID              uuid.UUID      `json:"id"`
	Name            string         `json:"name"`
	Title           string         `json:"title"`
	Description     sql.NullString `json:"description"`
	Extends         sql.NullString `json:"extends"`
	FinancialTypeID uuid.NullUUID  `json:"financial_type_id"`
	IsActive        sql.NullBool   `json:"is_active"`
	IsQuickConfig   sql.NullBool   `json:"is_quick_config"`
	MinAmount       sql.NullString `json:"min_amount"`
	MaxAmount       sql.NullString `json:"max_amount"`
}

func (q *Queries) UpdatePriceSet(ctx context.Context, arg UpdatePriceSetParams) (PriceSet, error) {
	row := q.db.QueryRowContext(ctx, UpdatePriceSet,
		arg.ID,
		arg.Name,
		arg.Title,
		arg.Description,
		arg.Extends,
		arg.FinancialTypeID,
		arg.IsActive,
		arg.IsQuickConfig,
		arg.MinAmount,
		arg.MaxAmount,
	)
	var i PriceSet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.Extends,
		&i.FinancialTypeID,
		&i.IsActive,
		&i.IsQuickConfig,
		&i.MinAmount,
		&i.MaxAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
