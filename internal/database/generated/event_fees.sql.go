// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: event_fees.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const CountActiveEventFees = `-- name: CountActiveEventFees :one
SELECT COUNT(*) FROM event_fees WHERE is_active = TRUE
`

func (q *Queries) CountActiveEventFees(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountActiveEventFees)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountEventFees = `-- name: CountEventFees :one
SELECT COUNT(*) FROM event_fees
`

func (q *Queries) CountEventFees(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountEventFees)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountEventFeesByEvent = `-- name: CountEventFeesByEvent :one
SELECT COUNT(*) FROM event_fees WHERE event_id = $1
`

func (q *Queries) CountEventFeesByEvent(ctx context.Context, eventID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountEventFeesByEvent, eventID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateEventFee = `-- name: CreateEventFee :one
INSERT INTO event_fees (
    event_id, name, label, amount, currency, is_active,
    weight, help_pre, help_post, is_default
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id, event_id, name, label, amount, currency, is_active, weight, help_pre, help_post, is_default, created_at, updated_at
`

type CreateEventFeeParams struct {
	EventID   uuid.UUID      `json:"event_id"`
	Name      string         `json:"name"`
	Label     string         `json:"label"`
	Amount    string         `json:"amount"`
	Currency  sql.NullString `json:"currency"`
	IsActive  sql.NullBool   `json:"is_active"`
	Weight    sql.NullInt32  `json:"weight"`
	HelpPre   sql.NullString `json:"help_pre"`
	HelpPost  sql.NullString `json:"help_post"`
	IsDefault sql.NullBool   `json:"is_default"`
}

func (q *Queries) CreateEventFee(ctx context.Context, arg CreateEventFeeParams) (EventFee, error) {
	row := q.db.QueryRowContext(ctx, CreateEventFee,
		arg.EventID,
		arg.Name,
		arg.Label,
		arg.Amount,
		arg.Currency,
		arg.IsActive,
		arg.Weight,
		arg.HelpPre,
		arg.HelpPost,
		arg.IsDefault,
	)
	var i EventFee
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Name,
		&i.Label,
		&i.Amount,
		&i.Currency,
		&i.IsActive,
		&i.Weight,
		&i.HelpPre,
		&i.HelpPost,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteEventFee = `-- name: DeleteEventFee :exec
DELETE FROM event_fees WHERE id = $1
`

func (q *Queries) DeleteEventFee(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteEventFee, id)
	return err
}

const GetActiveEventFees = `-- name: GetActiveEventFees :many
SELECT id, event_id, name, label, amount, currency, is_active, weight, help_pre, help_post, is_default, created_at, updated_at FROM event_fees 
WHERE is_active = TRUE
ORDER BY weight, name
`

func (q *Queries) GetActiveEventFees(ctx context.Context) ([]EventFee, error) {
	rows, err := q.db.QueryContext(ctx, GetActiveEventFees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EventFee{}
	for rows.Next() {
		var i EventFee
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.Name,
			&i.Label,
			&i.Amount,
			&i.Currency,
			&i.IsActive,
			&i.Weight,
			&i.HelpPre,
			&i.HelpPost,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetDefaultEventFee = `-- name: GetDefaultEventFee :one
SELECT id, event_id, name, label, amount, currency, is_active, weight, help_pre, help_post, is_default, created_at, updated_at FROM event_fees 
WHERE event_id = $1 AND is_default = TRUE AND is_active = TRUE
LIMIT 1
`

func (q *Queries) GetDefaultEventFee(ctx context.Context, eventID uuid.UUID) (EventFee, error) {
	row := q.db.QueryRowContext(ctx, GetDefaultEventFee, eventID)
	var i EventFee
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Name,
		&i.Label,
		&i.Amount,
		&i.Currency,
		&i.IsActive,
		&i.Weight,
		&i.HelpPre,
		&i.HelpPost,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetEventFee = `-- name: GetEventFee :one
SELECT id, event_id, name, label, amount, currency, is_active, weight, help_pre, help_post, is_default, created_at, updated_at FROM event_fees WHERE id = $1
`

func (q *Queries) GetEventFee(ctx context.Context, id uuid.UUID) (EventFee, error) {
	row := q.db.QueryRowContext(ctx, GetEventFee, id)
	var i EventFee
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Name,
		&i.Label,
		&i.Amount,
		&i.Currency,
		&i.IsActive,
		&i.Weight,
		&i.HelpPre,
		&i.HelpPost,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetEventFeeByEvent = `-- name: GetEventFeeByEvent :many
SELECT id, event_id, name, label, amount, currency, is_active, weight, help_pre, help_post, is_default, created_at, updated_at FROM event_fees 
WHERE event_id = $1
ORDER BY weight, name
`

func (q *Queries) GetEventFeeByEvent(ctx context.Context, eventID uuid.UUID) ([]EventFee, error) {
	rows, err := q.db.QueryContext(ctx, GetEventFeeByEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EventFee{}
	for rows.Next() {
		var i EventFee
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.Name,
			&i.Label,
			&i.Amount,
			&i.Currency,
			&i.IsActive,
			&i.Weight,
			&i.HelpPre,
			&i.HelpPost,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetEventFeeByName = `-- name: GetEventFeeByName :one
SELECT id, event_id, name, label, amount, currency, is_active, weight, help_pre, help_post, is_default, created_at, updated_at FROM event_fees WHERE name = $1 AND event_id = $2
`

type GetEventFeeByNameParams struct {
	Name    string    `json:"name"`
	EventID uuid.UUID `json:"event_id"`
}

func (q *Queries) GetEventFeeByName(ctx context.Context, arg GetEventFeeByNameParams) (EventFee, error) {
	row := q.db.QueryRowContext(ctx, GetEventFeeByName, arg.Name, arg.EventID)
	var i EventFee
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Name,
		&i.Label,
		&i.Amount,
		&i.Currency,
		&i.IsActive,
		&i.Weight,
		&i.HelpPre,
		&i.HelpPost,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListEventFees = `-- name: ListEventFees :many
SELECT id, event_id, name, label, amount, currency, is_active, weight, help_pre, help_post, is_default, created_at, updated_at FROM event_fees 
ORDER BY event_id, weight, name
`

func (q *Queries) ListEventFees(ctx context.Context) ([]EventFee, error) {
	rows, err := q.db.QueryContext(ctx, ListEventFees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EventFee{}
	for rows.Next() {
		var i EventFee
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.Name,
			&i.Label,
			&i.Amount,
			&i.Currency,
			&i.IsActive,
			&i.Weight,
			&i.HelpPre,
			&i.HelpPost,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListEventFeesByEvent = `-- name: ListEventFeesByEvent :many
SELECT id, event_id, name, label, amount, currency, is_active, weight, help_pre, help_post, is_default, created_at, updated_at FROM event_fees 
WHERE event_id = $1 AND is_active = $2
ORDER BY weight, name
`

type ListEventFeesByEventParams struct {
	EventID  uuid.UUID    `json:"event_id"`
	IsActive sql.NullBool `json:"is_active"`
}

func (q *Queries) ListEventFeesByEvent(ctx context.Context, arg ListEventFeesByEventParams) ([]EventFee, error) {
	rows, err := q.db.QueryContext(ctx, ListEventFeesByEvent, arg.EventID, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EventFee{}
	for rows.Next() {
		var i EventFee
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.Name,
			&i.Label,
			&i.Amount,
			&i.Currency,
			&i.IsActive,
			&i.Weight,
			&i.HelpPre,
			&i.HelpPost,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchEventFees = `-- name: SearchEventFees :many
SELECT id, event_id, name, label, amount, currency, is_active, weight, help_pre, help_post, is_default, created_at, updated_at FROM event_fees 
WHERE (name ILIKE $1 OR label ILIKE $1)
AND event_id = $2
ORDER BY weight, name
`

type SearchEventFeesParams struct {
	Name    string    `json:"name"`
	EventID uuid.UUID `json:"event_id"`
}

func (q *Queries) SearchEventFees(ctx context.Context, arg SearchEventFeesParams) ([]EventFee, error) {
	rows, err := q.db.QueryContext(ctx, SearchEventFees, arg.Name, arg.EventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EventFee{}
	for rows.Next() {
		var i EventFee
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.Name,
			&i.Label,
			&i.Amount,
			&i.Currency,
			&i.IsActive,
			&i.Weight,
			&i.HelpPre,
			&i.HelpPost,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateEventFee = `-- name: UpdateEventFee :one
UPDATE event_fees SET
    event_id = $2, name = $3, label = $4, amount = $5, currency = $6,
    is_active = $7, weight = $8, help_pre = $9, help_post = $10,
    is_default = $11, updated_at = NOW()
WHERE id = $1 RETURNING id, event_id, name, label, amount, currency, is_active, weight, help_pre, help_post, is_default, created_at, updated_at
`

type UpdateEventFeeParams struct {
	ID        uuid.UUID      `json:"id"`
	EventID   uuid.UUID      `json:"event_id"`
	Name      string         `json:"name"`
	Label     string         `json:"label"`
	Amount    string         `json:"amount"`
	Currency  sql.NullString `json:"currency"`
	IsActive  sql.NullBool   `json:"is_active"`
	Weight    sql.NullInt32  `json:"weight"`
	HelpPre   sql.NullString `json:"help_pre"`
	HelpPost  sql.NullString `json:"help_post"`
	IsDefault sql.NullBool   `json:"is_default"`
}

func (q *Queries) UpdateEventFee(ctx context.Context, arg UpdateEventFeeParams) (EventFee, error) {
	row := q.db.QueryRowContext(ctx, UpdateEventFee,
		arg.ID,
		arg.EventID,
		arg.Name,
		arg.Label,
		arg.Amount,
		arg.Currency,
		arg.IsActive,
		arg.Weight,
		arg.HelpPre,
		arg.HelpPost,
		arg.IsDefault,
	)
	var i EventFee
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.Name,
		&i.Label,
		&i.Amount,
		&i.Currency,
		&i.IsActive,
		&i.Weight,
		&i.HelpPre,
		&i.HelpPost,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
