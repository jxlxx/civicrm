// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: uf_fields.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const CountActiveUFFieldsByGroup = `-- name: CountActiveUFFieldsByGroup :one
SELECT COUNT(*) FROM uf_fields WHERE uf_group_id = $1 AND is_active = TRUE
`

func (q *Queries) CountActiveUFFieldsByGroup(ctx context.Context, ufGroupID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountActiveUFFieldsByGroup, ufGroupID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountRequiredUFFieldsByGroup = `-- name: CountRequiredUFFieldsByGroup :one
SELECT COUNT(*) FROM uf_fields WHERE uf_group_id = $1 AND is_required = TRUE
`

func (q *Queries) CountRequiredUFFieldsByGroup(ctx context.Context, ufGroupID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountRequiredUFFieldsByGroup, ufGroupID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountUFFieldsByGroup = `-- name: CountUFFieldsByGroup :one
SELECT COUNT(*) FROM uf_fields WHERE uf_group_id = $1
`

func (q *Queries) CountUFFieldsByGroup(ctx context.Context, ufGroupID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountUFFieldsByGroup, ufGroupID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateUFField = `-- name: CreateUFField :one
INSERT INTO uf_fields (
    uf_group_id, name, label, field_type, is_required, weight, help_pre, help_post, options, validation_rules
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id, uf_group_id, name, label, field_type, is_required, is_active, weight, help_pre, help_post, options, validation_rules, created_at, updated_at
`

type CreateUFFieldParams struct {
	UfGroupID       uuid.UUID      `json:"uf_group_id"`
	Name            string         `json:"name"`
	Label           string         `json:"label"`
	FieldType       string         `json:"field_type"`
	IsRequired      sql.NullBool   `json:"is_required"`
	Weight          sql.NullInt32  `json:"weight"`
	HelpPre         sql.NullString `json:"help_pre"`
	HelpPost        sql.NullString `json:"help_post"`
	Options         sql.NullString `json:"options"`
	ValidationRules sql.NullString `json:"validation_rules"`
}

func (q *Queries) CreateUFField(ctx context.Context, arg CreateUFFieldParams) (UfField, error) {
	row := q.db.QueryRowContext(ctx, CreateUFField,
		arg.UfGroupID,
		arg.Name,
		arg.Label,
		arg.FieldType,
		arg.IsRequired,
		arg.Weight,
		arg.HelpPre,
		arg.HelpPost,
		arg.Options,
		arg.ValidationRules,
	)
	var i UfField
	err := row.Scan(
		&i.ID,
		&i.UfGroupID,
		&i.Name,
		&i.Label,
		&i.FieldType,
		&i.IsRequired,
		&i.IsActive,
		&i.Weight,
		&i.HelpPre,
		&i.HelpPost,
		&i.Options,
		&i.ValidationRules,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteUFField = `-- name: DeleteUFField :exec
DELETE FROM uf_fields WHERE id = $1 AND uf_group_id = $2
`

type DeleteUFFieldParams struct {
	ID        uuid.UUID `json:"id"`
	UfGroupID uuid.UUID `json:"uf_group_id"`
}

func (q *Queries) DeleteUFField(ctx context.Context, arg DeleteUFFieldParams) error {
	_, err := q.db.ExecContext(ctx, DeleteUFField, arg.ID, arg.UfGroupID)
	return err
}

const DeleteUFFieldsByGroup = `-- name: DeleteUFFieldsByGroup :exec
DELETE FROM uf_fields WHERE uf_group_id = $1
`

func (q *Queries) DeleteUFFieldsByGroup(ctx context.Context, ufGroupID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteUFFieldsByGroup, ufGroupID)
	return err
}

const GetUFField = `-- name: GetUFField :one
SELECT id, uf_group_id, name, label, field_type, is_required, is_active, weight, help_pre, help_post, options, validation_rules, created_at, updated_at FROM uf_fields WHERE id = $1
`

func (q *Queries) GetUFField(ctx context.Context, id uuid.UUID) (UfField, error) {
	row := q.db.QueryRowContext(ctx, GetUFField, id)
	var i UfField
	err := row.Scan(
		&i.ID,
		&i.UfGroupID,
		&i.Name,
		&i.Label,
		&i.FieldType,
		&i.IsRequired,
		&i.IsActive,
		&i.Weight,
		&i.HelpPre,
		&i.HelpPost,
		&i.Options,
		&i.ValidationRules,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetUFFieldByName = `-- name: GetUFFieldByName :one
SELECT id, uf_group_id, name, label, field_type, is_required, is_active, weight, help_pre, help_post, options, validation_rules, created_at, updated_at FROM uf_fields WHERE uf_group_id = $1 AND name = $2
`

type GetUFFieldByNameParams struct {
	UfGroupID uuid.UUID `json:"uf_group_id"`
	Name      string    `json:"name"`
}

func (q *Queries) GetUFFieldByName(ctx context.Context, arg GetUFFieldByNameParams) (UfField, error) {
	row := q.db.QueryRowContext(ctx, GetUFFieldByName, arg.UfGroupID, arg.Name)
	var i UfField
	err := row.Scan(
		&i.ID,
		&i.UfGroupID,
		&i.Name,
		&i.Label,
		&i.FieldType,
		&i.IsRequired,
		&i.IsActive,
		&i.Weight,
		&i.HelpPre,
		&i.HelpPost,
		&i.Options,
		&i.ValidationRules,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetUFFieldWithGroup = `-- name: GetUFFieldWithGroup :one
SELECT uff.id, uff.uf_group_id, uff.name, uff.label, uff.field_type, uff.is_required, uff.is_active, uff.weight, uff.help_pre, uff.help_post, uff.options, uff.validation_rules, uff.created_at, uff.updated_at, ufg.title as group_title, ufg.name as group_name, d.name as domain_name FROM uf_fields uff
INNER JOIN uf_groups ufg ON uff.uf_group_id = ufg.id
INNER JOIN domains d ON ufg.domain_id = d.id
WHERE uff.id = $1
`

type GetUFFieldWithGroupRow struct {
	ID              uuid.UUID      `json:"id"`
	UfGroupID       uuid.UUID      `json:"uf_group_id"`
	Name            string         `json:"name"`
	Label           string         `json:"label"`
	FieldType       string         `json:"field_type"`
	IsRequired      sql.NullBool   `json:"is_required"`
	IsActive        sql.NullBool   `json:"is_active"`
	Weight          sql.NullInt32  `json:"weight"`
	HelpPre         sql.NullString `json:"help_pre"`
	HelpPost        sql.NullString `json:"help_post"`
	Options         sql.NullString `json:"options"`
	ValidationRules sql.NullString `json:"validation_rules"`
	CreatedAt       sql.NullTime   `json:"created_at"`
	UpdatedAt       sql.NullTime   `json:"updated_at"`
	GroupTitle      string         `json:"group_title"`
	GroupName       string         `json:"group_name"`
	DomainName      string         `json:"domain_name"`
}

func (q *Queries) GetUFFieldWithGroup(ctx context.Context, id uuid.UUID) (GetUFFieldWithGroupRow, error) {
	row := q.db.QueryRowContext(ctx, GetUFFieldWithGroup, id)
	var i GetUFFieldWithGroupRow
	err := row.Scan(
		&i.ID,
		&i.UfGroupID,
		&i.Name,
		&i.Label,
		&i.FieldType,
		&i.IsRequired,
		&i.IsActive,
		&i.Weight,
		&i.HelpPre,
		&i.HelpPost,
		&i.Options,
		&i.ValidationRules,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GroupTitle,
		&i.GroupName,
		&i.DomainName,
	)
	return i, err
}

const GetUFFieldsByEntity = `-- name: GetUFFieldsByEntity :many
SELECT uff.id, uff.uf_group_id, uff.name, uff.label, uff.field_type, uff.is_required, uff.is_active, uff.weight, uff.help_pre, uff.help_post, uff.options, uff.validation_rules, uff.created_at, uff.updated_at, ufg.title as group_title FROM uf_fields uff
INNER JOIN uf_groups ufg ON uff.uf_group_id = ufg.id
INNER JOIN uf_joins ufj ON ufg.id = ufj.uf_group_id
WHERE ufj.entity_table = $1 AND ufj.entity_id = $2 AND uff.is_active = TRUE
ORDER BY ufj.weight ASC, uff.weight ASC, uff.name ASC
`

type GetUFFieldsByEntityParams struct {
	EntityTable string    `json:"entity_table"`
	EntityID    uuid.UUID `json:"entity_id"`
}

type GetUFFieldsByEntityRow struct {
	ID              uuid.UUID      `json:"id"`
	UfGroupID       uuid.UUID      `json:"uf_group_id"`
	Name            string         `json:"name"`
	Label           string         `json:"label"`
	FieldType       string         `json:"field_type"`
	IsRequired      sql.NullBool   `json:"is_required"`
	IsActive        sql.NullBool   `json:"is_active"`
	Weight          sql.NullInt32  `json:"weight"`
	HelpPre         sql.NullString `json:"help_pre"`
	HelpPost        sql.NullString `json:"help_post"`
	Options         sql.NullString `json:"options"`
	ValidationRules sql.NullString `json:"validation_rules"`
	CreatedAt       sql.NullTime   `json:"created_at"`
	UpdatedAt       sql.NullTime   `json:"updated_at"`
	GroupTitle      string         `json:"group_title"`
}

func (q *Queries) GetUFFieldsByEntity(ctx context.Context, arg GetUFFieldsByEntityParams) ([]GetUFFieldsByEntityRow, error) {
	rows, err := q.db.QueryContext(ctx, GetUFFieldsByEntity, arg.EntityTable, arg.EntityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUFFieldsByEntityRow{}
	for rows.Next() {
		var i GetUFFieldsByEntityRow
		if err := rows.Scan(
			&i.ID,
			&i.UfGroupID,
			&i.Name,
			&i.Label,
			&i.FieldType,
			&i.IsRequired,
			&i.IsActive,
			&i.Weight,
			&i.HelpPre,
			&i.HelpPost,
			&i.Options,
			&i.ValidationRules,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GroupTitle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListActiveUFFieldsByGroup = `-- name: ListActiveUFFieldsByGroup :many
SELECT id, uf_group_id, name, label, field_type, is_required, is_active, weight, help_pre, help_post, options, validation_rules, created_at, updated_at FROM uf_fields 
WHERE uf_group_id = $1 AND is_active = TRUE 
ORDER BY weight ASC, name ASC
`

func (q *Queries) ListActiveUFFieldsByGroup(ctx context.Context, ufGroupID uuid.UUID) ([]UfField, error) {
	rows, err := q.db.QueryContext(ctx, ListActiveUFFieldsByGroup, ufGroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UfField{}
	for rows.Next() {
		var i UfField
		if err := rows.Scan(
			&i.ID,
			&i.UfGroupID,
			&i.Name,
			&i.Label,
			&i.FieldType,
			&i.IsRequired,
			&i.IsActive,
			&i.Weight,
			&i.HelpPre,
			&i.HelpPost,
			&i.Options,
			&i.ValidationRules,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListAllUFFields = `-- name: ListAllUFFields :many
SELECT uff.id, uff.uf_group_id, uff.name, uff.label, uff.field_type, uff.is_required, uff.is_active, uff.weight, uff.help_pre, uff.help_post, uff.options, uff.validation_rules, uff.created_at, uff.updated_at, ufg.title as group_title, d.name as domain_name FROM uf_fields uff
INNER JOIN uf_groups ufg ON uff.uf_group_id = ufg.id
INNER JOIN domains d ON ufg.domain_id = d.id
ORDER BY d.name ASC, ufg.title ASC, uff.weight ASC
`

type ListAllUFFieldsRow struct {
	ID              uuid.UUID      `json:"id"`
	UfGroupID       uuid.UUID      `json:"uf_group_id"`
	Name            string         `json:"name"`
	Label           string         `json:"label"`
	FieldType       string         `json:"field_type"`
	IsRequired      sql.NullBool   `json:"is_required"`
	IsActive        sql.NullBool   `json:"is_active"`
	Weight          sql.NullInt32  `json:"weight"`
	HelpPre         sql.NullString `json:"help_pre"`
	HelpPost        sql.NullString `json:"help_post"`
	Options         sql.NullString `json:"options"`
	ValidationRules sql.NullString `json:"validation_rules"`
	CreatedAt       sql.NullTime   `json:"created_at"`
	UpdatedAt       sql.NullTime   `json:"updated_at"`
	GroupTitle      string         `json:"group_title"`
	DomainName      string         `json:"domain_name"`
}

func (q *Queries) ListAllUFFields(ctx context.Context) ([]ListAllUFFieldsRow, error) {
	rows, err := q.db.QueryContext(ctx, ListAllUFFields)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAllUFFieldsRow{}
	for rows.Next() {
		var i ListAllUFFieldsRow
		if err := rows.Scan(
			&i.ID,
			&i.UfGroupID,
			&i.Name,
			&i.Label,
			&i.FieldType,
			&i.IsRequired,
			&i.IsActive,
			&i.Weight,
			&i.HelpPre,
			&i.HelpPost,
			&i.Options,
			&i.ValidationRules,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GroupTitle,
			&i.DomainName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListRequiredUFFields = `-- name: ListRequiredUFFields :many
SELECT id, uf_group_id, name, label, field_type, is_required, is_active, weight, help_pre, help_post, options, validation_rules, created_at, updated_at FROM uf_fields 
WHERE uf_group_id = $1 AND is_required = TRUE 
ORDER BY weight ASC, name ASC
`

func (q *Queries) ListRequiredUFFields(ctx context.Context, ufGroupID uuid.UUID) ([]UfField, error) {
	rows, err := q.db.QueryContext(ctx, ListRequiredUFFields, ufGroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UfField{}
	for rows.Next() {
		var i UfField
		if err := rows.Scan(
			&i.ID,
			&i.UfGroupID,
			&i.Name,
			&i.Label,
			&i.FieldType,
			&i.IsRequired,
			&i.IsActive,
			&i.Weight,
			&i.HelpPre,
			&i.HelpPost,
			&i.Options,
			&i.ValidationRules,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListUFFieldsByGroup = `-- name: ListUFFieldsByGroup :many
SELECT id, uf_group_id, name, label, field_type, is_required, is_active, weight, help_pre, help_post, options, validation_rules, created_at, updated_at FROM uf_fields 
WHERE uf_group_id = $1 
ORDER BY weight ASC, name ASC
`

func (q *Queries) ListUFFieldsByGroup(ctx context.Context, ufGroupID uuid.UUID) ([]UfField, error) {
	rows, err := q.db.QueryContext(ctx, ListUFFieldsByGroup, ufGroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UfField{}
	for rows.Next() {
		var i UfField
		if err := rows.Scan(
			&i.ID,
			&i.UfGroupID,
			&i.Name,
			&i.Label,
			&i.FieldType,
			&i.IsRequired,
			&i.IsActive,
			&i.Weight,
			&i.HelpPre,
			&i.HelpPost,
			&i.Options,
			&i.ValidationRules,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListUFFieldsByType = `-- name: ListUFFieldsByType :many
SELECT id, uf_group_id, name, label, field_type, is_required, is_active, weight, help_pre, help_post, options, validation_rules, created_at, updated_at FROM uf_fields 
WHERE uf_group_id = $1 AND field_type = $2 
ORDER BY weight ASC, name ASC
`

type ListUFFieldsByTypeParams struct {
	UfGroupID uuid.UUID `json:"uf_group_id"`
	FieldType string    `json:"field_type"`
}

func (q *Queries) ListUFFieldsByType(ctx context.Context, arg ListUFFieldsByTypeParams) ([]UfField, error) {
	rows, err := q.db.QueryContext(ctx, ListUFFieldsByType, arg.UfGroupID, arg.FieldType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UfField{}
	for rows.Next() {
		var i UfField
		if err := rows.Scan(
			&i.ID,
			&i.UfGroupID,
			&i.Name,
			&i.Label,
			&i.FieldType,
			&i.IsRequired,
			&i.IsActive,
			&i.Weight,
			&i.HelpPre,
			&i.HelpPost,
			&i.Options,
			&i.ValidationRules,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ReorderUFFields = `-- name: ReorderUFFields :many
UPDATE uf_fields 
SET 
    weight = CASE 
        WHEN uf_fields.id = $1 THEN $2
        WHEN uf_fields.id = $3 THEN $4
        WHEN uf_fields.id = $5 THEN $6
        ELSE weight
    END,
    updated_at = NOW()
WHERE uf_group_id = $7 AND uf_fields.id IN ($1, $3, $5)
RETURNING id, uf_group_id, name, label, field_type, is_required, is_active, weight, help_pre, help_post, options, validation_rules, created_at, updated_at
`

type ReorderUFFieldsParams struct {
	ID        uuid.UUID     `json:"id"`
	Weight    sql.NullInt32 `json:"weight"`
	ID_2      uuid.UUID     `json:"id_2"`
	Weight_2  sql.NullInt32 `json:"weight_2"`
	ID_3      uuid.UUID     `json:"id_3"`
	Weight_3  sql.NullInt32 `json:"weight_3"`
	UfGroupID uuid.UUID     `json:"uf_group_id"`
}

func (q *Queries) ReorderUFFields(ctx context.Context, arg ReorderUFFieldsParams) ([]UfField, error) {
	rows, err := q.db.QueryContext(ctx, ReorderUFFields,
		arg.ID,
		arg.Weight,
		arg.ID_2,
		arg.Weight_2,
		arg.ID_3,
		arg.Weight_3,
		arg.UfGroupID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UfField{}
	for rows.Next() {
		var i UfField
		if err := rows.Scan(
			&i.ID,
			&i.UfGroupID,
			&i.Name,
			&i.Label,
			&i.FieldType,
			&i.IsRequired,
			&i.IsActive,
			&i.Weight,
			&i.HelpPre,
			&i.HelpPost,
			&i.Options,
			&i.ValidationRules,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchUFFields = `-- name: SearchUFFields :many
SELECT uff.id, uff.uf_group_id, uff.name, uff.label, uff.field_type, uff.is_required, uff.is_active, uff.weight, uff.help_pre, uff.help_post, uff.options, uff.validation_rules, uff.created_at, uff.updated_at, ufg.title as group_title, d.name as domain_name FROM uf_fields uff
INNER JOIN uf_groups ufg ON uff.uf_group_id = ufg.id
INNER JOIN domains d ON ufg.domain_id = d.id
WHERE uff.name ILIKE $1 OR uff.label ILIKE $1 OR uff.help_pre ILIKE $1 OR uff.help_post ILIKE $1
ORDER BY d.name ASC, ufg.title ASC, uff.weight ASC
LIMIT $2 OFFSET $3
`

type SearchUFFieldsParams struct {
	Name   string `json:"name"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type SearchUFFieldsRow struct {
	ID              uuid.UUID      `json:"id"`
	UfGroupID       uuid.UUID      `json:"uf_group_id"`
	Name            string         `json:"name"`
	Label           string         `json:"label"`
	FieldType       string         `json:"field_type"`
	IsRequired      sql.NullBool   `json:"is_required"`
	IsActive        sql.NullBool   `json:"is_active"`
	Weight          sql.NullInt32  `json:"weight"`
	HelpPre         sql.NullString `json:"help_pre"`
	HelpPost        sql.NullString `json:"help_post"`
	Options         sql.NullString `json:"options"`
	ValidationRules sql.NullString `json:"validation_rules"`
	CreatedAt       sql.NullTime   `json:"created_at"`
	UpdatedAt       sql.NullTime   `json:"updated_at"`
	GroupTitle      string         `json:"group_title"`
	DomainName      string         `json:"domain_name"`
}

func (q *Queries) SearchUFFields(ctx context.Context, arg SearchUFFieldsParams) ([]SearchUFFieldsRow, error) {
	rows, err := q.db.QueryContext(ctx, SearchUFFields, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchUFFieldsRow{}
	for rows.Next() {
		var i SearchUFFieldsRow
		if err := rows.Scan(
			&i.ID,
			&i.UfGroupID,
			&i.Name,
			&i.Label,
			&i.FieldType,
			&i.IsRequired,
			&i.IsActive,
			&i.Weight,
			&i.HelpPre,
			&i.HelpPost,
			&i.Options,
			&i.ValidationRules,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GroupTitle,
			&i.DomainName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateUFField = `-- name: UpdateUFField :one
UPDATE uf_fields 
SET 
    name = $3,
    label = $4,
    field_type = $5,
    is_required = $6,
    weight = $7,
    help_pre = $8,
    help_post = $9,
    options = $10,
    validation_rules = $11,
    is_active = $12,
    updated_at = NOW()
WHERE id = $1 AND uf_group_id = $2 
RETURNING id, uf_group_id, name, label, field_type, is_required, is_active, weight, help_pre, help_post, options, validation_rules, created_at, updated_at
`

type UpdateUFFieldParams struct {
	ID              uuid.UUID      `json:"id"`
	UfGroupID       uuid.UUID      `json:"uf_group_id"`
	Name            string         `json:"name"`
	Label           string         `json:"label"`
	FieldType       string         `json:"field_type"`
	IsRequired      sql.NullBool   `json:"is_required"`
	Weight          sql.NullInt32  `json:"weight"`
	HelpPre         sql.NullString `json:"help_pre"`
	HelpPost        sql.NullString `json:"help_post"`
	Options         sql.NullString `json:"options"`
	ValidationRules sql.NullString `json:"validation_rules"`
	IsActive        sql.NullBool   `json:"is_active"`
}

func (q *Queries) UpdateUFField(ctx context.Context, arg UpdateUFFieldParams) (UfField, error) {
	row := q.db.QueryRowContext(ctx, UpdateUFField,
		arg.ID,
		arg.UfGroupID,
		arg.Name,
		arg.Label,
		arg.FieldType,
		arg.IsRequired,
		arg.Weight,
		arg.HelpPre,
		arg.HelpPost,
		arg.Options,
		arg.ValidationRules,
		arg.IsActive,
	)
	var i UfField
	err := row.Scan(
		&i.ID,
		&i.UfGroupID,
		&i.Name,
		&i.Label,
		&i.FieldType,
		&i.IsRequired,
		&i.IsActive,
		&i.Weight,
		&i.HelpPre,
		&i.HelpPost,
		&i.Options,
		&i.ValidationRules,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateUFFieldStatus = `-- name: UpdateUFFieldStatus :one
UPDATE uf_fields 
SET 
    is_active = $3,
    updated_at = NOW()
WHERE id = $1 AND uf_group_id = $2 
RETURNING id, uf_group_id, name, label, field_type, is_required, is_active, weight, help_pre, help_post, options, validation_rules, created_at, updated_at
`

type UpdateUFFieldStatusParams struct {
	ID        uuid.UUID    `json:"id"`
	UfGroupID uuid.UUID    `json:"uf_group_id"`
	IsActive  sql.NullBool `json:"is_active"`
}

func (q *Queries) UpdateUFFieldStatus(ctx context.Context, arg UpdateUFFieldStatusParams) (UfField, error) {
	row := q.db.QueryRowContext(ctx, UpdateUFFieldStatus, arg.ID, arg.UfGroupID, arg.IsActive)
	var i UfField
	err := row.Scan(
		&i.ID,
		&i.UfGroupID,
		&i.Name,
		&i.Label,
		&i.FieldType,
		&i.IsRequired,
		&i.IsActive,
		&i.Weight,
		&i.HelpPre,
		&i.HelpPost,
		&i.Options,
		&i.ValidationRules,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateUFFieldWeight = `-- name: UpdateUFFieldWeight :one
UPDATE uf_fields 
SET 
    weight = $3,
    updated_at = NOW()
WHERE id = $1 AND uf_group_id = $2 
RETURNING id, uf_group_id, name, label, field_type, is_required, is_active, weight, help_pre, help_post, options, validation_rules, created_at, updated_at
`

type UpdateUFFieldWeightParams struct {
	ID        uuid.UUID     `json:"id"`
	UfGroupID uuid.UUID     `json:"uf_group_id"`
	Weight    sql.NullInt32 `json:"weight"`
}

func (q *Queries) UpdateUFFieldWeight(ctx context.Context, arg UpdateUFFieldWeightParams) (UfField, error) {
	row := q.db.QueryRowContext(ctx, UpdateUFFieldWeight, arg.ID, arg.UfGroupID, arg.Weight)
	var i UfField
	err := row.Scan(
		&i.ID,
		&i.UfGroupID,
		&i.Name,
		&i.Label,
		&i.FieldType,
		&i.IsRequired,
		&i.IsActive,
		&i.Weight,
		&i.HelpPre,
		&i.HelpPost,
		&i.Options,
		&i.ValidationRules,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ValidateUFFieldName = `-- name: ValidateUFFieldName :one
SELECT COUNT(*) > 0 as exists FROM uf_fields 
WHERE uf_group_id = $1 AND name = $2 AND id != $3
`

type ValidateUFFieldNameParams struct {
	UfGroupID uuid.UUID `json:"uf_group_id"`
	Name      string    `json:"name"`
	ID        uuid.UUID `json:"id"`
}

func (q *Queries) ValidateUFFieldName(ctx context.Context, arg ValidateUFFieldNameParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, ValidateUFFieldName, arg.UfGroupID, arg.Name, arg.ID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
