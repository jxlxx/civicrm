// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: campaign_contributions.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const CreateCampaignContribution = `-- name: CreateCampaignContribution :one
INSERT INTO campaign_contributions (
    campaign_id, contribution_id, is_deleted
) VALUES (
    $1, $2, $3
) RETURNING id, campaign_id, contribution_id, is_deleted, created_at, updated_at
`

type CreateCampaignContributionParams struct {
	CampaignID     uuid.UUID    `json:"campaign_id"`
	ContributionID uuid.UUID    `json:"contribution_id"`
	IsDeleted      sql.NullBool `json:"is_deleted"`
}

func (q *Queries) CreateCampaignContribution(ctx context.Context, arg CreateCampaignContributionParams) (CampaignContribution, error) {
	row := q.db.QueryRowContext(ctx, CreateCampaignContribution, arg.CampaignID, arg.ContributionID, arg.IsDeleted)
	var i CampaignContribution
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.ContributionID,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteCampaignContribution = `-- name: DeleteCampaignContribution :exec
UPDATE campaign_contributions SET is_deleted = TRUE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) DeleteCampaignContribution(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteCampaignContribution, id)
	return err
}

const GetCampaignContribution = `-- name: GetCampaignContribution :one
SELECT id, campaign_id, contribution_id, is_deleted, created_at, updated_at FROM campaign_contributions WHERE id = $1 AND is_deleted = FALSE
`

func (q *Queries) GetCampaignContribution(ctx context.Context, id uuid.UUID) (CampaignContribution, error) {
	row := q.db.QueryRowContext(ctx, GetCampaignContribution, id)
	var i CampaignContribution
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.ContributionID,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCampaignContributionCount = `-- name: GetCampaignContributionCount :one
SELECT COUNT(*) FROM campaign_contributions WHERE campaign_id = $1 AND is_deleted = FALSE
`

func (q *Queries) GetCampaignContributionCount(ctx context.Context, campaignID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, GetCampaignContributionCount, campaignID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const GetCampaignContributionStats = `-- name: GetCampaignContributionStats :many
SELECT 
    co.contribution_type,
    COUNT(cc.id) as contribution_count,
    SUM(co.amount) as total_amount
FROM campaign_contributions cc
JOIN contributions co ON cc.contribution_id = co.id
WHERE cc.campaign_id = $1 AND cc.is_deleted = FALSE
GROUP BY co.contribution_type
ORDER BY co.contribution_type
`

type GetCampaignContributionStatsRow struct {
	ContributionType  sql.NullString `json:"contribution_type"`
	ContributionCount int64          `json:"contribution_count"`
	TotalAmount       int64          `json:"total_amount"`
}

func (q *Queries) GetCampaignContributionStats(ctx context.Context, campaignID uuid.UUID) ([]GetCampaignContributionStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignContributionStats, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCampaignContributionStatsRow{}
	for rows.Next() {
		var i GetCampaignContributionStatsRow
		if err := rows.Scan(&i.ContributionType, &i.ContributionCount, &i.TotalAmount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCampaignContributionsByCampaign = `-- name: GetCampaignContributionsByCampaign :many
SELECT id, campaign_id, contribution_id, is_deleted, created_at, updated_at FROM campaign_contributions 
WHERE campaign_id = $1 AND is_deleted = FALSE 
ORDER BY id DESC
`

func (q *Queries) GetCampaignContributionsByCampaign(ctx context.Context, campaignID uuid.UUID) ([]CampaignContribution, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignContributionsByCampaign, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignContribution{}
	for rows.Next() {
		var i CampaignContribution
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.ContributionID,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCampaignContributionsByContribution = `-- name: GetCampaignContributionsByContribution :one
SELECT id, campaign_id, contribution_id, is_deleted, created_at, updated_at FROM campaign_contributions WHERE contribution_id = $1 AND is_deleted = FALSE
`

func (q *Queries) GetCampaignContributionsByContribution(ctx context.Context, contributionID uuid.UUID) (CampaignContribution, error) {
	row := q.db.QueryRowContext(ctx, GetCampaignContributionsByContribution, contributionID)
	var i CampaignContribution
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.ContributionID,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCampaignContributionsWithDetails = `-- name: GetCampaignContributionsWithDetails :many
SELECT 
    cc.id, cc.campaign_id, cc.contribution_id, cc.is_deleted, cc.created_at, cc.updated_at,
    co.contact_id,
    co.contribution_type,
    co.amount,
    co.currency,
    co.received_date,
    co.status,
    c.first_name, c.last_name
FROM campaign_contributions cc
JOIN contributions co ON cc.contribution_id = co.id
JOIN contacts c ON co.contact_id = c.id
WHERE cc.campaign_id = $1 AND cc.is_deleted = FALSE 
ORDER BY co.received_date DESC
`

type GetCampaignContributionsWithDetailsRow struct {
	ID               uuid.UUID      `json:"id"`
	CampaignID       uuid.UUID      `json:"campaign_id"`
	ContributionID   uuid.UUID      `json:"contribution_id"`
	IsDeleted        sql.NullBool   `json:"is_deleted"`
	CreatedAt        sql.NullTime   `json:"created_at"`
	UpdatedAt        sql.NullTime   `json:"updated_at"`
	ContactID        uuid.UUID      `json:"contact_id"`
	ContributionType sql.NullString `json:"contribution_type"`
	Amount           string         `json:"amount"`
	Currency         sql.NullString `json:"currency"`
	ReceivedDate     sql.NullTime   `json:"received_date"`
	Status           sql.NullString `json:"status"`
	FirstName        sql.NullString `json:"first_name"`
	LastName         sql.NullString `json:"last_name"`
}

func (q *Queries) GetCampaignContributionsWithDetails(ctx context.Context, campaignID uuid.UUID) ([]GetCampaignContributionsWithDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignContributionsWithDetails, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCampaignContributionsWithDetailsRow{}
	for rows.Next() {
		var i GetCampaignContributionsWithDetailsRow
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.ContributionID,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ContactID,
			&i.ContributionType,
			&i.Amount,
			&i.Currency,
			&i.ReceivedDate,
			&i.Status,
			&i.FirstName,
			&i.LastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCampaignRevenueSummary = `-- name: GetCampaignRevenueSummary :many
SELECT 
    c.id as campaign_id,
    c.name as campaign_name,
    COUNT(cc.id) as contribution_count,
    SUM(co.amount) as total_revenue,
    AVG(co.amount) as average_contribution
FROM campaigns c
LEFT JOIN campaign_contributions cc ON c.id = cc.campaign_id AND cc.is_deleted = FALSE
LEFT JOIN contributions co ON cc.contribution_id = co.id
WHERE c.is_active = $1
GROUP BY c.id, c.name
ORDER BY c.start_date DESC
`

type GetCampaignRevenueSummaryRow struct {
	CampaignID          uuid.UUID `json:"campaign_id"`
	CampaignName        string    `json:"campaign_name"`
	ContributionCount   int64     `json:"contribution_count"`
	TotalRevenue        int64     `json:"total_revenue"`
	AverageContribution float64   `json:"average_contribution"`
}

func (q *Queries) GetCampaignRevenueSummary(ctx context.Context, isActive sql.NullBool) ([]GetCampaignRevenueSummaryRow, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignRevenueSummary, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCampaignRevenueSummaryRow{}
	for rows.Next() {
		var i GetCampaignRevenueSummaryRow
		if err := rows.Scan(
			&i.CampaignID,
			&i.CampaignName,
			&i.ContributionCount,
			&i.TotalRevenue,
			&i.AverageContribution,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const HardDeleteCampaignContribution = `-- name: HardDeleteCampaignContribution :exec
DELETE FROM campaign_contributions WHERE id = $1
`

func (q *Queries) HardDeleteCampaignContribution(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, HardDeleteCampaignContribution, id)
	return err
}

const ListCampaignContributions = `-- name: ListCampaignContributions :many
SELECT id, campaign_id, contribution_id, is_deleted, created_at, updated_at FROM campaign_contributions 
WHERE is_deleted = FALSE 
ORDER BY id DESC
`

func (q *Queries) ListCampaignContributions(ctx context.Context) ([]CampaignContribution, error) {
	rows, err := q.db.QueryContext(ctx, ListCampaignContributions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignContribution{}
	for rows.Next() {
		var i CampaignContribution
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.ContributionID,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCampaignContributionsByAmount = `-- name: ListCampaignContributionsByAmount :many
SELECT cc.id, cc.campaign_id, cc.contribution_id, cc.is_deleted, cc.created_at, cc.updated_at FROM campaign_contributions cc
JOIN contributions co ON cc.contribution_id = co.id
WHERE co.amount >= $1 AND co.amount <= $2 
AND cc.is_deleted = FALSE 
ORDER BY co.amount DESC
`

type ListCampaignContributionsByAmountParams struct {
	Amount   string `json:"amount"`
	Amount_2 string `json:"amount_2"`
}

func (q *Queries) ListCampaignContributionsByAmount(ctx context.Context, arg ListCampaignContributionsByAmountParams) ([]CampaignContribution, error) {
	rows, err := q.db.QueryContext(ctx, ListCampaignContributionsByAmount, arg.Amount, arg.Amount_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignContribution{}
	for rows.Next() {
		var i CampaignContribution
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.ContributionID,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCampaignContributionsByDateRange = `-- name: ListCampaignContributionsByDateRange :many
SELECT cc.id, cc.campaign_id, cc.contribution_id, cc.is_deleted, cc.created_at, cc.updated_at FROM campaign_contributions cc
JOIN contributions co ON cc.contribution_id = co.id
WHERE co.received_date >= $1 AND co.received_date <= $2 
AND cc.is_deleted = FALSE 
ORDER BY co.received_date DESC
`

type ListCampaignContributionsByDateRangeParams struct {
	ReceivedDate   sql.NullTime `json:"received_date"`
	ReceivedDate_2 sql.NullTime `json:"received_date_2"`
}

func (q *Queries) ListCampaignContributionsByDateRange(ctx context.Context, arg ListCampaignContributionsByDateRangeParams) ([]CampaignContribution, error) {
	rows, err := q.db.QueryContext(ctx, ListCampaignContributionsByDateRange, arg.ReceivedDate, arg.ReceivedDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignContribution{}
	for rows.Next() {
		var i CampaignContribution
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.ContributionID,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchCampaignContributions = `-- name: SearchCampaignContributions :many
SELECT cc.id, cc.campaign_id, cc.contribution_id, cc.is_deleted, cc.created_at, cc.updated_at FROM campaign_contributions cc
JOIN contributions co ON cc.contribution_id = co.id
JOIN contacts c ON co.contact_id = c.id
WHERE (c.first_name ILIKE $1 OR c.last_name ILIKE $1 OR c.organization_name ILIKE $1) 
AND cc.is_deleted = FALSE 
ORDER BY co.received_date DESC
`

func (q *Queries) SearchCampaignContributions(ctx context.Context, firstName sql.NullString) ([]CampaignContribution, error) {
	rows, err := q.db.QueryContext(ctx, SearchCampaignContributions, firstName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignContribution{}
	for rows.Next() {
		var i CampaignContribution
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.ContributionID,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateCampaignContribution = `-- name: UpdateCampaignContribution :one
UPDATE campaign_contributions SET
    campaign_id = $2, contribution_id = $3, is_deleted = $4, updated_at = NOW()
WHERE id = $1 RETURNING id, campaign_id, contribution_id, is_deleted, created_at, updated_at
`

type UpdateCampaignContributionParams struct {
	ID             uuid.UUID    `json:"id"`
	CampaignID     uuid.UUID    `json:"campaign_id"`
	ContributionID uuid.UUID    `json:"contribution_id"`
	IsDeleted      sql.NullBool `json:"is_deleted"`
}

func (q *Queries) UpdateCampaignContribution(ctx context.Context, arg UpdateCampaignContributionParams) (CampaignContribution, error) {
	row := q.db.QueryRowContext(ctx, UpdateCampaignContribution,
		arg.ID,
		arg.CampaignID,
		arg.ContributionID,
		arg.IsDeleted,
	)
	var i CampaignContribution
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.ContributionID,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
