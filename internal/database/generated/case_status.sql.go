// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: case_status.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const ActivateCaseStatus = `-- name: ActivateCaseStatus :exec
UPDATE case_status SET is_active = TRUE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) ActivateCaseStatus(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, ActivateCaseStatus, id)
	return err
}

const CreateCaseStatus = `-- name: CreateCaseStatus :one
INSERT INTO case_status (
    name, label, grouping, weight, is_active, is_reserved, color
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, name, label, grouping, weight, is_active, is_reserved, color, created_at, updated_at
`

type CreateCaseStatusParams struct {
	Name       string         `json:"name"`
	Label      string         `json:"label"`
	Grouping   sql.NullString `json:"grouping"`
	Weight     sql.NullInt32  `json:"weight"`
	IsActive   sql.NullBool   `json:"is_active"`
	IsReserved sql.NullBool   `json:"is_reserved"`
	Color      sql.NullString `json:"color"`
}

func (q *Queries) CreateCaseStatus(ctx context.Context, arg CreateCaseStatusParams) (CaseStatus, error) {
	row := q.db.QueryRowContext(ctx, CreateCaseStatus,
		arg.Name,
		arg.Label,
		arg.Grouping,
		arg.Weight,
		arg.IsActive,
		arg.IsReserved,
		arg.Color,
	)
	var i CaseStatus
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Label,
		&i.Grouping,
		&i.Weight,
		&i.IsActive,
		&i.IsReserved,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeactivateCaseStatus = `-- name: DeactivateCaseStatus :exec
UPDATE case_status SET is_active = FALSE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) DeactivateCaseStatus(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeactivateCaseStatus, id)
	return err
}

const DeleteCaseStatus = `-- name: DeleteCaseStatus :exec
DELETE FROM case_status WHERE id = $1
`

func (q *Queries) DeleteCaseStatus(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteCaseStatus, id)
	return err
}

const GetCaseStatus = `-- name: GetCaseStatus :one
SELECT id, name, label, grouping, weight, is_active, is_reserved, color, created_at, updated_at FROM case_status WHERE id = $1
`

func (q *Queries) GetCaseStatus(ctx context.Context, id uuid.UUID) (CaseStatus, error) {
	row := q.db.QueryRowContext(ctx, GetCaseStatus, id)
	var i CaseStatus
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Label,
		&i.Grouping,
		&i.Weight,
		&i.IsActive,
		&i.IsReserved,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCaseStatusByName = `-- name: GetCaseStatusByName :one
SELECT id, name, label, grouping, weight, is_active, is_reserved, color, created_at, updated_at FROM case_status WHERE name = $1
`

func (q *Queries) GetCaseStatusByName(ctx context.Context, name string) (CaseStatus, error) {
	row := q.db.QueryRowContext(ctx, GetCaseStatusByName, name)
	var i CaseStatus
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Label,
		&i.Grouping,
		&i.Weight,
		&i.IsActive,
		&i.IsReserved,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCaseStatusStats = `-- name: GetCaseStatusStats :many
SELECT 
    cs.grouping,
    cs.name as status,
    COUNT(c.id) as case_count
FROM case_status cs
LEFT JOIN cases c ON cs.id = c.status_id AND c.is_deleted = FALSE
WHERE cs.is_active = $1
GROUP BY cs.grouping, cs.name, cs.weight
ORDER BY cs.grouping, cs.weight, cs.name
`

type GetCaseStatusStatsRow struct {
	Grouping  sql.NullString `json:"grouping"`
	Status    string         `json:"status"`
	CaseCount int64          `json:"case_count"`
}

func (q *Queries) GetCaseStatusStats(ctx context.Context, isActive sql.NullBool) ([]GetCaseStatusStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetCaseStatusStats, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCaseStatusStatsRow{}
	for rows.Next() {
		var i GetCaseStatusStatsRow
		if err := rows.Scan(&i.Grouping, &i.Status, &i.CaseCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListActiveCaseStatus = `-- name: ListActiveCaseStatus :many
SELECT id, name, label, grouping, weight, is_active, is_reserved, color, created_at, updated_at FROM case_status 
WHERE is_active = TRUE 
ORDER BY weight, name
`

func (q *Queries) ListActiveCaseStatus(ctx context.Context) ([]CaseStatus, error) {
	rows, err := q.db.QueryContext(ctx, ListActiveCaseStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CaseStatus{}
	for rows.Next() {
		var i CaseStatus
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Grouping,
			&i.Weight,
			&i.IsActive,
			&i.IsReserved,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCaseStatus = `-- name: ListCaseStatus :many
SELECT id, name, label, grouping, weight, is_active, is_reserved, color, created_at, updated_at FROM case_status 
WHERE is_active = $1 
ORDER BY weight, name
`

func (q *Queries) ListCaseStatus(ctx context.Context, isActive sql.NullBool) ([]CaseStatus, error) {
	rows, err := q.db.QueryContext(ctx, ListCaseStatus, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CaseStatus{}
	for rows.Next() {
		var i CaseStatus
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Grouping,
			&i.Weight,
			&i.IsActive,
			&i.IsReserved,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCaseStatusByGrouping = `-- name: ListCaseStatusByGrouping :many
SELECT id, name, label, grouping, weight, is_active, is_reserved, color, created_at, updated_at FROM case_status 
WHERE grouping = $1 AND is_active = $2 
ORDER BY weight, name
`

type ListCaseStatusByGroupingParams struct {
	Grouping sql.NullString `json:"grouping"`
	IsActive sql.NullBool   `json:"is_active"`
}

func (q *Queries) ListCaseStatusByGrouping(ctx context.Context, arg ListCaseStatusByGroupingParams) ([]CaseStatus, error) {
	rows, err := q.db.QueryContext(ctx, ListCaseStatusByGrouping, arg.Grouping, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CaseStatus{}
	for rows.Next() {
		var i CaseStatus
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Grouping,
			&i.Weight,
			&i.IsActive,
			&i.IsReserved,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListClosedCaseStatus = `-- name: ListClosedCaseStatus :many
SELECT id, name, label, grouping, weight, is_active, is_reserved, color, created_at, updated_at FROM case_status 
WHERE grouping = 'Closed' AND is_active = $1 
ORDER BY weight, name
`

func (q *Queries) ListClosedCaseStatus(ctx context.Context, isActive sql.NullBool) ([]CaseStatus, error) {
	rows, err := q.db.QueryContext(ctx, ListClosedCaseStatus, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CaseStatus{}
	for rows.Next() {
		var i CaseStatus
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Grouping,
			&i.Weight,
			&i.IsActive,
			&i.IsReserved,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListOpenCaseStatus = `-- name: ListOpenCaseStatus :many
SELECT id, name, label, grouping, weight, is_active, is_reserved, color, created_at, updated_at FROM case_status 
WHERE grouping = 'Open' AND is_active = $1 
ORDER BY weight, name
`

func (q *Queries) ListOpenCaseStatus(ctx context.Context, isActive sql.NullBool) ([]CaseStatus, error) {
	rows, err := q.db.QueryContext(ctx, ListOpenCaseStatus, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CaseStatus{}
	for rows.Next() {
		var i CaseStatus
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Grouping,
			&i.Weight,
			&i.IsActive,
			&i.IsReserved,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListReservedCaseStatus = `-- name: ListReservedCaseStatus :many
SELECT id, name, label, grouping, weight, is_active, is_reserved, color, created_at, updated_at FROM case_status 
WHERE is_reserved = TRUE AND is_active = $1 
ORDER BY weight, name
`

func (q *Queries) ListReservedCaseStatus(ctx context.Context, isActive sql.NullBool) ([]CaseStatus, error) {
	rows, err := q.db.QueryContext(ctx, ListReservedCaseStatus, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CaseStatus{}
	for rows.Next() {
		var i CaseStatus
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Grouping,
			&i.Weight,
			&i.IsActive,
			&i.IsReserved,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchCaseStatus = `-- name: SearchCaseStatus :many
SELECT id, name, label, grouping, weight, is_active, is_reserved, color, created_at, updated_at FROM case_status 
WHERE (name ILIKE $1 OR label ILIKE $1) 
AND is_active = $2 
ORDER BY weight, name
`

type SearchCaseStatusParams struct {
	Name     string       `json:"name"`
	IsActive sql.NullBool `json:"is_active"`
}

func (q *Queries) SearchCaseStatus(ctx context.Context, arg SearchCaseStatusParams) ([]CaseStatus, error) {
	rows, err := q.db.QueryContext(ctx, SearchCaseStatus, arg.Name, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CaseStatus{}
	for rows.Next() {
		var i CaseStatus
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Grouping,
			&i.Weight,
			&i.IsActive,
			&i.IsReserved,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateCaseStatus = `-- name: UpdateCaseStatus :one
UPDATE case_status SET
    name = $2, label = $3, grouping = $4, weight = $5,
    is_active = $6, is_reserved = $7, color = $8, updated_at = NOW()
WHERE id = $1 RETURNING id, name, label, grouping, weight, is_active, is_reserved, color, created_at, updated_at
`

type UpdateCaseStatusParams struct {
	ID         uuid.UUID      `json:"id"`
	Name       string         `json:"name"`
	Label      string         `json:"label"`
	Grouping   sql.NullString `json:"grouping"`
	Weight     sql.NullInt32  `json:"weight"`
	IsActive   sql.NullBool   `json:"is_active"`
	IsReserved sql.NullBool   `json:"is_reserved"`
	Color      sql.NullString `json:"color"`
}

func (q *Queries) UpdateCaseStatus(ctx context.Context, arg UpdateCaseStatusParams) (CaseStatus, error) {
	row := q.db.QueryRowContext(ctx, UpdateCaseStatus,
		arg.ID,
		arg.Name,
		arg.Label,
		arg.Grouping,
		arg.Weight,
		arg.IsActive,
		arg.IsReserved,
		arg.Color,
	)
	var i CaseStatus
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Label,
		&i.Grouping,
		&i.Weight,
		&i.IsActive,
		&i.IsReserved,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateCaseStatusWeight = `-- name: UpdateCaseStatusWeight :exec
UPDATE case_status SET weight = $2, updated_at = NOW() WHERE id = $1
`

type UpdateCaseStatusWeightParams struct {
	ID     uuid.UUID     `json:"id"`
	Weight sql.NullInt32 `json:"weight"`
}

func (q *Queries) UpdateCaseStatusWeight(ctx context.Context, arg UpdateCaseStatusWeightParams) error {
	_, err := q.db.ExecContext(ctx, UpdateCaseStatusWeight, arg.ID, arg.Weight)
	return err
}
