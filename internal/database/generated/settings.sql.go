// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: settings.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const BulkUpdateSettings = `-- name: BulkUpdateSettings :many
UPDATE settings 
SET 
    value = CASE 
        WHEN name = ANY($3) THEN $4
        WHEN name = ANY($5) THEN $6
        WHEN name = ANY($7) THEN $8
        ELSE value
    END,
    updated_at = NOW()
WHERE domain_id = $1 AND name = ANY($2)
RETURNING id, domain_id, name, value, description, is_system, is_public, created_at, updated_at
`

type BulkUpdateSettingsParams struct {
	DomainID uuid.UUID      `json:"domain_id"`
	Name     string         `json:"name"`
	Name_2   string         `json:"name_2"`
	Value    sql.NullString `json:"value"`
	Name_3   string         `json:"name_3"`
	Value_2  sql.NullString `json:"value_2"`
	Name_4   string         `json:"name_4"`
	Value_3  sql.NullString `json:"value_3"`
}

func (q *Queries) BulkUpdateSettings(ctx context.Context, arg BulkUpdateSettingsParams) ([]Setting, error) {
	rows, err := q.db.QueryContext(ctx, BulkUpdateSettings,
		arg.DomainID,
		arg.Name,
		arg.Name_2,
		arg.Value,
		arg.Name_3,
		arg.Value_2,
		arg.Name_4,
		arg.Value_3,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Setting{}
	for rows.Next() {
		var i Setting
		if err := rows.Scan(
			&i.ID,
			&i.DomainID,
			&i.Name,
			&i.Value,
			&i.Description,
			&i.IsSystem,
			&i.IsPublic,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const CountSettingsByDomain = `-- name: CountSettingsByDomain :one
SELECT COUNT(*) FROM settings WHERE domain_id = $1
`

func (q *Queries) CountSettingsByDomain(ctx context.Context, domainID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountSettingsByDomain, domainID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountSystemSettingsByDomain = `-- name: CountSystemSettingsByDomain :one
SELECT COUNT(*) FROM settings WHERE domain_id = $1 AND is_system = TRUE
`

func (q *Queries) CountSystemSettingsByDomain(ctx context.Context, domainID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountSystemSettingsByDomain, domainID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateSetting = `-- name: CreateSetting :one
INSERT INTO settings (
    domain_id, name, value, description, is_system, is_public
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, domain_id, name, value, description, is_system, is_public, created_at, updated_at
`

type CreateSettingParams struct {
	DomainID    uuid.UUID      `json:"domain_id"`
	Name        string         `json:"name"`
	Value       sql.NullString `json:"value"`
	Description sql.NullString `json:"description"`
	IsSystem    sql.NullBool   `json:"is_system"`
	IsPublic    sql.NullBool   `json:"is_public"`
}

func (q *Queries) CreateSetting(ctx context.Context, arg CreateSettingParams) (Setting, error) {
	row := q.db.QueryRowContext(ctx, CreateSetting,
		arg.DomainID,
		arg.Name,
		arg.Value,
		arg.Description,
		arg.IsSystem,
		arg.IsPublic,
	)
	var i Setting
	err := row.Scan(
		&i.ID,
		&i.DomainID,
		&i.Name,
		&i.Value,
		&i.Description,
		&i.IsSystem,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteSetting = `-- name: DeleteSetting :exec
DELETE FROM settings WHERE domain_id = $1 AND name = $2
`

type DeleteSettingParams struct {
	DomainID uuid.UUID `json:"domain_id"`
	Name     string    `json:"name"`
}

func (q *Queries) DeleteSetting(ctx context.Context, arg DeleteSettingParams) error {
	_, err := q.db.ExecContext(ctx, DeleteSetting, arg.DomainID, arg.Name)
	return err
}

const DeleteSettingsByDomain = `-- name: DeleteSettingsByDomain :exec
DELETE FROM settings WHERE domain_id = $1
`

func (q *Queries) DeleteSettingsByDomain(ctx context.Context, domainID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteSettingsByDomain, domainID)
	return err
}

const GetPublicSettingsByDomain = `-- name: GetPublicSettingsByDomain :many
SELECT id, domain_id, name, value, description, is_system, is_public, created_at, updated_at FROM settings 
WHERE domain_id = $1 AND is_public = TRUE 
ORDER BY name ASC
`

func (q *Queries) GetPublicSettingsByDomain(ctx context.Context, domainID uuid.UUID) ([]Setting, error) {
	rows, err := q.db.QueryContext(ctx, GetPublicSettingsByDomain, domainID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Setting{}
	for rows.Next() {
		var i Setting
		if err := rows.Scan(
			&i.ID,
			&i.DomainID,
			&i.Name,
			&i.Value,
			&i.Description,
			&i.IsSystem,
			&i.IsPublic,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetSetting = `-- name: GetSetting :one
SELECT id, domain_id, name, value, description, is_system, is_public, created_at, updated_at FROM settings WHERE id = $1
`

func (q *Queries) GetSetting(ctx context.Context, id uuid.UUID) (Setting, error) {
	row := q.db.QueryRowContext(ctx, GetSetting, id)
	var i Setting
	err := row.Scan(
		&i.ID,
		&i.DomainID,
		&i.Name,
		&i.Value,
		&i.Description,
		&i.IsSystem,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetSettingByName = `-- name: GetSettingByName :one
SELECT id, domain_id, name, value, description, is_system, is_public, created_at, updated_at FROM settings WHERE domain_id = $1 AND name = $2
`

type GetSettingByNameParams struct {
	DomainID uuid.UUID `json:"domain_id"`
	Name     string    `json:"name"`
}

func (q *Queries) GetSettingByName(ctx context.Context, arg GetSettingByNameParams) (Setting, error) {
	row := q.db.QueryRowContext(ctx, GetSettingByName, arg.DomainID, arg.Name)
	var i Setting
	err := row.Scan(
		&i.ID,
		&i.DomainID,
		&i.Name,
		&i.Value,
		&i.Description,
		&i.IsSystem,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetSettingValue = `-- name: GetSettingValue :one
SELECT value FROM settings WHERE domain_id = $1 AND name = $2
`

type GetSettingValueParams struct {
	DomainID uuid.UUID `json:"domain_id"`
	Name     string    `json:"name"`
}

func (q *Queries) GetSettingValue(ctx context.Context, arg GetSettingValueParams) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, GetSettingValue, arg.DomainID, arg.Name)
	var value sql.NullString
	err := row.Scan(&value)
	return value, err
}

const GetSettingsByDomain = `-- name: GetSettingsByDomain :many
SELECT id, domain_id, name, value, description, is_system, is_public, created_at, updated_at FROM settings 
WHERE domain_id = $1 
ORDER BY name ASC
`

func (q *Queries) GetSettingsByDomain(ctx context.Context, domainID uuid.UUID) ([]Setting, error) {
	rows, err := q.db.QueryContext(ctx, GetSettingsByDomain, domainID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Setting{}
	for rows.Next() {
		var i Setting
		if err := rows.Scan(
			&i.ID,
			&i.DomainID,
			&i.Name,
			&i.Value,
			&i.Description,
			&i.IsSystem,
			&i.IsPublic,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetSettingsByPrefix = `-- name: GetSettingsByPrefix :many
SELECT id, domain_id, name, value, description, is_system, is_public, created_at, updated_at FROM settings 
WHERE domain_id = $1 AND name LIKE $2 || '%'
ORDER BY name ASC
`

type GetSettingsByPrefixParams struct {
	DomainID uuid.UUID      `json:"domain_id"`
	Column2  sql.NullString `json:"column_2"`
}

func (q *Queries) GetSettingsByPrefix(ctx context.Context, arg GetSettingsByPrefixParams) ([]Setting, error) {
	rows, err := q.db.QueryContext(ctx, GetSettingsByPrefix, arg.DomainID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Setting{}
	for rows.Next() {
		var i Setting
		if err := rows.Scan(
			&i.ID,
			&i.DomainID,
			&i.Name,
			&i.Value,
			&i.Description,
			&i.IsSystem,
			&i.IsPublic,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetSystemSettingsByDomain = `-- name: GetSystemSettingsByDomain :many
SELECT id, domain_id, name, value, description, is_system, is_public, created_at, updated_at FROM settings 
WHERE domain_id = $1 AND is_system = TRUE 
ORDER BY name ASC
`

func (q *Queries) GetSystemSettingsByDomain(ctx context.Context, domainID uuid.UUID) ([]Setting, error) {
	rows, err := q.db.QueryContext(ctx, GetSystemSettingsByDomain, domainID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Setting{}
	for rows.Next() {
		var i Setting
		if err := rows.Scan(
			&i.ID,
			&i.DomainID,
			&i.Name,
			&i.Value,
			&i.Description,
			&i.IsSystem,
			&i.IsPublic,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListAllSettings = `-- name: ListAllSettings :many
SELECT s.id, s.domain_id, s.name, s.value, s.description, s.is_system, s.is_public, s.created_at, s.updated_at, d.name as domain_name FROM settings s
INNER JOIN domains d ON s.domain_id = d.id
ORDER BY d.name ASC, s.name ASC
`

type ListAllSettingsRow struct {
	ID          uuid.UUID      `json:"id"`
	DomainID    uuid.UUID      `json:"domain_id"`
	Name        string         `json:"name"`
	Value       sql.NullString `json:"value"`
	Description sql.NullString `json:"description"`
	IsSystem    sql.NullBool   `json:"is_system"`
	IsPublic    sql.NullBool   `json:"is_public"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
	DomainName  string         `json:"domain_name"`
}

func (q *Queries) ListAllSettings(ctx context.Context) ([]ListAllSettingsRow, error) {
	rows, err := q.db.QueryContext(ctx, ListAllSettings)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAllSettingsRow{}
	for rows.Next() {
		var i ListAllSettingsRow
		if err := rows.Scan(
			&i.ID,
			&i.DomainID,
			&i.Name,
			&i.Value,
			&i.Description,
			&i.IsSystem,
			&i.IsPublic,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DomainName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchSettings = `-- name: SearchSettings :many
SELECT s.id, s.domain_id, s.name, s.value, s.description, s.is_system, s.is_public, s.created_at, s.updated_at, d.name as domain_name FROM settings s
INNER JOIN domains d ON s.domain_id = d.id
WHERE s.name ILIKE $1 OR s.description ILIKE $1
ORDER BY d.name ASC, s.name ASC
LIMIT $2 OFFSET $3
`

type SearchSettingsParams struct {
	Name   string `json:"name"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type SearchSettingsRow struct {
	ID          uuid.UUID      `json:"id"`
	DomainID    uuid.UUID      `json:"domain_id"`
	Name        string         `json:"name"`
	Value       sql.NullString `json:"value"`
	Description sql.NullString `json:"description"`
	IsSystem    sql.NullBool   `json:"is_system"`
	IsPublic    sql.NullBool   `json:"is_public"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
	DomainName  string         `json:"domain_name"`
}

func (q *Queries) SearchSettings(ctx context.Context, arg SearchSettingsParams) ([]SearchSettingsRow, error) {
	rows, err := q.db.QueryContext(ctx, SearchSettings, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchSettingsRow{}
	for rows.Next() {
		var i SearchSettingsRow
		if err := rows.Scan(
			&i.ID,
			&i.DomainID,
			&i.Name,
			&i.Value,
			&i.Description,
			&i.IsSystem,
			&i.IsPublic,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DomainName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateSetting = `-- name: UpdateSetting :one
UPDATE settings 
SET 
    value = $3,
    description = $4,
    is_system = $5,
    is_public = $6,
    updated_at = NOW()
WHERE domain_id = $1 AND name = $2 
RETURNING id, domain_id, name, value, description, is_system, is_public, created_at, updated_at
`

type UpdateSettingParams struct {
	DomainID    uuid.UUID      `json:"domain_id"`
	Name        string         `json:"name"`
	Value       sql.NullString `json:"value"`
	Description sql.NullString `json:"description"`
	IsSystem    sql.NullBool   `json:"is_system"`
	IsPublic    sql.NullBool   `json:"is_public"`
}

func (q *Queries) UpdateSetting(ctx context.Context, arg UpdateSettingParams) (Setting, error) {
	row := q.db.QueryRowContext(ctx, UpdateSetting,
		arg.DomainID,
		arg.Name,
		arg.Value,
		arg.Description,
		arg.IsSystem,
		arg.IsPublic,
	)
	var i Setting
	err := row.Scan(
		&i.ID,
		&i.DomainID,
		&i.Name,
		&i.Value,
		&i.Description,
		&i.IsSystem,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateSettingValue = `-- name: UpdateSettingValue :one
UPDATE settings 
SET 
    value = $3,
    updated_at = NOW()
WHERE domain_id = $1 AND name = $2 
RETURNING id, domain_id, name, value, description, is_system, is_public, created_at, updated_at
`

type UpdateSettingValueParams struct {
	DomainID uuid.UUID      `json:"domain_id"`
	Name     string         `json:"name"`
	Value    sql.NullString `json:"value"`
}

func (q *Queries) UpdateSettingValue(ctx context.Context, arg UpdateSettingValueParams) (Setting, error) {
	row := q.db.QueryRowContext(ctx, UpdateSettingValue, arg.DomainID, arg.Name, arg.Value)
	var i Setting
	err := row.Scan(
		&i.ID,
		&i.DomainID,
		&i.Name,
		&i.Value,
		&i.Description,
		&i.IsSystem,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
