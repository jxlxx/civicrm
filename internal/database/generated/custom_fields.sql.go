// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: custom_fields.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const CountCustomFieldsByGroup = `-- name: CountCustomFieldsByGroup :one
SELECT COUNT(*) FROM custom_fields 
WHERE custom_group_id = $1 AND is_active = $2
`

type CountCustomFieldsByGroupParams struct {
	CustomGroupID uuid.UUID    `json:"custom_group_id"`
	IsActive      sql.NullBool `json:"is_active"`
}

func (q *Queries) CountCustomFieldsByGroup(ctx context.Context, arg CountCustomFieldsByGroupParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountCustomFieldsByGroup, arg.CustomGroupID, arg.IsActive)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountCustomValuesByEntity = `-- name: CountCustomValuesByEntity :one
SELECT COUNT(*) FROM custom_values 
WHERE entity_table = $1 AND entity_id = $2
`

type CountCustomValuesByEntityParams struct {
	EntityTable string    `json:"entity_table"`
	EntityID    uuid.UUID `json:"entity_id"`
}

func (q *Queries) CountCustomValuesByEntity(ctx context.Context, arg CountCustomValuesByEntityParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountCustomValuesByEntity, arg.EntityTable, arg.EntityID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateCustomField = `-- name: CreateCustomField :one
INSERT INTO custom_fields (
    custom_group_id, name, label, data_type, html_type, is_required,
    is_searchable, is_search_range, is_view, is_active, weight,
    help_pre, help_post, default_value, text_length, start_date_years,
    end_date_years, date_format, time_format, option_group_id, filter, in_selector
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22
) RETURNING id, custom_group_id, name, label, data_type, html_type, is_required, is_searchable, is_search_range, is_view, is_active, weight, help_pre, help_post, default_value, text_length, start_date_years, end_date_years, date_format, time_format, option_group_id, filter, in_selector, created_at, updated_at
`

type CreateCustomFieldParams struct {
	CustomGroupID  uuid.UUID      `json:"custom_group_id"`
	Name           string         `json:"name"`
	Label          string         `json:"label"`
	DataType       string         `json:"data_type"`
	HtmlType       string         `json:"html_type"`
	IsRequired     sql.NullBool   `json:"is_required"`
	IsSearchable   sql.NullBool   `json:"is_searchable"`
	IsSearchRange  sql.NullBool   `json:"is_search_range"`
	IsView         sql.NullBool   `json:"is_view"`
	IsActive       sql.NullBool   `json:"is_active"`
	Weight         sql.NullInt32  `json:"weight"`
	HelpPre        sql.NullString `json:"help_pre"`
	HelpPost       sql.NullString `json:"help_post"`
	DefaultValue   sql.NullString `json:"default_value"`
	TextLength     sql.NullInt32  `json:"text_length"`
	StartDateYears sql.NullInt32  `json:"start_date_years"`
	EndDateYears   sql.NullInt32  `json:"end_date_years"`
	DateFormat     sql.NullString `json:"date_format"`
	TimeFormat     sql.NullString `json:"time_format"`
	OptionGroupID  uuid.NullUUID  `json:"option_group_id"`
	Filter         sql.NullString `json:"filter"`
	InSelector     sql.NullBool   `json:"in_selector"`
}

// Custom Fields CRUD operations
func (q *Queries) CreateCustomField(ctx context.Context, arg CreateCustomFieldParams) (CustomField, error) {
	row := q.db.QueryRowContext(ctx, CreateCustomField,
		arg.CustomGroupID,
		arg.Name,
		arg.Label,
		arg.DataType,
		arg.HtmlType,
		arg.IsRequired,
		arg.IsSearchable,
		arg.IsSearchRange,
		arg.IsView,
		arg.IsActive,
		arg.Weight,
		arg.HelpPre,
		arg.HelpPost,
		arg.DefaultValue,
		arg.TextLength,
		arg.StartDateYears,
		arg.EndDateYears,
		arg.DateFormat,
		arg.TimeFormat,
		arg.OptionGroupID,
		arg.Filter,
		arg.InSelector,
	)
	var i CustomField
	err := row.Scan(
		&i.ID,
		&i.CustomGroupID,
		&i.Name,
		&i.Label,
		&i.DataType,
		&i.HtmlType,
		&i.IsRequired,
		&i.IsSearchable,
		&i.IsSearchRange,
		&i.IsView,
		&i.IsActive,
		&i.Weight,
		&i.HelpPre,
		&i.HelpPost,
		&i.DefaultValue,
		&i.TextLength,
		&i.StartDateYears,
		&i.EndDateYears,
		&i.DateFormat,
		&i.TimeFormat,
		&i.OptionGroupID,
		&i.Filter,
		&i.InSelector,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const CreateCustomFieldOption = `-- name: CreateCustomFieldOption :one
INSERT INTO custom_field_options (
    custom_field_id, label, value, weight, is_active
) VALUES ($1, $2, $3, $4, $5) RETURNING id, custom_field_id, label, value, weight, is_active, created_at
`

type CreateCustomFieldOptionParams struct {
	CustomFieldID uuid.UUID     `json:"custom_field_id"`
	Label         string        `json:"label"`
	Value         string        `json:"value"`
	Weight        sql.NullInt32 `json:"weight"`
	IsActive      sql.NullBool  `json:"is_active"`
}

// Custom Field Options CRUD operations
func (q *Queries) CreateCustomFieldOption(ctx context.Context, arg CreateCustomFieldOptionParams) (CustomFieldOption, error) {
	row := q.db.QueryRowContext(ctx, CreateCustomFieldOption,
		arg.CustomFieldID,
		arg.Label,
		arg.Value,
		arg.Weight,
		arg.IsActive,
	)
	var i CustomFieldOption
	err := row.Scan(
		&i.ID,
		&i.CustomFieldID,
		&i.Label,
		&i.Value,
		&i.Weight,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const CreateCustomGroup = `-- name: CreateCustomGroup :one

INSERT INTO custom_groups (
    name, title, extends, table_name, is_active, is_multiple, 
    collapse_display, help_pre, help_post, weight
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id, name, title, extends, table_name, is_active, is_multiple, collapse_display, help_pre, help_post, weight, created_at, updated_at
`

type CreateCustomGroupParams struct {
	Name            string         `json:"name"`
	Title           string         `json:"title"`
	Extends         string         `json:"extends"`
	TableName       sql.NullString `json:"table_name"`
	IsActive        sql.NullBool   `json:"is_active"`
	IsMultiple      sql.NullBool   `json:"is_multiple"`
	CollapseDisplay sql.NullBool   `json:"collapse_display"`
	HelpPre         sql.NullString `json:"help_pre"`
	HelpPost        sql.NullString `json:"help_post"`
	Weight          sql.NullInt32  `json:"weight"`
}

// Custom Fields Queries
// Provides CRUD operations and specialized queries for the custom fields system
// Custom Groups CRUD operations
func (q *Queries) CreateCustomGroup(ctx context.Context, arg CreateCustomGroupParams) (CustomGroup, error) {
	row := q.db.QueryRowContext(ctx, CreateCustomGroup,
		arg.Name,
		arg.Title,
		arg.Extends,
		arg.TableName,
		arg.IsActive,
		arg.IsMultiple,
		arg.CollapseDisplay,
		arg.HelpPre,
		arg.HelpPost,
		arg.Weight,
	)
	var i CustomGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Extends,
		&i.TableName,
		&i.IsActive,
		&i.IsMultiple,
		&i.CollapseDisplay,
		&i.HelpPre,
		&i.HelpPost,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const CreateCustomValue = `-- name: CreateCustomValue :one
INSERT INTO custom_values (
    custom_field_id, entity_table, entity_id, value_text, value_int,
    value_float, value_date, value_boolean, value_link
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, custom_field_id, entity_table, entity_id, value_text, value_int, value_float, value_date, value_boolean, value_link, created_at, updated_at
`

type CreateCustomValueParams struct {
	CustomFieldID uuid.UUID      `json:"custom_field_id"`
	EntityTable   string         `json:"entity_table"`
	EntityID      uuid.UUID      `json:"entity_id"`
	ValueText     sql.NullString `json:"value_text"`
	ValueInt      sql.NullInt32  `json:"value_int"`
	ValueFloat    sql.NullString `json:"value_float"`
	ValueDate     sql.NullTime   `json:"value_date"`
	ValueBoolean  sql.NullBool   `json:"value_boolean"`
	ValueLink     sql.NullString `json:"value_link"`
}

// Custom Values CRUD operations
func (q *Queries) CreateCustomValue(ctx context.Context, arg CreateCustomValueParams) (CustomValue, error) {
	row := q.db.QueryRowContext(ctx, CreateCustomValue,
		arg.CustomFieldID,
		arg.EntityTable,
		arg.EntityID,
		arg.ValueText,
		arg.ValueInt,
		arg.ValueFloat,
		arg.ValueDate,
		arg.ValueBoolean,
		arg.ValueLink,
	)
	var i CustomValue
	err := row.Scan(
		&i.ID,
		&i.CustomFieldID,
		&i.EntityTable,
		&i.EntityID,
		&i.ValueText,
		&i.ValueInt,
		&i.ValueFloat,
		&i.ValueDate,
		&i.ValueBoolean,
		&i.ValueLink,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteCustomField = `-- name: DeleteCustomField :exec
DELETE FROM custom_fields WHERE id = $1
`

func (q *Queries) DeleteCustomField(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteCustomField, id)
	return err
}

const DeleteCustomFieldOption = `-- name: DeleteCustomFieldOption :exec
DELETE FROM custom_field_options WHERE id = $1
`

func (q *Queries) DeleteCustomFieldOption(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteCustomFieldOption, id)
	return err
}

const DeleteCustomGroup = `-- name: DeleteCustomGroup :exec
DELETE FROM custom_groups WHERE id = $1
`

func (q *Queries) DeleteCustomGroup(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteCustomGroup, id)
	return err
}

const DeleteCustomValue = `-- name: DeleteCustomValue :exec
DELETE FROM custom_values WHERE id = $1
`

func (q *Queries) DeleteCustomValue(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteCustomValue, id)
	return err
}

const DeleteCustomValuesByEntity = `-- name: DeleteCustomValuesByEntity :exec
DELETE FROM custom_values WHERE entity_table = $1 AND entity_id = $2
`

type DeleteCustomValuesByEntityParams struct {
	EntityTable string    `json:"entity_table"`
	EntityID    uuid.UUID `json:"entity_id"`
}

func (q *Queries) DeleteCustomValuesByEntity(ctx context.Context, arg DeleteCustomValuesByEntityParams) error {
	_, err := q.db.ExecContext(ctx, DeleteCustomValuesByEntity, arg.EntityTable, arg.EntityID)
	return err
}

const GetCustomField = `-- name: GetCustomField :one
SELECT id, custom_group_id, name, label, data_type, html_type, is_required, is_searchable, is_search_range, is_view, is_active, weight, help_pre, help_post, default_value, text_length, start_date_years, end_date_years, date_format, time_format, option_group_id, filter, in_selector, created_at, updated_at FROM custom_fields WHERE id = $1
`

func (q *Queries) GetCustomField(ctx context.Context, id uuid.UUID) (CustomField, error) {
	row := q.db.QueryRowContext(ctx, GetCustomField, id)
	var i CustomField
	err := row.Scan(
		&i.ID,
		&i.CustomGroupID,
		&i.Name,
		&i.Label,
		&i.DataType,
		&i.HtmlType,
		&i.IsRequired,
		&i.IsSearchable,
		&i.IsSearchRange,
		&i.IsView,
		&i.IsActive,
		&i.Weight,
		&i.HelpPre,
		&i.HelpPost,
		&i.DefaultValue,
		&i.TextLength,
		&i.StartDateYears,
		&i.EndDateYears,
		&i.DateFormat,
		&i.TimeFormat,
		&i.OptionGroupID,
		&i.Filter,
		&i.InSelector,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCustomFieldByName = `-- name: GetCustomFieldByName :one
SELECT cf.id, cf.custom_group_id, cf.name, cf.label, cf.data_type, cf.html_type, cf.is_required, cf.is_searchable, cf.is_search_range, cf.is_view, cf.is_active, cf.weight, cf.help_pre, cf.help_post, cf.default_value, cf.text_length, cf.start_date_years, cf.end_date_years, cf.date_format, cf.time_format, cf.option_group_id, cf.filter, cf.in_selector, cf.created_at, cf.updated_at FROM custom_fields cf
INNER JOIN custom_groups cg ON cf.custom_group_id = cg.id
WHERE cg.name = $1 AND cf.name = $2
`

type GetCustomFieldByNameParams struct {
	Name   string `json:"name"`
	Name_2 string `json:"name_2"`
}

func (q *Queries) GetCustomFieldByName(ctx context.Context, arg GetCustomFieldByNameParams) (CustomField, error) {
	row := q.db.QueryRowContext(ctx, GetCustomFieldByName, arg.Name, arg.Name_2)
	var i CustomField
	err := row.Scan(
		&i.ID,
		&i.CustomGroupID,
		&i.Name,
		&i.Label,
		&i.DataType,
		&i.HtmlType,
		&i.IsRequired,
		&i.IsSearchable,
		&i.IsSearchRange,
		&i.IsView,
		&i.IsActive,
		&i.Weight,
		&i.HelpPre,
		&i.HelpPost,
		&i.DefaultValue,
		&i.TextLength,
		&i.StartDateYears,
		&i.EndDateYears,
		&i.DateFormat,
		&i.TimeFormat,
		&i.OptionGroupID,
		&i.Filter,
		&i.InSelector,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCustomFieldOption = `-- name: GetCustomFieldOption :one
SELECT id, custom_field_id, label, value, weight, is_active, created_at FROM custom_field_options WHERE id = $1
`

func (q *Queries) GetCustomFieldOption(ctx context.Context, id uuid.UUID) (CustomFieldOption, error) {
	row := q.db.QueryRowContext(ctx, GetCustomFieldOption, id)
	var i CustomFieldOption
	err := row.Scan(
		&i.ID,
		&i.CustomFieldID,
		&i.Label,
		&i.Value,
		&i.Weight,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const GetCustomFieldsForActivity = `-- name: GetCustomFieldsForActivity :many
SELECT cf.id, cf.custom_group_id, cf.name, cf.label, cf.data_type, cf.html_type, cf.is_required, cf.is_searchable, cf.is_search_range, cf.is_view, cf.is_active, cf.weight, cf.help_pre, cf.help_post, cf.default_value, cf.text_length, cf.start_date_years, cf.end_date_years, cf.date_format, cf.time_format, cf.option_group_id, cf.filter, cf.in_selector, cf.created_at, cf.updated_at, cg.title as group_title, cg.help_pre as group_help_pre, cg.help_post as group_help_post
FROM custom_fields cf
INNER JOIN custom_groups cg ON cf.custom_group_id = cg.id
WHERE cg.extends = 'Activity' AND cf.is_active = $1 AND cg.is_active = $2
ORDER BY cg.weight, cg.title, cf.weight, cf.label
`

type GetCustomFieldsForActivityParams struct {
	IsActive   sql.NullBool `json:"is_active"`
	IsActive_2 sql.NullBool `json:"is_active_2"`
}

type GetCustomFieldsForActivityRow struct {
	ID             uuid.UUID      `json:"id"`
	CustomGroupID  uuid.UUID      `json:"custom_group_id"`
	Name           string         `json:"name"`
	Label          string         `json:"label"`
	DataType       string         `json:"data_type"`
	HtmlType       string         `json:"html_type"`
	IsRequired     sql.NullBool   `json:"is_required"`
	IsSearchable   sql.NullBool   `json:"is_searchable"`
	IsSearchRange  sql.NullBool   `json:"is_search_range"`
	IsView         sql.NullBool   `json:"is_view"`
	IsActive       sql.NullBool   `json:"is_active"`
	Weight         sql.NullInt32  `json:"weight"`
	HelpPre        sql.NullString `json:"help_pre"`
	HelpPost       sql.NullString `json:"help_post"`
	DefaultValue   sql.NullString `json:"default_value"`
	TextLength     sql.NullInt32  `json:"text_length"`
	StartDateYears sql.NullInt32  `json:"start_date_years"`
	EndDateYears   sql.NullInt32  `json:"end_date_years"`
	DateFormat     sql.NullString `json:"date_format"`
	TimeFormat     sql.NullString `json:"time_format"`
	OptionGroupID  uuid.NullUUID  `json:"option_group_id"`
	Filter         sql.NullString `json:"filter"`
	InSelector     sql.NullBool   `json:"in_selector"`
	CreatedAt      sql.NullTime   `json:"created_at"`
	UpdatedAt      sql.NullTime   `json:"updated_at"`
	GroupTitle     string         `json:"group_title"`
	GroupHelpPre   sql.NullString `json:"group_help_pre"`
	GroupHelpPost  sql.NullString `json:"group_help_post"`
}

func (q *Queries) GetCustomFieldsForActivity(ctx context.Context, arg GetCustomFieldsForActivityParams) ([]GetCustomFieldsForActivityRow, error) {
	rows, err := q.db.QueryContext(ctx, GetCustomFieldsForActivity, arg.IsActive, arg.IsActive_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCustomFieldsForActivityRow{}
	for rows.Next() {
		var i GetCustomFieldsForActivityRow
		if err := rows.Scan(
			&i.ID,
			&i.CustomGroupID,
			&i.Name,
			&i.Label,
			&i.DataType,
			&i.HtmlType,
			&i.IsRequired,
			&i.IsSearchable,
			&i.IsSearchRange,
			&i.IsView,
			&i.IsActive,
			&i.Weight,
			&i.HelpPre,
			&i.HelpPost,
			&i.DefaultValue,
			&i.TextLength,
			&i.StartDateYears,
			&i.EndDateYears,
			&i.DateFormat,
			&i.TimeFormat,
			&i.OptionGroupID,
			&i.Filter,
			&i.InSelector,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GroupTitle,
			&i.GroupHelpPre,
			&i.GroupHelpPost,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCustomFieldsForContact = `-- name: GetCustomFieldsForContact :many
SELECT cf.id, cf.custom_group_id, cf.name, cf.label, cf.data_type, cf.html_type, cf.is_required, cf.is_searchable, cf.is_search_range, cf.is_view, cf.is_active, cf.weight, cf.help_pre, cf.help_post, cf.default_value, cf.text_length, cf.start_date_years, cf.end_date_years, cf.date_format, cf.time_format, cf.option_group_id, cf.filter, cf.in_selector, cf.created_at, cf.updated_at, cg.title as group_title, cg.help_pre as group_help_pre, cg.help_post as group_help_post
FROM custom_fields cf
INNER JOIN custom_groups cg ON cf.custom_group_id = cg.id
WHERE cg.extends = 'Contact' AND cf.is_active = $1 AND cg.is_active = $2
ORDER BY cg.weight, cg.title, cf.weight, cf.label
`

type GetCustomFieldsForContactParams struct {
	IsActive   sql.NullBool `json:"is_active"`
	IsActive_2 sql.NullBool `json:"is_active_2"`
}

type GetCustomFieldsForContactRow struct {
	ID             uuid.UUID      `json:"id"`
	CustomGroupID  uuid.UUID      `json:"custom_group_id"`
	Name           string         `json:"name"`
	Label          string         `json:"label"`
	DataType       string         `json:"data_type"`
	HtmlType       string         `json:"html_type"`
	IsRequired     sql.NullBool   `json:"is_required"`
	IsSearchable   sql.NullBool   `json:"is_searchable"`
	IsSearchRange  sql.NullBool   `json:"is_search_range"`
	IsView         sql.NullBool   `json:"is_view"`
	IsActive       sql.NullBool   `json:"is_active"`
	Weight         sql.NullInt32  `json:"weight"`
	HelpPre        sql.NullString `json:"help_pre"`
	HelpPost       sql.NullString `json:"help_post"`
	DefaultValue   sql.NullString `json:"default_value"`
	TextLength     sql.NullInt32  `json:"text_length"`
	StartDateYears sql.NullInt32  `json:"start_date_years"`
	EndDateYears   sql.NullInt32  `json:"end_date_years"`
	DateFormat     sql.NullString `json:"date_format"`
	TimeFormat     sql.NullString `json:"time_format"`
	OptionGroupID  uuid.NullUUID  `json:"option_group_id"`
	Filter         sql.NullString `json:"filter"`
	InSelector     sql.NullBool   `json:"in_selector"`
	CreatedAt      sql.NullTime   `json:"created_at"`
	UpdatedAt      sql.NullTime   `json:"updated_at"`
	GroupTitle     string         `json:"group_title"`
	GroupHelpPre   sql.NullString `json:"group_help_pre"`
	GroupHelpPost  sql.NullString `json:"group_help_post"`
}

// Specialized queries for custom fields
func (q *Queries) GetCustomFieldsForContact(ctx context.Context, arg GetCustomFieldsForContactParams) ([]GetCustomFieldsForContactRow, error) {
	rows, err := q.db.QueryContext(ctx, GetCustomFieldsForContact, arg.IsActive, arg.IsActive_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCustomFieldsForContactRow{}
	for rows.Next() {
		var i GetCustomFieldsForContactRow
		if err := rows.Scan(
			&i.ID,
			&i.CustomGroupID,
			&i.Name,
			&i.Label,
			&i.DataType,
			&i.HtmlType,
			&i.IsRequired,
			&i.IsSearchable,
			&i.IsSearchRange,
			&i.IsView,
			&i.IsActive,
			&i.Weight,
			&i.HelpPre,
			&i.HelpPost,
			&i.DefaultValue,
			&i.TextLength,
			&i.StartDateYears,
			&i.EndDateYears,
			&i.DateFormat,
			&i.TimeFormat,
			&i.OptionGroupID,
			&i.Filter,
			&i.InSelector,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GroupTitle,
			&i.GroupHelpPre,
			&i.GroupHelpPost,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCustomFieldsForContribution = `-- name: GetCustomFieldsForContribution :many
SELECT cf.id, cf.custom_group_id, cf.name, cf.label, cf.data_type, cf.html_type, cf.is_required, cf.is_searchable, cf.is_search_range, cf.is_view, cf.is_active, cf.weight, cf.help_pre, cf.help_post, cf.default_value, cf.text_length, cf.start_date_years, cf.end_date_years, cf.date_format, cf.time_format, cf.option_group_id, cf.filter, cf.in_selector, cf.created_at, cf.updated_at, cg.title as group_title, cg.help_pre as group_help_pre, cg.help_post as group_help_post
FROM custom_fields cf
INNER JOIN custom_groups cg ON cf.custom_group_id = cg.id
WHERE cg.extends = 'Contribution' AND cf.is_active = $1 AND cg.is_active = $2
ORDER BY cg.weight, cg.title, cf.weight, cf.label
`

type GetCustomFieldsForContributionParams struct {
	IsActive   sql.NullBool `json:"is_active"`
	IsActive_2 sql.NullBool `json:"is_active_2"`
}

type GetCustomFieldsForContributionRow struct {
	ID             uuid.UUID      `json:"id"`
	CustomGroupID  uuid.UUID      `json:"custom_group_id"`
	Name           string         `json:"name"`
	Label          string         `json:"label"`
	DataType       string         `json:"data_type"`
	HtmlType       string         `json:"html_type"`
	IsRequired     sql.NullBool   `json:"is_required"`
	IsSearchable   sql.NullBool   `json:"is_searchable"`
	IsSearchRange  sql.NullBool   `json:"is_search_range"`
	IsView         sql.NullBool   `json:"is_view"`
	IsActive       sql.NullBool   `json:"is_active"`
	Weight         sql.NullInt32  `json:"weight"`
	HelpPre        sql.NullString `json:"help_pre"`
	HelpPost       sql.NullString `json:"help_post"`
	DefaultValue   sql.NullString `json:"default_value"`
	TextLength     sql.NullInt32  `json:"text_length"`
	StartDateYears sql.NullInt32  `json:"start_date_years"`
	EndDateYears   sql.NullInt32  `json:"end_date_years"`
	DateFormat     sql.NullString `json:"date_format"`
	TimeFormat     sql.NullString `json:"time_format"`
	OptionGroupID  uuid.NullUUID  `json:"option_group_id"`
	Filter         sql.NullString `json:"filter"`
	InSelector     sql.NullBool   `json:"in_selector"`
	CreatedAt      sql.NullTime   `json:"created_at"`
	UpdatedAt      sql.NullTime   `json:"updated_at"`
	GroupTitle     string         `json:"group_title"`
	GroupHelpPre   sql.NullString `json:"group_help_pre"`
	GroupHelpPost  sql.NullString `json:"group_help_post"`
}

func (q *Queries) GetCustomFieldsForContribution(ctx context.Context, arg GetCustomFieldsForContributionParams) ([]GetCustomFieldsForContributionRow, error) {
	rows, err := q.db.QueryContext(ctx, GetCustomFieldsForContribution, arg.IsActive, arg.IsActive_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCustomFieldsForContributionRow{}
	for rows.Next() {
		var i GetCustomFieldsForContributionRow
		if err := rows.Scan(
			&i.ID,
			&i.CustomGroupID,
			&i.Name,
			&i.Label,
			&i.DataType,
			&i.HtmlType,
			&i.IsRequired,
			&i.IsSearchable,
			&i.IsSearchRange,
			&i.IsView,
			&i.IsActive,
			&i.Weight,
			&i.HelpPre,
			&i.HelpPost,
			&i.DefaultValue,
			&i.TextLength,
			&i.StartDateYears,
			&i.EndDateYears,
			&i.DateFormat,
			&i.TimeFormat,
			&i.OptionGroupID,
			&i.Filter,
			&i.InSelector,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GroupTitle,
			&i.GroupHelpPre,
			&i.GroupHelpPost,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCustomFieldsForEvent = `-- name: GetCustomFieldsForEvent :many
SELECT cf.id, cf.custom_group_id, cf.name, cf.label, cf.data_type, cf.html_type, cf.is_required, cf.is_searchable, cf.is_search_range, cf.is_view, cf.is_active, cf.weight, cf.help_pre, cf.help_post, cf.default_value, cf.text_length, cf.start_date_years, cf.end_date_years, cf.date_format, cf.time_format, cf.option_group_id, cf.filter, cf.in_selector, cf.created_at, cf.updated_at, cg.title as group_title, cg.help_pre as group_help_pre, cg.help_post as group_help_post
FROM custom_fields cf
INNER JOIN custom_groups cg ON cf.custom_group_id = cg.id
WHERE cg.extends = 'Event' AND cf.is_active = $1 AND cg.is_active = $2
ORDER BY cg.weight, cg.title, cf.weight, cf.label
`

type GetCustomFieldsForEventParams struct {
	IsActive   sql.NullBool `json:"is_active"`
	IsActive_2 sql.NullBool `json:"is_active_2"`
}

type GetCustomFieldsForEventRow struct {
	ID             uuid.UUID      `json:"id"`
	CustomGroupID  uuid.UUID      `json:"custom_group_id"`
	Name           string         `json:"name"`
	Label          string         `json:"label"`
	DataType       string         `json:"data_type"`
	HtmlType       string         `json:"html_type"`
	IsRequired     sql.NullBool   `json:"is_required"`
	IsSearchable   sql.NullBool   `json:"is_searchable"`
	IsSearchRange  sql.NullBool   `json:"is_search_range"`
	IsView         sql.NullBool   `json:"is_view"`
	IsActive       sql.NullBool   `json:"is_active"`
	Weight         sql.NullInt32  `json:"weight"`
	HelpPre        sql.NullString `json:"help_pre"`
	HelpPost       sql.NullString `json:"help_post"`
	DefaultValue   sql.NullString `json:"default_value"`
	TextLength     sql.NullInt32  `json:"text_length"`
	StartDateYears sql.NullInt32  `json:"start_date_years"`
	EndDateYears   sql.NullInt32  `json:"end_date_years"`
	DateFormat     sql.NullString `json:"date_format"`
	TimeFormat     sql.NullString `json:"time_format"`
	OptionGroupID  uuid.NullUUID  `json:"option_group_id"`
	Filter         sql.NullString `json:"filter"`
	InSelector     sql.NullBool   `json:"in_selector"`
	CreatedAt      sql.NullTime   `json:"created_at"`
	UpdatedAt      sql.NullTime   `json:"updated_at"`
	GroupTitle     string         `json:"group_title"`
	GroupHelpPre   sql.NullString `json:"group_help_pre"`
	GroupHelpPost  sql.NullString `json:"group_help_post"`
}

func (q *Queries) GetCustomFieldsForEvent(ctx context.Context, arg GetCustomFieldsForEventParams) ([]GetCustomFieldsForEventRow, error) {
	rows, err := q.db.QueryContext(ctx, GetCustomFieldsForEvent, arg.IsActive, arg.IsActive_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCustomFieldsForEventRow{}
	for rows.Next() {
		var i GetCustomFieldsForEventRow
		if err := rows.Scan(
			&i.ID,
			&i.CustomGroupID,
			&i.Name,
			&i.Label,
			&i.DataType,
			&i.HtmlType,
			&i.IsRequired,
			&i.IsSearchable,
			&i.IsSearchRange,
			&i.IsView,
			&i.IsActive,
			&i.Weight,
			&i.HelpPre,
			&i.HelpPost,
			&i.DefaultValue,
			&i.TextLength,
			&i.StartDateYears,
			&i.EndDateYears,
			&i.DateFormat,
			&i.TimeFormat,
			&i.OptionGroupID,
			&i.Filter,
			&i.InSelector,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GroupTitle,
			&i.GroupHelpPre,
			&i.GroupHelpPost,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCustomGroup = `-- name: GetCustomGroup :one
SELECT id, name, title, extends, table_name, is_active, is_multiple, collapse_display, help_pre, help_post, weight, created_at, updated_at FROM custom_groups WHERE id = $1
`

func (q *Queries) GetCustomGroup(ctx context.Context, id uuid.UUID) (CustomGroup, error) {
	row := q.db.QueryRowContext(ctx, GetCustomGroup, id)
	var i CustomGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Extends,
		&i.TableName,
		&i.IsActive,
		&i.IsMultiple,
		&i.CollapseDisplay,
		&i.HelpPre,
		&i.HelpPost,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCustomGroupByName = `-- name: GetCustomGroupByName :one
SELECT id, name, title, extends, table_name, is_active, is_multiple, collapse_display, help_pre, help_post, weight, created_at, updated_at FROM custom_groups WHERE name = $1
`

func (q *Queries) GetCustomGroupByName(ctx context.Context, name string) (CustomGroup, error) {
	row := q.db.QueryRowContext(ctx, GetCustomGroupByName, name)
	var i CustomGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Extends,
		&i.TableName,
		&i.IsActive,
		&i.IsMultiple,
		&i.CollapseDisplay,
		&i.HelpPre,
		&i.HelpPost,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCustomValue = `-- name: GetCustomValue :one
SELECT id, custom_field_id, entity_table, entity_id, value_text, value_int, value_float, value_date, value_boolean, value_link, created_at, updated_at FROM custom_values WHERE id = $1
`

func (q *Queries) GetCustomValue(ctx context.Context, id uuid.UUID) (CustomValue, error) {
	row := q.db.QueryRowContext(ctx, GetCustomValue, id)
	var i CustomValue
	err := row.Scan(
		&i.ID,
		&i.CustomFieldID,
		&i.EntityTable,
		&i.EntityID,
		&i.ValueText,
		&i.ValueInt,
		&i.ValueFloat,
		&i.ValueDate,
		&i.ValueBoolean,
		&i.ValueLink,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCustomValueByField = `-- name: GetCustomValueByField :one
SELECT id, custom_field_id, entity_table, entity_id, value_text, value_int, value_float, value_date, value_boolean, value_link, created_at, updated_at FROM custom_values 
WHERE custom_field_id = $1 AND entity_table = $2 AND entity_id = $3
`

type GetCustomValueByFieldParams struct {
	CustomFieldID uuid.UUID `json:"custom_field_id"`
	EntityTable   string    `json:"entity_table"`
	EntityID      uuid.UUID `json:"entity_id"`
}

func (q *Queries) GetCustomValueByField(ctx context.Context, arg GetCustomValueByFieldParams) (CustomValue, error) {
	row := q.db.QueryRowContext(ctx, GetCustomValueByField, arg.CustomFieldID, arg.EntityTable, arg.EntityID)
	var i CustomValue
	err := row.Scan(
		&i.ID,
		&i.CustomFieldID,
		&i.EntityTable,
		&i.EntityID,
		&i.ValueText,
		&i.ValueInt,
		&i.ValueFloat,
		&i.ValueDate,
		&i.ValueBoolean,
		&i.ValueLink,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCustomValuesByEntity = `-- name: GetCustomValuesByEntity :many
SELECT cv.id, cv.custom_field_id, cv.entity_table, cv.entity_id, cv.value_text, cv.value_int, cv.value_float, cv.value_date, cv.value_boolean, cv.value_link, cv.created_at, cv.updated_at, cf.name as field_name, cf.label as field_label, cf.data_type, cf.html_type,
       cg.name as group_name, cg.title as group_title
FROM custom_values cv
INNER JOIN custom_fields cf ON cv.custom_field_id = cf.id
INNER JOIN custom_groups cg ON cf.custom_group_id = cg.id
WHERE cv.entity_table = $1 AND cv.entity_id = $2
ORDER BY cg.weight, cg.title, cf.weight, cf.label
`

type GetCustomValuesByEntityParams struct {
	EntityTable string    `json:"entity_table"`
	EntityID    uuid.UUID `json:"entity_id"`
}

type GetCustomValuesByEntityRow struct {
	ID            uuid.UUID      `json:"id"`
	CustomFieldID uuid.UUID      `json:"custom_field_id"`
	EntityTable   string         `json:"entity_table"`
	EntityID      uuid.UUID      `json:"entity_id"`
	ValueText     sql.NullString `json:"value_text"`
	ValueInt      sql.NullInt32  `json:"value_int"`
	ValueFloat    sql.NullString `json:"value_float"`
	ValueDate     sql.NullTime   `json:"value_date"`
	ValueBoolean  sql.NullBool   `json:"value_boolean"`
	ValueLink     sql.NullString `json:"value_link"`
	CreatedAt     sql.NullTime   `json:"created_at"`
	UpdatedAt     sql.NullTime   `json:"updated_at"`
	FieldName     string         `json:"field_name"`
	FieldLabel    string         `json:"field_label"`
	DataType      string         `json:"data_type"`
	HtmlType      string         `json:"html_type"`
	GroupName     string         `json:"group_name"`
	GroupTitle    string         `json:"group_title"`
}

func (q *Queries) GetCustomValuesByEntity(ctx context.Context, arg GetCustomValuesByEntityParams) ([]GetCustomValuesByEntityRow, error) {
	rows, err := q.db.QueryContext(ctx, GetCustomValuesByEntity, arg.EntityTable, arg.EntityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCustomValuesByEntityRow{}
	for rows.Next() {
		var i GetCustomValuesByEntityRow
		if err := rows.Scan(
			&i.ID,
			&i.CustomFieldID,
			&i.EntityTable,
			&i.EntityID,
			&i.ValueText,
			&i.ValueInt,
			&i.ValueFloat,
			&i.ValueDate,
			&i.ValueBoolean,
			&i.ValueLink,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FieldName,
			&i.FieldLabel,
			&i.DataType,
			&i.HtmlType,
			&i.GroupName,
			&i.GroupTitle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListAllCustomGroups = `-- name: ListAllCustomGroups :many
SELECT id, name, title, extends, table_name, is_active, is_multiple, collapse_display, help_pre, help_post, weight, created_at, updated_at FROM custom_groups 
WHERE is_active = $1
ORDER BY extends, weight, title
`

func (q *Queries) ListAllCustomGroups(ctx context.Context, isActive sql.NullBool) ([]CustomGroup, error) {
	rows, err := q.db.QueryContext(ctx, ListAllCustomGroups, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CustomGroup{}
	for rows.Next() {
		var i CustomGroup
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Extends,
			&i.TableName,
			&i.IsActive,
			&i.IsMultiple,
			&i.CollapseDisplay,
			&i.HelpPre,
			&i.HelpPost,
			&i.Weight,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCustomFieldOptions = `-- name: ListCustomFieldOptions :many
SELECT id, custom_field_id, label, value, weight, is_active, created_at FROM custom_field_options 
WHERE custom_field_id = $1 AND is_active = $2
ORDER BY weight, label
`

type ListCustomFieldOptionsParams struct {
	CustomFieldID uuid.UUID    `json:"custom_field_id"`
	IsActive      sql.NullBool `json:"is_active"`
}

func (q *Queries) ListCustomFieldOptions(ctx context.Context, arg ListCustomFieldOptionsParams) ([]CustomFieldOption, error) {
	rows, err := q.db.QueryContext(ctx, ListCustomFieldOptions, arg.CustomFieldID, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CustomFieldOption{}
	for rows.Next() {
		var i CustomFieldOption
		if err := rows.Scan(
			&i.ID,
			&i.CustomFieldID,
			&i.Label,
			&i.Value,
			&i.Weight,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCustomFieldsByEntity = `-- name: ListCustomFieldsByEntity :many
SELECT cf.id, cf.custom_group_id, cf.name, cf.label, cf.data_type, cf.html_type, cf.is_required, cf.is_searchable, cf.is_search_range, cf.is_view, cf.is_active, cf.weight, cf.help_pre, cf.help_post, cf.default_value, cf.text_length, cf.start_date_years, cf.end_date_years, cf.date_format, cf.time_format, cf.option_group_id, cf.filter, cf.in_selector, cf.created_at, cf.updated_at, cg.name as group_name, cg.title as group_title 
FROM custom_fields cf
INNER JOIN custom_groups cg ON cf.custom_group_id = cg.id
WHERE cg.extends = $1 AND cf.is_active = $2 AND cg.is_active = $3
ORDER BY cg.weight, cg.title, cf.weight, cf.label
`

type ListCustomFieldsByEntityParams struct {
	Extends    string       `json:"extends"`
	IsActive   sql.NullBool `json:"is_active"`
	IsActive_2 sql.NullBool `json:"is_active_2"`
}

type ListCustomFieldsByEntityRow struct {
	ID             uuid.UUID      `json:"id"`
	CustomGroupID  uuid.UUID      `json:"custom_group_id"`
	Name           string         `json:"name"`
	Label          string         `json:"label"`
	DataType       string         `json:"data_type"`
	HtmlType       string         `json:"html_type"`
	IsRequired     sql.NullBool   `json:"is_required"`
	IsSearchable   sql.NullBool   `json:"is_searchable"`
	IsSearchRange  sql.NullBool   `json:"is_search_range"`
	IsView         sql.NullBool   `json:"is_view"`
	IsActive       sql.NullBool   `json:"is_active"`
	Weight         sql.NullInt32  `json:"weight"`
	HelpPre        sql.NullString `json:"help_pre"`
	HelpPost       sql.NullString `json:"help_post"`
	DefaultValue   sql.NullString `json:"default_value"`
	TextLength     sql.NullInt32  `json:"text_length"`
	StartDateYears sql.NullInt32  `json:"start_date_years"`
	EndDateYears   sql.NullInt32  `json:"end_date_years"`
	DateFormat     sql.NullString `json:"date_format"`
	TimeFormat     sql.NullString `json:"time_format"`
	OptionGroupID  uuid.NullUUID  `json:"option_group_id"`
	Filter         sql.NullString `json:"filter"`
	InSelector     sql.NullBool   `json:"in_selector"`
	CreatedAt      sql.NullTime   `json:"created_at"`
	UpdatedAt      sql.NullTime   `json:"updated_at"`
	GroupName      string         `json:"group_name"`
	GroupTitle     string         `json:"group_title"`
}

func (q *Queries) ListCustomFieldsByEntity(ctx context.Context, arg ListCustomFieldsByEntityParams) ([]ListCustomFieldsByEntityRow, error) {
	rows, err := q.db.QueryContext(ctx, ListCustomFieldsByEntity, arg.Extends, arg.IsActive, arg.IsActive_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListCustomFieldsByEntityRow{}
	for rows.Next() {
		var i ListCustomFieldsByEntityRow
		if err := rows.Scan(
			&i.ID,
			&i.CustomGroupID,
			&i.Name,
			&i.Label,
			&i.DataType,
			&i.HtmlType,
			&i.IsRequired,
			&i.IsSearchable,
			&i.IsSearchRange,
			&i.IsView,
			&i.IsActive,
			&i.Weight,
			&i.HelpPre,
			&i.HelpPost,
			&i.DefaultValue,
			&i.TextLength,
			&i.StartDateYears,
			&i.EndDateYears,
			&i.DateFormat,
			&i.TimeFormat,
			&i.OptionGroupID,
			&i.Filter,
			&i.InSelector,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GroupName,
			&i.GroupTitle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCustomFieldsByGroup = `-- name: ListCustomFieldsByGroup :many
SELECT id, custom_group_id, name, label, data_type, html_type, is_required, is_searchable, is_search_range, is_view, is_active, weight, help_pre, help_post, default_value, text_length, start_date_years, end_date_years, date_format, time_format, option_group_id, filter, in_selector, created_at, updated_at FROM custom_fields 
WHERE custom_group_id = $1 AND is_active = $2
ORDER BY weight, label
`

type ListCustomFieldsByGroupParams struct {
	CustomGroupID uuid.UUID    `json:"custom_group_id"`
	IsActive      sql.NullBool `json:"is_active"`
}

func (q *Queries) ListCustomFieldsByGroup(ctx context.Context, arg ListCustomFieldsByGroupParams) ([]CustomField, error) {
	rows, err := q.db.QueryContext(ctx, ListCustomFieldsByGroup, arg.CustomGroupID, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CustomField{}
	for rows.Next() {
		var i CustomField
		if err := rows.Scan(
			&i.ID,
			&i.CustomGroupID,
			&i.Name,
			&i.Label,
			&i.DataType,
			&i.HtmlType,
			&i.IsRequired,
			&i.IsSearchable,
			&i.IsSearchRange,
			&i.IsView,
			&i.IsActive,
			&i.Weight,
			&i.HelpPre,
			&i.HelpPost,
			&i.DefaultValue,
			&i.TextLength,
			&i.StartDateYears,
			&i.EndDateYears,
			&i.DateFormat,
			&i.TimeFormat,
			&i.OptionGroupID,
			&i.Filter,
			&i.InSelector,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCustomGroups = `-- name: ListCustomGroups :many
SELECT id, name, title, extends, table_name, is_active, is_multiple, collapse_display, help_pre, help_post, weight, created_at, updated_at FROM custom_groups 
WHERE extends = $1 AND is_active = $2
ORDER BY weight, title
`

type ListCustomGroupsParams struct {
	Extends  string       `json:"extends"`
	IsActive sql.NullBool `json:"is_active"`
}

func (q *Queries) ListCustomGroups(ctx context.Context, arg ListCustomGroupsParams) ([]CustomGroup, error) {
	rows, err := q.db.QueryContext(ctx, ListCustomGroups, arg.Extends, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CustomGroup{}
	for rows.Next() {
		var i CustomGroup
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Extends,
			&i.TableName,
			&i.IsActive,
			&i.IsMultiple,
			&i.CollapseDisplay,
			&i.HelpPre,
			&i.HelpPost,
			&i.Weight,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchCustomValues = `-- name: SearchCustomValues :many
SELECT cv.id, cv.custom_field_id, cv.entity_table, cv.entity_id, cv.value_text, cv.value_int, cv.value_float, cv.value_date, cv.value_boolean, cv.value_link, cv.created_at, cv.updated_at, cf.name as field_name, cf.label as field_label, cf.data_type,
       cg.title as group_title, cg.extends
FROM custom_values cv
INNER JOIN custom_fields cf ON cv.custom_field_id = cf.id
INNER JOIN custom_groups cg ON cf.custom_group_id = cg.id
WHERE cv.entity_table = $1 
  AND cv.entity_id = $2
  AND cf.is_searchable = $3
ORDER BY cg.weight, cf.weight
`

type SearchCustomValuesParams struct {
	EntityTable  string       `json:"entity_table"`
	EntityID     uuid.UUID    `json:"entity_id"`
	IsSearchable sql.NullBool `json:"is_searchable"`
}

type SearchCustomValuesRow struct {
	ID            uuid.UUID      `json:"id"`
	CustomFieldID uuid.UUID      `json:"custom_field_id"`
	EntityTable   string         `json:"entity_table"`
	EntityID      uuid.UUID      `json:"entity_id"`
	ValueText     sql.NullString `json:"value_text"`
	ValueInt      sql.NullInt32  `json:"value_int"`
	ValueFloat    sql.NullString `json:"value_float"`
	ValueDate     sql.NullTime   `json:"value_date"`
	ValueBoolean  sql.NullBool   `json:"value_boolean"`
	ValueLink     sql.NullString `json:"value_link"`
	CreatedAt     sql.NullTime   `json:"created_at"`
	UpdatedAt     sql.NullTime   `json:"updated_at"`
	FieldName     string         `json:"field_name"`
	FieldLabel    string         `json:"field_label"`
	DataType      string         `json:"data_type"`
	GroupTitle    string         `json:"group_title"`
	Extends       string         `json:"extends"`
}

// Search queries for custom fields
func (q *Queries) SearchCustomValues(ctx context.Context, arg SearchCustomValuesParams) ([]SearchCustomValuesRow, error) {
	rows, err := q.db.QueryContext(ctx, SearchCustomValues, arg.EntityTable, arg.EntityID, arg.IsSearchable)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchCustomValuesRow{}
	for rows.Next() {
		var i SearchCustomValuesRow
		if err := rows.Scan(
			&i.ID,
			&i.CustomFieldID,
			&i.EntityTable,
			&i.EntityID,
			&i.ValueText,
			&i.ValueInt,
			&i.ValueFloat,
			&i.ValueDate,
			&i.ValueBoolean,
			&i.ValueLink,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FieldName,
			&i.FieldLabel,
			&i.DataType,
			&i.GroupTitle,
			&i.Extends,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateCustomField = `-- name: UpdateCustomField :one
UPDATE custom_fields SET
    label = $2,
    data_type = $3,
    html_type = $4,
    is_required = $5,
    is_searchable = $6,
    is_search_range = $7,
    is_view = $8,
    is_active = $9,
    weight = $10,
    help_pre = $11,
    help_post = $12,
    default_value = $13,
    text_length = $14,
    start_date_years = $15,
    end_date_years = $16,
    date_format = $17,
    time_format = $18,
    option_group_id = $19,
    filter = $20,
    in_selector = $21,
    updated_at = NOW()
WHERE id = $1 RETURNING id, custom_group_id, name, label, data_type, html_type, is_required, is_searchable, is_search_range, is_view, is_active, weight, help_pre, help_post, default_value, text_length, start_date_years, end_date_years, date_format, time_format, option_group_id, filter, in_selector, created_at, updated_at
`

type UpdateCustomFieldParams struct {
	ID             uuid.UUID      `json:"id"`
	Label          string         `json:"label"`
	DataType       string         `json:"data_type"`
	HtmlType       string         `json:"html_type"`
	IsRequired     sql.NullBool   `json:"is_required"`
	IsSearchable   sql.NullBool   `json:"is_searchable"`
	IsSearchRange  sql.NullBool   `json:"is_search_range"`
	IsView         sql.NullBool   `json:"is_view"`
	IsActive       sql.NullBool   `json:"is_active"`
	Weight         sql.NullInt32  `json:"weight"`
	HelpPre        sql.NullString `json:"help_pre"`
	HelpPost       sql.NullString `json:"help_post"`
	DefaultValue   sql.NullString `json:"default_value"`
	TextLength     sql.NullInt32  `json:"text_length"`
	StartDateYears sql.NullInt32  `json:"start_date_years"`
	EndDateYears   sql.NullInt32  `json:"end_date_years"`
	DateFormat     sql.NullString `json:"date_format"`
	TimeFormat     sql.NullString `json:"time_format"`
	OptionGroupID  uuid.NullUUID  `json:"option_group_id"`
	Filter         sql.NullString `json:"filter"`
	InSelector     sql.NullBool   `json:"in_selector"`
}

func (q *Queries) UpdateCustomField(ctx context.Context, arg UpdateCustomFieldParams) (CustomField, error) {
	row := q.db.QueryRowContext(ctx, UpdateCustomField,
		arg.ID,
		arg.Label,
		arg.DataType,
		arg.HtmlType,
		arg.IsRequired,
		arg.IsSearchable,
		arg.IsSearchRange,
		arg.IsView,
		arg.IsActive,
		arg.Weight,
		arg.HelpPre,
		arg.HelpPost,
		arg.DefaultValue,
		arg.TextLength,
		arg.StartDateYears,
		arg.EndDateYears,
		arg.DateFormat,
		arg.TimeFormat,
		arg.OptionGroupID,
		arg.Filter,
		arg.InSelector,
	)
	var i CustomField
	err := row.Scan(
		&i.ID,
		&i.CustomGroupID,
		&i.Name,
		&i.Label,
		&i.DataType,
		&i.HtmlType,
		&i.IsRequired,
		&i.IsSearchable,
		&i.IsSearchRange,
		&i.IsView,
		&i.IsActive,
		&i.Weight,
		&i.HelpPre,
		&i.HelpPost,
		&i.DefaultValue,
		&i.TextLength,
		&i.StartDateYears,
		&i.EndDateYears,
		&i.DateFormat,
		&i.TimeFormat,
		&i.OptionGroupID,
		&i.Filter,
		&i.InSelector,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateCustomFieldOption = `-- name: UpdateCustomFieldOption :one
UPDATE custom_field_options SET
    label = $2,
    value = $3,
    weight = $4,
    is_active = $5
WHERE id = $1 RETURNING id, custom_field_id, label, value, weight, is_active, created_at
`

type UpdateCustomFieldOptionParams struct {
	ID       uuid.UUID     `json:"id"`
	Label    string        `json:"label"`
	Value    string        `json:"value"`
	Weight   sql.NullInt32 `json:"weight"`
	IsActive sql.NullBool  `json:"is_active"`
}

func (q *Queries) UpdateCustomFieldOption(ctx context.Context, arg UpdateCustomFieldOptionParams) (CustomFieldOption, error) {
	row := q.db.QueryRowContext(ctx, UpdateCustomFieldOption,
		arg.ID,
		arg.Label,
		arg.Value,
		arg.Weight,
		arg.IsActive,
	)
	var i CustomFieldOption
	err := row.Scan(
		&i.ID,
		&i.CustomFieldID,
		&i.Label,
		&i.Value,
		&i.Weight,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const UpdateCustomGroup = `-- name: UpdateCustomGroup :one
UPDATE custom_groups SET
    title = $2,
    extends = $3,
    table_name = $4,
    is_active = $5,
    is_multiple = $6,
    collapse_display = $7,
    help_pre = $8,
    help_post = $9,
    weight = $10,
    updated_at = NOW()
WHERE id = $1 RETURNING id, name, title, extends, table_name, is_active, is_multiple, collapse_display, help_pre, help_post, weight, created_at, updated_at
`

type UpdateCustomGroupParams struct {
	ID              uuid.UUID      `json:"id"`
	Title           string         `json:"title"`
	Extends         string         `json:"extends"`
	TableName       sql.NullString `json:"table_name"`
	IsActive        sql.NullBool   `json:"is_active"`
	IsMultiple      sql.NullBool   `json:"is_multiple"`
	CollapseDisplay sql.NullBool   `json:"collapse_display"`
	HelpPre         sql.NullString `json:"help_pre"`
	HelpPost        sql.NullString `json:"help_post"`
	Weight          sql.NullInt32  `json:"weight"`
}

func (q *Queries) UpdateCustomGroup(ctx context.Context, arg UpdateCustomGroupParams) (CustomGroup, error) {
	row := q.db.QueryRowContext(ctx, UpdateCustomGroup,
		arg.ID,
		arg.Title,
		arg.Extends,
		arg.TableName,
		arg.IsActive,
		arg.IsMultiple,
		arg.CollapseDisplay,
		arg.HelpPre,
		arg.HelpPost,
		arg.Weight,
	)
	var i CustomGroup
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Extends,
		&i.TableName,
		&i.IsActive,
		&i.IsMultiple,
		&i.CollapseDisplay,
		&i.HelpPre,
		&i.HelpPost,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateCustomValue = `-- name: UpdateCustomValue :one
UPDATE custom_values SET
    value_text = $4,
    value_int = $5,
    value_float = $6,
    value_date = $7,
    value_boolean = $8,
    value_link = $9,
    updated_at = NOW()
WHERE custom_field_id = $1 AND entity_table = $2 AND entity_id = $3 RETURNING id, custom_field_id, entity_table, entity_id, value_text, value_int, value_float, value_date, value_boolean, value_link, created_at, updated_at
`

type UpdateCustomValueParams struct {
	CustomFieldID uuid.UUID      `json:"custom_field_id"`
	EntityTable   string         `json:"entity_table"`
	EntityID      uuid.UUID      `json:"entity_id"`
	ValueText     sql.NullString `json:"value_text"`
	ValueInt      sql.NullInt32  `json:"value_int"`
	ValueFloat    sql.NullString `json:"value_float"`
	ValueDate     sql.NullTime   `json:"value_date"`
	ValueBoolean  sql.NullBool   `json:"value_boolean"`
	ValueLink     sql.NullString `json:"value_link"`
}

func (q *Queries) UpdateCustomValue(ctx context.Context, arg UpdateCustomValueParams) (CustomValue, error) {
	row := q.db.QueryRowContext(ctx, UpdateCustomValue,
		arg.CustomFieldID,
		arg.EntityTable,
		arg.EntityID,
		arg.ValueText,
		arg.ValueInt,
		arg.ValueFloat,
		arg.ValueDate,
		arg.ValueBoolean,
		arg.ValueLink,
	)
	var i CustomValue
	err := row.Scan(
		&i.ID,
		&i.CustomFieldID,
		&i.EntityTable,
		&i.EntityID,
		&i.ValueText,
		&i.ValueInt,
		&i.ValueFloat,
		&i.ValueDate,
		&i.ValueBoolean,
		&i.ValueLink,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
