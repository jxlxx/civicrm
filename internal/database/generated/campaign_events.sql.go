// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: campaign_events.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const CreateCampaignEvent = `-- name: CreateCampaignEvent :one
INSERT INTO campaign_events (
    campaign_id, event_id, is_deleted
) VALUES (
    $1, $2, $3
) RETURNING id, campaign_id, event_id, is_deleted, created_at, updated_at
`

type CreateCampaignEventParams struct {
	CampaignID uuid.UUID    `json:"campaign_id"`
	EventID    uuid.UUID    `json:"event_id"`
	IsDeleted  sql.NullBool `json:"is_deleted"`
}

func (q *Queries) CreateCampaignEvent(ctx context.Context, arg CreateCampaignEventParams) (CampaignEvent, error) {
	row := q.db.QueryRowContext(ctx, CreateCampaignEvent, arg.CampaignID, arg.EventID, arg.IsDeleted)
	var i CampaignEvent
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.EventID,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteCampaignEvent = `-- name: DeleteCampaignEvent :exec
UPDATE campaign_events SET is_deleted = TRUE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) DeleteCampaignEvent(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteCampaignEvent, id)
	return err
}

const GetCampaignEvent = `-- name: GetCampaignEvent :one
SELECT id, campaign_id, event_id, is_deleted, created_at, updated_at FROM campaign_events WHERE id = $1 AND is_deleted = FALSE
`

func (q *Queries) GetCampaignEvent(ctx context.Context, id uuid.UUID) (CampaignEvent, error) {
	row := q.db.QueryRowContext(ctx, GetCampaignEvent, id)
	var i CampaignEvent
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.EventID,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCampaignEventCount = `-- name: GetCampaignEventCount :one
SELECT COUNT(*) FROM campaign_events WHERE campaign_id = $1 AND is_deleted = FALSE
`

func (q *Queries) GetCampaignEventCount(ctx context.Context, campaignID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, GetCampaignEventCount, campaignID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const GetCampaignEventStats = `-- name: GetCampaignEventStats :many
SELECT 
    'All Events' as event_type,
    COUNT(ce.id) as event_count
FROM campaign_events ce
WHERE ce.campaign_id = $1 AND ce.is_deleted = FALSE
GROUP BY event_type
ORDER BY event_type
`

type GetCampaignEventStatsRow struct {
	EventType  string `json:"event_type"`
	EventCount int64  `json:"event_count"`
}

func (q *Queries) GetCampaignEventStats(ctx context.Context, campaignID uuid.UUID) ([]GetCampaignEventStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignEventStats, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCampaignEventStatsRow{}
	for rows.Next() {
		var i GetCampaignEventStatsRow
		if err := rows.Scan(&i.EventType, &i.EventCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCampaignEventSummary = `-- name: GetCampaignEventSummary :many
SELECT 
    c.id as campaign_id,
    c.name as campaign_name,
    COUNT(ce.id) as event_count,
    STRING_AGG(e.title, ', ') as event_titles
FROM campaigns c
LEFT JOIN campaign_events ce ON c.id = ce.campaign_id AND ce.is_deleted = FALSE
LEFT JOIN events e ON ce.event_id = e.id
WHERE c.is_active = $1
GROUP BY c.id, c.name
ORDER BY c.start_date DESC
`

type GetCampaignEventSummaryRow struct {
	CampaignID   uuid.UUID `json:"campaign_id"`
	CampaignName string    `json:"campaign_name"`
	EventCount   int64     `json:"event_count"`
	EventTitles  []byte    `json:"event_titles"`
}

func (q *Queries) GetCampaignEventSummary(ctx context.Context, isActive sql.NullBool) ([]GetCampaignEventSummaryRow, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignEventSummary, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCampaignEventSummaryRow{}
	for rows.Next() {
		var i GetCampaignEventSummaryRow
		if err := rows.Scan(
			&i.CampaignID,
			&i.CampaignName,
			&i.EventCount,
			&i.EventTitles,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCampaignEventsByCampaign = `-- name: GetCampaignEventsByCampaign :many
SELECT id, campaign_id, event_id, is_deleted, created_at, updated_at FROM campaign_events 
WHERE campaign_id = $1 AND is_deleted = FALSE 
ORDER BY id DESC
`

func (q *Queries) GetCampaignEventsByCampaign(ctx context.Context, campaignID uuid.UUID) ([]CampaignEvent, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignEventsByCampaign, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignEvent{}
	for rows.Next() {
		var i CampaignEvent
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.EventID,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCampaignEventsByEvent = `-- name: GetCampaignEventsByEvent :one
SELECT id, campaign_id, event_id, is_deleted, created_at, updated_at FROM campaign_events WHERE event_id = $1 AND is_deleted = FALSE
`

func (q *Queries) GetCampaignEventsByEvent(ctx context.Context, eventID uuid.UUID) (CampaignEvent, error) {
	row := q.db.QueryRowContext(ctx, GetCampaignEventsByEvent, eventID)
	var i CampaignEvent
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.EventID,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCampaignEventsWithDetails = `-- name: GetCampaignEventsWithDetails :many
SELECT 
    ce.id, ce.campaign_id, ce.event_id, ce.is_deleted, ce.created_at, ce.updated_at,
    e.title as event_title,
    e.description as event_description,
    e.start_date,
    e.end_date
FROM campaign_events ce
JOIN events e ON ce.event_id = e.id
WHERE ce.campaign_id = $1 AND ce.is_deleted = FALSE 
ORDER BY e.start_date DESC
`

type GetCampaignEventsWithDetailsRow struct {
	ID               uuid.UUID      `json:"id"`
	CampaignID       uuid.UUID      `json:"campaign_id"`
	EventID          uuid.UUID      `json:"event_id"`
	IsDeleted        sql.NullBool   `json:"is_deleted"`
	CreatedAt        sql.NullTime   `json:"created_at"`
	UpdatedAt        sql.NullTime   `json:"updated_at"`
	EventTitle       string         `json:"event_title"`
	EventDescription sql.NullString `json:"event_description"`
	StartDate        time.Time      `json:"start_date"`
	EndDate          time.Time      `json:"end_date"`
}

func (q *Queries) GetCampaignEventsWithDetails(ctx context.Context, campaignID uuid.UUID) ([]GetCampaignEventsWithDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignEventsWithDetails, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCampaignEventsWithDetailsRow{}
	for rows.Next() {
		var i GetCampaignEventsWithDetailsRow
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.EventID,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.EventTitle,
			&i.EventDescription,
			&i.StartDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const HardDeleteCampaignEvent = `-- name: HardDeleteCampaignEvent :exec
DELETE FROM campaign_events WHERE id = $1
`

func (q *Queries) HardDeleteCampaignEvent(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, HardDeleteCampaignEvent, id)
	return err
}

const ListCampaignEvents = `-- name: ListCampaignEvents :many
SELECT id, campaign_id, event_id, is_deleted, created_at, updated_at FROM campaign_events 
WHERE is_deleted = FALSE 
ORDER BY id DESC
`

func (q *Queries) ListCampaignEvents(ctx context.Context) ([]CampaignEvent, error) {
	rows, err := q.db.QueryContext(ctx, ListCampaignEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignEvent{}
	for rows.Next() {
		var i CampaignEvent
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.EventID,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCampaignEventsByDateRange = `-- name: ListCampaignEventsByDateRange :many
SELECT ce.id, ce.campaign_id, ce.event_id, ce.is_deleted, ce.created_at, ce.updated_at FROM campaign_events ce
JOIN events e ON ce.event_id = e.id
WHERE e.start_date >= $1 AND e.start_date <= $2 
AND ce.is_deleted = FALSE 
ORDER BY e.start_date DESC
`

type ListCampaignEventsByDateRangeParams struct {
	StartDate   time.Time `json:"start_date"`
	StartDate_2 time.Time `json:"start_date_2"`
}

func (q *Queries) ListCampaignEventsByDateRange(ctx context.Context, arg ListCampaignEventsByDateRangeParams) ([]CampaignEvent, error) {
	rows, err := q.db.QueryContext(ctx, ListCampaignEventsByDateRange, arg.StartDate, arg.StartDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignEvent{}
	for rows.Next() {
		var i CampaignEvent
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.EventID,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCampaignEventsByType = `-- name: ListCampaignEventsByType :many
SELECT ce.id, ce.campaign_id, ce.event_id, ce.is_deleted, ce.created_at, ce.updated_at FROM campaign_events ce
JOIN events e ON ce.event_id = e.id
WHERE ce.is_deleted = FALSE 
ORDER BY e.start_date DESC
`

func (q *Queries) ListCampaignEventsByType(ctx context.Context) ([]CampaignEvent, error) {
	rows, err := q.db.QueryContext(ctx, ListCampaignEventsByType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignEvent{}
	for rows.Next() {
		var i CampaignEvent
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.EventID,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchCampaignEvents = `-- name: SearchCampaignEvents :many
SELECT ce.id, ce.campaign_id, ce.event_id, ce.is_deleted, ce.created_at, ce.updated_at FROM campaign_events ce
JOIN events e ON ce.event_id = e.id
WHERE (e.title ILIKE $1 OR e.description ILIKE $1) 
AND ce.is_deleted = FALSE 
ORDER BY e.start_date DESC
`

func (q *Queries) SearchCampaignEvents(ctx context.Context, title string) ([]CampaignEvent, error) {
	rows, err := q.db.QueryContext(ctx, SearchCampaignEvents, title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignEvent{}
	for rows.Next() {
		var i CampaignEvent
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.EventID,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateCampaignEvent = `-- name: UpdateCampaignEvent :one
UPDATE campaign_events SET
    campaign_id = $2, event_id = $3, is_deleted = $4, updated_at = NOW()
WHERE id = $1 RETURNING id, campaign_id, event_id, is_deleted, created_at, updated_at
`

type UpdateCampaignEventParams struct {
	ID         uuid.UUID    `json:"id"`
	CampaignID uuid.UUID    `json:"campaign_id"`
	EventID    uuid.UUID    `json:"event_id"`
	IsDeleted  sql.NullBool `json:"is_deleted"`
}

func (q *Queries) UpdateCampaignEvent(ctx context.Context, arg UpdateCampaignEventParams) (CampaignEvent, error) {
	row := q.db.QueryRowContext(ctx, UpdateCampaignEvent,
		arg.ID,
		arg.CampaignID,
		arg.EventID,
		arg.IsDeleted,
	)
	var i CampaignEvent
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.EventID,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
