// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: campaign_contacts.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const ActivateCampaignContact = `-- name: ActivateCampaignContact :exec
UPDATE campaign_contacts SET is_active = TRUE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) ActivateCampaignContact(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, ActivateCampaignContact, id)
	return err
}

const CreateCampaignContact = `-- name: CreateCampaignContact :one
INSERT INTO campaign_contacts (
    campaign_id, contact_id, role, status, join_date, end_date, is_active
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, campaign_id, contact_id, role, status, join_date, end_date, is_active, created_at, updated_at
`

type CreateCampaignContactParams struct {
	CampaignID uuid.UUID      `json:"campaign_id"`
	ContactID  uuid.UUID      `json:"contact_id"`
	Role       string         `json:"role"`
	Status     sql.NullString `json:"status"`
	JoinDate   sql.NullTime   `json:"join_date"`
	EndDate    sql.NullTime   `json:"end_date"`
	IsActive   sql.NullBool   `json:"is_active"`
}

func (q *Queries) CreateCampaignContact(ctx context.Context, arg CreateCampaignContactParams) (CampaignContact, error) {
	row := q.db.QueryRowContext(ctx, CreateCampaignContact,
		arg.CampaignID,
		arg.ContactID,
		arg.Role,
		arg.Status,
		arg.JoinDate,
		arg.EndDate,
		arg.IsActive,
	)
	var i CampaignContact
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.ContactID,
		&i.Role,
		&i.Status,
		&i.JoinDate,
		&i.EndDate,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeactivateCampaignContact = `-- name: DeactivateCampaignContact :exec
UPDATE campaign_contacts SET is_active = FALSE, end_date = NOW(), updated_at = NOW() WHERE id = $1
`

func (q *Queries) DeactivateCampaignContact(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeactivateCampaignContact, id)
	return err
}

const DeleteCampaignContact = `-- name: DeleteCampaignContact :exec
DELETE FROM campaign_contacts WHERE id = $1
`

func (q *Queries) DeleteCampaignContact(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteCampaignContact, id)
	return err
}

const GetActiveCampaignContacts = `-- name: GetActiveCampaignContacts :many
SELECT id, campaign_id, contact_id, role, status, join_date, end_date, is_active, created_at, updated_at FROM campaign_contacts 
WHERE campaign_id = $1 AND is_active = TRUE 
ORDER BY join_date DESC
`

func (q *Queries) GetActiveCampaignContacts(ctx context.Context, campaignID uuid.UUID) ([]CampaignContact, error) {
	rows, err := q.db.QueryContext(ctx, GetActiveCampaignContacts, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignContact{}
	for rows.Next() {
		var i CampaignContact
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.ContactID,
			&i.Role,
			&i.Status,
			&i.JoinDate,
			&i.EndDate,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCampaignContact = `-- name: GetCampaignContact :one
SELECT id, campaign_id, contact_id, role, status, join_date, end_date, is_active, created_at, updated_at FROM campaign_contacts WHERE id = $1
`

func (q *Queries) GetCampaignContact(ctx context.Context, id uuid.UUID) (CampaignContact, error) {
	row := q.db.QueryRowContext(ctx, GetCampaignContact, id)
	var i CampaignContact
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.ContactID,
		&i.Role,
		&i.Status,
		&i.JoinDate,
		&i.EndDate,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCampaignContactByCampaignAndContact = `-- name: GetCampaignContactByCampaignAndContact :one
SELECT id, campaign_id, contact_id, role, status, join_date, end_date, is_active, created_at, updated_at FROM campaign_contacts 
WHERE campaign_id = $1 AND contact_id = $2 
ORDER BY join_date DESC LIMIT 1
`

type GetCampaignContactByCampaignAndContactParams struct {
	CampaignID uuid.UUID `json:"campaign_id"`
	ContactID  uuid.UUID `json:"contact_id"`
}

func (q *Queries) GetCampaignContactByCampaignAndContact(ctx context.Context, arg GetCampaignContactByCampaignAndContactParams) (CampaignContact, error) {
	row := q.db.QueryRowContext(ctx, GetCampaignContactByCampaignAndContact, arg.CampaignID, arg.ContactID)
	var i CampaignContact
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.ContactID,
		&i.Role,
		&i.Status,
		&i.JoinDate,
		&i.EndDate,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCampaignContactStats = `-- name: GetCampaignContactStats :many
SELECT 
    cc.role,
    cc.status,
    COUNT(*) as contact_count
FROM campaign_contacts cc
WHERE cc.is_active = $1
GROUP BY cc.role, cc.status
ORDER BY cc.role, cc.status
`

type GetCampaignContactStatsRow struct {
	Role         string         `json:"role"`
	Status       sql.NullString `json:"status"`
	ContactCount int64          `json:"contact_count"`
}

func (q *Queries) GetCampaignContactStats(ctx context.Context, isActive sql.NullBool) ([]GetCampaignContactStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignContactStats, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCampaignContactStatsRow{}
	for rows.Next() {
		var i GetCampaignContactStatsRow
		if err := rows.Scan(&i.Role, &i.Status, &i.ContactCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCampaignContactsByCampaign = `-- name: GetCampaignContactsByCampaign :many
SELECT id, campaign_id, contact_id, role, status, join_date, end_date, is_active, created_at, updated_at FROM campaign_contacts 
WHERE campaign_id = $1 
ORDER BY join_date DESC
`

func (q *Queries) GetCampaignContactsByCampaign(ctx context.Context, campaignID uuid.UUID) ([]CampaignContact, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignContactsByCampaign, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignContact{}
	for rows.Next() {
		var i CampaignContact
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.ContactID,
			&i.Role,
			&i.Status,
			&i.JoinDate,
			&i.EndDate,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCampaignContactsByContact = `-- name: GetCampaignContactsByContact :many
SELECT id, campaign_id, contact_id, role, status, join_date, end_date, is_active, created_at, updated_at FROM campaign_contacts 
WHERE contact_id = $1 
ORDER BY join_date DESC
`

func (q *Queries) GetCampaignContactsByContact(ctx context.Context, contactID uuid.UUID) ([]CampaignContact, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignContactsByContact, contactID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignContact{}
	for rows.Next() {
		var i CampaignContact
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.ContactID,
			&i.Role,
			&i.Status,
			&i.JoinDate,
			&i.EndDate,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCampaignContactsByRole = `-- name: GetCampaignContactsByRole :many
SELECT id, campaign_id, contact_id, role, status, join_date, end_date, is_active, created_at, updated_at FROM campaign_contacts 
WHERE campaign_id = $1 AND role = $2 
ORDER BY join_date DESC
`

type GetCampaignContactsByRoleParams struct {
	CampaignID uuid.UUID `json:"campaign_id"`
	Role       string    `json:"role"`
}

func (q *Queries) GetCampaignContactsByRole(ctx context.Context, arg GetCampaignContactsByRoleParams) ([]CampaignContact, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignContactsByRole, arg.CampaignID, arg.Role)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignContact{}
	for rows.Next() {
		var i CampaignContact
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.ContactID,
			&i.Role,
			&i.Status,
			&i.JoinDate,
			&i.EndDate,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCampaignContactsByStatus = `-- name: GetCampaignContactsByStatus :many
SELECT id, campaign_id, contact_id, role, status, join_date, end_date, is_active, created_at, updated_at FROM campaign_contacts 
WHERE campaign_id = $1 AND status = $2 
ORDER BY join_date DESC
`

type GetCampaignContactsByStatusParams struct {
	CampaignID uuid.UUID      `json:"campaign_id"`
	Status     sql.NullString `json:"status"`
}

func (q *Queries) GetCampaignContactsByStatus(ctx context.Context, arg GetCampaignContactsByStatusParams) ([]CampaignContact, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignContactsByStatus, arg.CampaignID, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignContact{}
	for rows.Next() {
		var i CampaignContact
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.ContactID,
			&i.Role,
			&i.Status,
			&i.JoinDate,
			&i.EndDate,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCampaignParticipantSummary = `-- name: GetCampaignParticipantSummary :many
SELECT 
    c.id as campaign_id,
    c.name as campaign_name,
    COUNT(cc.id) as participant_count,
    STRING_AGG(DISTINCT cc.role, ', ') as roles
FROM campaigns c
LEFT JOIN campaign_contacts cc ON c.id = cc.campaign_id AND cc.is_active = TRUE
WHERE c.is_active = $1
GROUP BY c.id, c.name
ORDER BY c.start_date DESC
`

type GetCampaignParticipantSummaryRow struct {
	CampaignID       uuid.UUID `json:"campaign_id"`
	CampaignName     string    `json:"campaign_name"`
	ParticipantCount int64     `json:"participant_count"`
	Roles            []byte    `json:"roles"`
}

func (q *Queries) GetCampaignParticipantSummary(ctx context.Context, isActive sql.NullBool) ([]GetCampaignParticipantSummaryRow, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignParticipantSummary, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCampaignParticipantSummaryRow{}
	for rows.Next() {
		var i GetCampaignParticipantSummaryRow
		if err := rows.Scan(
			&i.CampaignID,
			&i.CampaignName,
			&i.ParticipantCount,
			&i.Roles,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListActiveCampaignContacts = `-- name: ListActiveCampaignContacts :many
SELECT id, campaign_id, contact_id, role, status, join_date, end_date, is_active, created_at, updated_at FROM campaign_contacts 
WHERE is_active = TRUE 
ORDER BY join_date DESC
`

func (q *Queries) ListActiveCampaignContacts(ctx context.Context) ([]CampaignContact, error) {
	rows, err := q.db.QueryContext(ctx, ListActiveCampaignContacts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignContact{}
	for rows.Next() {
		var i CampaignContact
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.ContactID,
			&i.Role,
			&i.Status,
			&i.JoinDate,
			&i.EndDate,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCampaignContacts = `-- name: ListCampaignContacts :many
SELECT id, campaign_id, contact_id, role, status, join_date, end_date, is_active, created_at, updated_at FROM campaign_contacts 
ORDER BY join_date DESC
`

func (q *Queries) ListCampaignContacts(ctx context.Context) ([]CampaignContact, error) {
	rows, err := q.db.QueryContext(ctx, ListCampaignContacts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignContact{}
	for rows.Next() {
		var i CampaignContact
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.ContactID,
			&i.Role,
			&i.Status,
			&i.JoinDate,
			&i.EndDate,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCampaignContactsByDateRange = `-- name: ListCampaignContactsByDateRange :many
SELECT id, campaign_id, contact_id, role, status, join_date, end_date, is_active, created_at, updated_at FROM campaign_contacts 
WHERE join_date >= $1 AND join_date <= $2 
ORDER BY join_date DESC
`

type ListCampaignContactsByDateRangeParams struct {
	JoinDate   sql.NullTime `json:"join_date"`
	JoinDate_2 sql.NullTime `json:"join_date_2"`
}

func (q *Queries) ListCampaignContactsByDateRange(ctx context.Context, arg ListCampaignContactsByDateRangeParams) ([]CampaignContact, error) {
	rows, err := q.db.QueryContext(ctx, ListCampaignContactsByDateRange, arg.JoinDate, arg.JoinDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignContact{}
	for rows.Next() {
		var i CampaignContact
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.ContactID,
			&i.Role,
			&i.Status,
			&i.JoinDate,
			&i.EndDate,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCampaignContactsByRole = `-- name: ListCampaignContactsByRole :many
SELECT id, campaign_id, contact_id, role, status, join_date, end_date, is_active, created_at, updated_at FROM campaign_contacts 
WHERE role = $1 
ORDER BY join_date DESC
`

func (q *Queries) ListCampaignContactsByRole(ctx context.Context, role string) ([]CampaignContact, error) {
	rows, err := q.db.QueryContext(ctx, ListCampaignContactsByRole, role)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignContact{}
	for rows.Next() {
		var i CampaignContact
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.ContactID,
			&i.Role,
			&i.Status,
			&i.JoinDate,
			&i.EndDate,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCampaignContactsByStatus = `-- name: ListCampaignContactsByStatus :many
SELECT id, campaign_id, contact_id, role, status, join_date, end_date, is_active, created_at, updated_at FROM campaign_contacts 
WHERE status = $1 
ORDER BY join_date DESC
`

func (q *Queries) ListCampaignContactsByStatus(ctx context.Context, status sql.NullString) ([]CampaignContact, error) {
	rows, err := q.db.QueryContext(ctx, ListCampaignContactsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignContact{}
	for rows.Next() {
		var i CampaignContact
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.ContactID,
			&i.Role,
			&i.Status,
			&i.JoinDate,
			&i.EndDate,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchCampaignContacts = `-- name: SearchCampaignContacts :many
SELECT cc.id, cc.campaign_id, cc.contact_id, cc.role, cc.status, cc.join_date, cc.end_date, cc.is_active, cc.created_at, cc.updated_at FROM campaign_contacts cc
JOIN contacts c ON cc.contact_id = c.id
WHERE (c.first_name ILIKE $1 OR c.last_name ILIKE $1 OR c.organization_name ILIKE $1)
ORDER BY cc.join_date DESC
`

func (q *Queries) SearchCampaignContacts(ctx context.Context, firstName sql.NullString) ([]CampaignContact, error) {
	rows, err := q.db.QueryContext(ctx, SearchCampaignContacts, firstName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignContact{}
	for rows.Next() {
		var i CampaignContact
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.ContactID,
			&i.Role,
			&i.Status,
			&i.JoinDate,
			&i.EndDate,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateCampaignContact = `-- name: UpdateCampaignContact :one
UPDATE campaign_contacts SET
    campaign_id = $2, contact_id = $3, role = $4, status = $5,
    join_date = $6, end_date = $7, is_active = $8, updated_at = NOW()
WHERE id = $1 RETURNING id, campaign_id, contact_id, role, status, join_date, end_date, is_active, created_at, updated_at
`

type UpdateCampaignContactParams struct {
	ID         uuid.UUID      `json:"id"`
	CampaignID uuid.UUID      `json:"campaign_id"`
	ContactID  uuid.UUID      `json:"contact_id"`
	Role       string         `json:"role"`
	Status     sql.NullString `json:"status"`
	JoinDate   sql.NullTime   `json:"join_date"`
	EndDate    sql.NullTime   `json:"end_date"`
	IsActive   sql.NullBool   `json:"is_active"`
}

func (q *Queries) UpdateCampaignContact(ctx context.Context, arg UpdateCampaignContactParams) (CampaignContact, error) {
	row := q.db.QueryRowContext(ctx, UpdateCampaignContact,
		arg.ID,
		arg.CampaignID,
		arg.ContactID,
		arg.Role,
		arg.Status,
		arg.JoinDate,
		arg.EndDate,
		arg.IsActive,
	)
	var i CampaignContact
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.ContactID,
		&i.Role,
		&i.Status,
		&i.JoinDate,
		&i.EndDate,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateCampaignContactRole = `-- name: UpdateCampaignContactRole :exec
UPDATE campaign_contacts SET role = $2, updated_at = NOW() WHERE id = $1
`

type UpdateCampaignContactRoleParams struct {
	ID   uuid.UUID `json:"id"`
	Role string    `json:"role"`
}

func (q *Queries) UpdateCampaignContactRole(ctx context.Context, arg UpdateCampaignContactRoleParams) error {
	_, err := q.db.ExecContext(ctx, UpdateCampaignContactRole, arg.ID, arg.Role)
	return err
}

const UpdateCampaignContactStatus = `-- name: UpdateCampaignContactStatus :exec
UPDATE campaign_contacts SET status = $2, updated_at = NOW() WHERE id = $1
`

type UpdateCampaignContactStatusParams struct {
	ID     uuid.UUID      `json:"id"`
	Status sql.NullString `json:"status"`
}

func (q *Queries) UpdateCampaignContactStatus(ctx context.Context, arg UpdateCampaignContactStatusParams) error {
	_, err := q.db.ExecContext(ctx, UpdateCampaignContactStatus, arg.ID, arg.Status)
	return err
}
