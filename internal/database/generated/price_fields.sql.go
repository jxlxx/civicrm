// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: price_fields.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const CountPriceFields = `-- name: CountPriceFields :one
SELECT COUNT(*) FROM price_fields WHERE price_set_id = $1
`

func (q *Queries) CountPriceFields(ctx context.Context, priceSetID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountPriceFields, priceSetID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountPriceFieldsByType = `-- name: CountPriceFieldsByType :one
SELECT COUNT(*) FROM price_fields 
WHERE html_type = $1 AND is_active = $2
`

type CountPriceFieldsByTypeParams struct {
	HtmlType string       `json:"html_type"`
	IsActive sql.NullBool `json:"is_active"`
}

func (q *Queries) CountPriceFieldsByType(ctx context.Context, arg CountPriceFieldsByTypeParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountPriceFieldsByType, arg.HtmlType, arg.IsActive)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreatePriceField = `-- name: CreatePriceField :one
INSERT INTO price_fields (
    price_set_id, name, label, html_type, price, is_required,
    is_display_amounts, weight, help_pre, help_post, options_per_line,
    is_active, is_enter_qty, default_value
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14
) RETURNING id, price_set_id, name, label, html_type, price, is_required, is_display_amounts, weight, help_pre, help_post, options_per_line, is_active, is_enter_qty, default_value, created_at, updated_at
`

type CreatePriceFieldParams struct {
	PriceSetID       uuid.UUID      `json:"price_set_id"`
	Name             string         `json:"name"`
	Label            string         `json:"label"`
	HtmlType         string         `json:"html_type"`
	Price            sql.NullString `json:"price"`
	IsRequired       sql.NullBool   `json:"is_required"`
	IsDisplayAmounts sql.NullBool   `json:"is_display_amounts"`
	Weight           sql.NullInt32  `json:"weight"`
	HelpPre          sql.NullString `json:"help_pre"`
	HelpPost         sql.NullString `json:"help_post"`
	OptionsPerLine   sql.NullInt32  `json:"options_per_line"`
	IsActive         sql.NullBool   `json:"is_active"`
	IsEnterQty       sql.NullBool   `json:"is_enter_qty"`
	DefaultValue     sql.NullString `json:"default_value"`
}

func (q *Queries) CreatePriceField(ctx context.Context, arg CreatePriceFieldParams) (PriceField, error) {
	row := q.db.QueryRowContext(ctx, CreatePriceField,
		arg.PriceSetID,
		arg.Name,
		arg.Label,
		arg.HtmlType,
		arg.Price,
		arg.IsRequired,
		arg.IsDisplayAmounts,
		arg.Weight,
		arg.HelpPre,
		arg.HelpPost,
		arg.OptionsPerLine,
		arg.IsActive,
		arg.IsEnterQty,
		arg.DefaultValue,
	)
	var i PriceField
	err := row.Scan(
		&i.ID,
		&i.PriceSetID,
		&i.Name,
		&i.Label,
		&i.HtmlType,
		&i.Price,
		&i.IsRequired,
		&i.IsDisplayAmounts,
		&i.Weight,
		&i.HelpPre,
		&i.HelpPost,
		&i.OptionsPerLine,
		&i.IsActive,
		&i.IsEnterQty,
		&i.DefaultValue,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeletePriceField = `-- name: DeletePriceField :exec
DELETE FROM price_fields WHERE id = $1
`

func (q *Queries) DeletePriceField(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeletePriceField, id)
	return err
}

const GetPriceField = `-- name: GetPriceField :one
SELECT id, price_set_id, name, label, html_type, price, is_required, is_display_amounts, weight, help_pre, help_post, options_per_line, is_active, is_enter_qty, default_value, created_at, updated_at FROM price_fields WHERE id = $1
`

func (q *Queries) GetPriceField(ctx context.Context, id uuid.UUID) (PriceField, error) {
	row := q.db.QueryRowContext(ctx, GetPriceField, id)
	var i PriceField
	err := row.Scan(
		&i.ID,
		&i.PriceSetID,
		&i.Name,
		&i.Label,
		&i.HtmlType,
		&i.Price,
		&i.IsRequired,
		&i.IsDisplayAmounts,
		&i.Weight,
		&i.HelpPre,
		&i.HelpPost,
		&i.OptionsPerLine,
		&i.IsActive,
		&i.IsEnterQty,
		&i.DefaultValue,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetPriceFieldByName = `-- name: GetPriceFieldByName :one
SELECT id, price_set_id, name, label, html_type, price, is_required, is_display_amounts, weight, help_pre, help_post, options_per_line, is_active, is_enter_qty, default_value, created_at, updated_at FROM price_fields WHERE name = $1 AND price_set_id = $2
`

type GetPriceFieldByNameParams struct {
	Name       string    `json:"name"`
	PriceSetID uuid.UUID `json:"price_set_id"`
}

func (q *Queries) GetPriceFieldByName(ctx context.Context, arg GetPriceFieldByNameParams) (PriceField, error) {
	row := q.db.QueryRowContext(ctx, GetPriceFieldByName, arg.Name, arg.PriceSetID)
	var i PriceField
	err := row.Scan(
		&i.ID,
		&i.PriceSetID,
		&i.Name,
		&i.Label,
		&i.HtmlType,
		&i.Price,
		&i.IsRequired,
		&i.IsDisplayAmounts,
		&i.Weight,
		&i.HelpPre,
		&i.HelpPost,
		&i.OptionsPerLine,
		&i.IsActive,
		&i.IsEnterQty,
		&i.DefaultValue,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListActivePriceFields = `-- name: ListActivePriceFields :many
SELECT id, price_set_id, name, label, html_type, price, is_required, is_display_amounts, weight, help_pre, help_post, options_per_line, is_active, is_enter_qty, default_value, created_at, updated_at FROM price_fields 
WHERE is_active = TRUE 
ORDER BY weight, name
`

func (q *Queries) ListActivePriceFields(ctx context.Context) ([]PriceField, error) {
	rows, err := q.db.QueryContext(ctx, ListActivePriceFields)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PriceField{}
	for rows.Next() {
		var i PriceField
		if err := rows.Scan(
			&i.ID,
			&i.PriceSetID,
			&i.Name,
			&i.Label,
			&i.HtmlType,
			&i.Price,
			&i.IsRequired,
			&i.IsDisplayAmounts,
			&i.Weight,
			&i.HelpPre,
			&i.HelpPost,
			&i.OptionsPerLine,
			&i.IsActive,
			&i.IsEnterQty,
			&i.DefaultValue,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListPriceFields = `-- name: ListPriceFields :many
SELECT id, price_set_id, name, label, html_type, price, is_required, is_display_amounts, weight, help_pre, help_post, options_per_line, is_active, is_enter_qty, default_value, created_at, updated_at FROM price_fields 
WHERE price_set_id = $1 
ORDER BY weight, name
`

func (q *Queries) ListPriceFields(ctx context.Context, priceSetID uuid.UUID) ([]PriceField, error) {
	rows, err := q.db.QueryContext(ctx, ListPriceFields, priceSetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PriceField{}
	for rows.Next() {
		var i PriceField
		if err := rows.Scan(
			&i.ID,
			&i.PriceSetID,
			&i.Name,
			&i.Label,
			&i.HtmlType,
			&i.Price,
			&i.IsRequired,
			&i.IsDisplayAmounts,
			&i.Weight,
			&i.HelpPre,
			&i.HelpPost,
			&i.OptionsPerLine,
			&i.IsActive,
			&i.IsEnterQty,
			&i.DefaultValue,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListPriceFieldsBySet = `-- name: ListPriceFieldsBySet :many
SELECT id, price_set_id, name, label, html_type, price, is_required, is_display_amounts, weight, help_pre, help_post, options_per_line, is_active, is_enter_qty, default_value, created_at, updated_at FROM price_fields 
WHERE price_set_id = $1 AND is_active = $2
ORDER BY weight, name
`

type ListPriceFieldsBySetParams struct {
	PriceSetID uuid.UUID    `json:"price_set_id"`
	IsActive   sql.NullBool `json:"is_active"`
}

func (q *Queries) ListPriceFieldsBySet(ctx context.Context, arg ListPriceFieldsBySetParams) ([]PriceField, error) {
	rows, err := q.db.QueryContext(ctx, ListPriceFieldsBySet, arg.PriceSetID, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PriceField{}
	for rows.Next() {
		var i PriceField
		if err := rows.Scan(
			&i.ID,
			&i.PriceSetID,
			&i.Name,
			&i.Label,
			&i.HtmlType,
			&i.Price,
			&i.IsRequired,
			&i.IsDisplayAmounts,
			&i.Weight,
			&i.HelpPre,
			&i.HelpPost,
			&i.OptionsPerLine,
			&i.IsActive,
			&i.IsEnterQty,
			&i.DefaultValue,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListPriceFieldsByType = `-- name: ListPriceFieldsByType :many
SELECT id, price_set_id, name, label, html_type, price, is_required, is_display_amounts, weight, help_pre, help_post, options_per_line, is_active, is_enter_qty, default_value, created_at, updated_at FROM price_fields 
WHERE html_type = $1 AND is_active = $2
ORDER BY weight, name
`

type ListPriceFieldsByTypeParams struct {
	HtmlType string       `json:"html_type"`
	IsActive sql.NullBool `json:"is_active"`
}

func (q *Queries) ListPriceFieldsByType(ctx context.Context, arg ListPriceFieldsByTypeParams) ([]PriceField, error) {
	rows, err := q.db.QueryContext(ctx, ListPriceFieldsByType, arg.HtmlType, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PriceField{}
	for rows.Next() {
		var i PriceField
		if err := rows.Scan(
			&i.ID,
			&i.PriceSetID,
			&i.Name,
			&i.Label,
			&i.HtmlType,
			&i.Price,
			&i.IsRequired,
			&i.IsDisplayAmounts,
			&i.Weight,
			&i.HelpPre,
			&i.HelpPost,
			&i.OptionsPerLine,
			&i.IsActive,
			&i.IsEnterQty,
			&i.DefaultValue,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchPriceFields = `-- name: SearchPriceFields :many
SELECT id, price_set_id, name, label, html_type, price, is_required, is_display_amounts, weight, help_pre, help_post, options_per_line, is_active, is_enter_qty, default_value, created_at, updated_at FROM price_fields 
WHERE (name ILIKE $1 OR label ILIKE $1)
AND price_set_id = $2
ORDER BY weight, name
`

type SearchPriceFieldsParams struct {
	Name       string    `json:"name"`
	PriceSetID uuid.UUID `json:"price_set_id"`
}

func (q *Queries) SearchPriceFields(ctx context.Context, arg SearchPriceFieldsParams) ([]PriceField, error) {
	rows, err := q.db.QueryContext(ctx, SearchPriceFields, arg.Name, arg.PriceSetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PriceField{}
	for rows.Next() {
		var i PriceField
		if err := rows.Scan(
			&i.ID,
			&i.PriceSetID,
			&i.Name,
			&i.Label,
			&i.HtmlType,
			&i.Price,
			&i.IsRequired,
			&i.IsDisplayAmounts,
			&i.Weight,
			&i.HelpPre,
			&i.HelpPost,
			&i.OptionsPerLine,
			&i.IsActive,
			&i.IsEnterQty,
			&i.DefaultValue,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdatePriceField = `-- name: UpdatePriceField :one
UPDATE price_fields SET
    price_set_id = $2, name = $3, label = $4, html_type = $5, price = $6,
    is_required = $7, is_display_amounts = $8, weight = $9, help_pre = $10,
    help_post = $11, options_per_line = $12, is_active = $13, 
    is_enter_qty = $14, default_value = $15, updated_at = NOW()
WHERE id = $1 RETURNING id, price_set_id, name, label, html_type, price, is_required, is_display_amounts, weight, help_pre, help_post, options_per_line, is_active, is_enter_qty, default_value, created_at, updated_at
`

type UpdatePriceFieldParams struct {
	ID               uuid.UUID      `json:"id"`
	PriceSetID       uuid.UUID      `json:"price_set_id"`
	Name             string         `json:"name"`
	Label            string         `json:"label"`
	HtmlType         string         `json:"html_type"`
	Price            sql.NullString `json:"price"`
	IsRequired       sql.NullBool   `json:"is_required"`
	IsDisplayAmounts sql.NullBool   `json:"is_display_amounts"`
	Weight           sql.NullInt32  `json:"weight"`
	HelpPre          sql.NullString `json:"help_pre"`
	HelpPost         sql.NullString `json:"help_post"`
	OptionsPerLine   sql.NullInt32  `json:"options_per_line"`
	IsActive         sql.NullBool   `json:"is_active"`
	IsEnterQty       sql.NullBool   `json:"is_enter_qty"`
	DefaultValue     sql.NullString `json:"default_value"`
}

func (q *Queries) UpdatePriceField(ctx context.Context, arg UpdatePriceFieldParams) (PriceField, error) {
	row := q.db.QueryRowContext(ctx, UpdatePriceField,
		arg.ID,
		arg.PriceSetID,
		arg.Name,
		arg.Label,
		arg.HtmlType,
		arg.Price,
		arg.IsRequired,
		arg.IsDisplayAmounts,
		arg.Weight,
		arg.HelpPre,
		arg.HelpPost,
		arg.OptionsPerLine,
		arg.IsActive,
		arg.IsEnterQty,
		arg.DefaultValue,
	)
	var i PriceField
	err := row.Scan(
		&i.ID,
		&i.PriceSetID,
		&i.Name,
		&i.Label,
		&i.HtmlType,
		&i.Price,
		&i.IsRequired,
		&i.IsDisplayAmounts,
		&i.Weight,
		&i.HelpPre,
		&i.HelpPost,
		&i.OptionsPerLine,
		&i.IsActive,
		&i.IsEnterQty,
		&i.DefaultValue,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
