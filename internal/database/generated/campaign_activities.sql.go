// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: campaign_activities.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const CreateCampaignActivity = `-- name: CreateCampaignActivity :one
INSERT INTO campaign_activities (
    campaign_id, activity_id, is_deleted
) VALUES (
    $1, $2, $3
) RETURNING id, campaign_id, activity_id, is_deleted, created_at, updated_at
`

type CreateCampaignActivityParams struct {
	CampaignID uuid.UUID    `json:"campaign_id"`
	ActivityID uuid.UUID    `json:"activity_id"`
	IsDeleted  sql.NullBool `json:"is_deleted"`
}

func (q *Queries) CreateCampaignActivity(ctx context.Context, arg CreateCampaignActivityParams) (CampaignActivity, error) {
	row := q.db.QueryRowContext(ctx, CreateCampaignActivity, arg.CampaignID, arg.ActivityID, arg.IsDeleted)
	var i CampaignActivity
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.ActivityID,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteCampaignActivity = `-- name: DeleteCampaignActivity :exec
UPDATE campaign_activities SET is_deleted = TRUE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) DeleteCampaignActivity(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteCampaignActivity, id)
	return err
}

const GetCampaignActivitiesByActivity = `-- name: GetCampaignActivitiesByActivity :one
SELECT id, campaign_id, activity_id, is_deleted, created_at, updated_at FROM campaign_activities WHERE activity_id = $1 AND is_deleted = FALSE
`

func (q *Queries) GetCampaignActivitiesByActivity(ctx context.Context, activityID uuid.UUID) (CampaignActivity, error) {
	row := q.db.QueryRowContext(ctx, GetCampaignActivitiesByActivity, activityID)
	var i CampaignActivity
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.ActivityID,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCampaignActivitiesByCampaign = `-- name: GetCampaignActivitiesByCampaign :many
SELECT id, campaign_id, activity_id, is_deleted, created_at, updated_at FROM campaign_activities 
WHERE campaign_id = $1 AND is_deleted = FALSE 
ORDER BY id DESC
`

func (q *Queries) GetCampaignActivitiesByCampaign(ctx context.Context, campaignID uuid.UUID) ([]CampaignActivity, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignActivitiesByCampaign, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignActivity{}
	for rows.Next() {
		var i CampaignActivity
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.ActivityID,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCampaignActivitiesWithDetails = `-- name: GetCampaignActivitiesWithDetails :many
SELECT 
    ca.id, ca.campaign_id, ca.activity_id, ca.is_deleted, ca.created_at, ca.updated_at,
    a.activity_type_id,
    a.subject,
    a.activity_date_time,
    a.duration,
    a.location,
    a.details,
    at.name as activity_type_name
FROM campaign_activities ca
JOIN activities a ON ca.activity_id = a.id
JOIN activity_types at ON a.activity_type_id = at.id
WHERE ca.campaign_id = $1 AND ca.is_deleted = FALSE 
ORDER BY a.activity_date_time DESC
`

type GetCampaignActivitiesWithDetailsRow struct {
	ID               uuid.UUID      `json:"id"`
	CampaignID       uuid.UUID      `json:"campaign_id"`
	ActivityID       uuid.UUID      `json:"activity_id"`
	IsDeleted        sql.NullBool   `json:"is_deleted"`
	CreatedAt        sql.NullTime   `json:"created_at"`
	UpdatedAt        sql.NullTime   `json:"updated_at"`
	ActivityTypeID   uuid.UUID      `json:"activity_type_id"`
	Subject          sql.NullString `json:"subject"`
	ActivityDateTime time.Time      `json:"activity_date_time"`
	Duration         sql.NullInt32  `json:"duration"`
	Location         sql.NullString `json:"location"`
	Details          sql.NullString `json:"details"`
	ActivityTypeName string         `json:"activity_type_name"`
}

func (q *Queries) GetCampaignActivitiesWithDetails(ctx context.Context, campaignID uuid.UUID) ([]GetCampaignActivitiesWithDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignActivitiesWithDetails, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCampaignActivitiesWithDetailsRow{}
	for rows.Next() {
		var i GetCampaignActivitiesWithDetailsRow
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.ActivityID,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ActivityTypeID,
			&i.Subject,
			&i.ActivityDateTime,
			&i.Duration,
			&i.Location,
			&i.Details,
			&i.ActivityTypeName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCampaignActivity = `-- name: GetCampaignActivity :one
SELECT id, campaign_id, activity_id, is_deleted, created_at, updated_at FROM campaign_activities WHERE id = $1 AND is_deleted = FALSE
`

func (q *Queries) GetCampaignActivity(ctx context.Context, id uuid.UUID) (CampaignActivity, error) {
	row := q.db.QueryRowContext(ctx, GetCampaignActivity, id)
	var i CampaignActivity
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.ActivityID,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCampaignActivityCount = `-- name: GetCampaignActivityCount :one
SELECT COUNT(*) FROM campaign_activities WHERE campaign_id = $1 AND is_deleted = FALSE
`

func (q *Queries) GetCampaignActivityCount(ctx context.Context, campaignID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, GetCampaignActivityCount, campaignID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const GetCampaignActivityStats = `-- name: GetCampaignActivityStats :many
SELECT 
    at.name as activity_type,
    COUNT(ca.id) as activity_count
FROM campaign_activities ca
JOIN activities a ON ca.activity_id = a.id
JOIN activity_types at ON a.activity_type_id = at.id
WHERE ca.campaign_id = $1 AND ca.is_deleted = FALSE
GROUP BY at.name
ORDER BY at.name
`

type GetCampaignActivityStatsRow struct {
	ActivityType  string `json:"activity_type"`
	ActivityCount int64  `json:"activity_count"`
}

func (q *Queries) GetCampaignActivityStats(ctx context.Context, campaignID uuid.UUID) ([]GetCampaignActivityStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignActivityStats, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCampaignActivityStatsRow{}
	for rows.Next() {
		var i GetCampaignActivityStatsRow
		if err := rows.Scan(&i.ActivityType, &i.ActivityCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCampaignTimeline = `-- name: GetCampaignTimeline :many
SELECT 
    ca.id as campaign_activity_id,
    a.activity_date_time,
    a.subject,
    a.details,
    at.name as activity_type,
    c.first_name, c.last_name
FROM campaign_activities ca
JOIN activities a ON ca.activity_id = a.id
JOIN activity_types at ON a.activity_type_id = at.id
LEFT JOIN activity_contacts ac ON a.id = ac.activity_id AND ac.record_type = 'Activity'
LEFT JOIN contacts c ON ac.contact_id = c.id
WHERE ca.campaign_id = $1 AND ca.is_deleted = FALSE
ORDER BY a.activity_date_time DESC
`

type GetCampaignTimelineRow struct {
	CampaignActivityID uuid.UUID      `json:"campaign_activity_id"`
	ActivityDateTime   time.Time      `json:"activity_date_time"`
	Subject            sql.NullString `json:"subject"`
	Details            sql.NullString `json:"details"`
	ActivityType       string         `json:"activity_type"`
	FirstName          sql.NullString `json:"first_name"`
	LastName           sql.NullString `json:"last_name"`
}

func (q *Queries) GetCampaignTimeline(ctx context.Context, campaignID uuid.UUID) ([]GetCampaignTimelineRow, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignTimeline, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCampaignTimelineRow{}
	for rows.Next() {
		var i GetCampaignTimelineRow
		if err := rows.Scan(
			&i.CampaignActivityID,
			&i.ActivityDateTime,
			&i.Subject,
			&i.Details,
			&i.ActivityType,
			&i.FirstName,
			&i.LastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const HardDeleteCampaignActivity = `-- name: HardDeleteCampaignActivity :exec
DELETE FROM campaign_activities WHERE id = $1
`

func (q *Queries) HardDeleteCampaignActivity(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, HardDeleteCampaignActivity, id)
	return err
}

const ListCampaignActivities = `-- name: ListCampaignActivities :many
SELECT id, campaign_id, activity_id, is_deleted, created_at, updated_at FROM campaign_activities 
WHERE is_deleted = FALSE 
ORDER BY id DESC
`

func (q *Queries) ListCampaignActivities(ctx context.Context) ([]CampaignActivity, error) {
	rows, err := q.db.QueryContext(ctx, ListCampaignActivities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignActivity{}
	for rows.Next() {
		var i CampaignActivity
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.ActivityID,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCampaignActivitiesByDateRange = `-- name: ListCampaignActivitiesByDateRange :many
SELECT ca.id, ca.campaign_id, ca.activity_id, ca.is_deleted, ca.created_at, ca.updated_at FROM campaign_activities ca
JOIN activities a ON ca.activity_id = a.id
WHERE a.activity_date_time >= $1 AND a.activity_date_time <= $2 
AND ca.is_deleted = FALSE 
ORDER BY a.activity_date_time DESC
`

type ListCampaignActivitiesByDateRangeParams struct {
	ActivityDateTime   time.Time `json:"activity_date_time"`
	ActivityDateTime_2 time.Time `json:"activity_date_time_2"`
}

func (q *Queries) ListCampaignActivitiesByDateRange(ctx context.Context, arg ListCampaignActivitiesByDateRangeParams) ([]CampaignActivity, error) {
	rows, err := q.db.QueryContext(ctx, ListCampaignActivitiesByDateRange, arg.ActivityDateTime, arg.ActivityDateTime_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignActivity{}
	for rows.Next() {
		var i CampaignActivity
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.ActivityID,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCampaignActivitiesByType = `-- name: ListCampaignActivitiesByType :many
SELECT ca.id, ca.campaign_id, ca.activity_id, ca.is_deleted, ca.created_at, ca.updated_at FROM campaign_activities ca
JOIN activities a ON ca.activity_id = a.id
WHERE a.activity_type_id = $1 AND ca.is_deleted = FALSE 
ORDER BY a.activity_date_time DESC
`

func (q *Queries) ListCampaignActivitiesByType(ctx context.Context, activityTypeID uuid.UUID) ([]CampaignActivity, error) {
	rows, err := q.db.QueryContext(ctx, ListCampaignActivitiesByType, activityTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignActivity{}
	for rows.Next() {
		var i CampaignActivity
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.ActivityID,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchCampaignActivities = `-- name: SearchCampaignActivities :many
SELECT ca.id, ca.campaign_id, ca.activity_id, ca.is_deleted, ca.created_at, ca.updated_at FROM campaign_activities ca
JOIN activities a ON ca.activity_id = a.id
WHERE (a.subject ILIKE $1 OR a.details ILIKE $1) 
AND ca.is_deleted = FALSE 
ORDER BY a.activity_date_time DESC
`

func (q *Queries) SearchCampaignActivities(ctx context.Context, subject sql.NullString) ([]CampaignActivity, error) {
	rows, err := q.db.QueryContext(ctx, SearchCampaignActivities, subject)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignActivity{}
	for rows.Next() {
		var i CampaignActivity
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.ActivityID,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateCampaignActivity = `-- name: UpdateCampaignActivity :one
UPDATE campaign_activities SET
    campaign_id = $2, activity_id = $3, is_deleted = $4, updated_at = NOW()
WHERE id = $1 RETURNING id, campaign_id, activity_id, is_deleted, created_at, updated_at
`

type UpdateCampaignActivityParams struct {
	ID         uuid.UUID    `json:"id"`
	CampaignID uuid.UUID    `json:"campaign_id"`
	ActivityID uuid.UUID    `json:"activity_id"`
	IsDeleted  sql.NullBool `json:"is_deleted"`
}

func (q *Queries) UpdateCampaignActivity(ctx context.Context, arg UpdateCampaignActivityParams) (CampaignActivity, error) {
	row := q.db.QueryRowContext(ctx, UpdateCampaignActivity,
		arg.ID,
		arg.CampaignID,
		arg.ActivityID,
		arg.IsDeleted,
	)
	var i CampaignActivity
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.ActivityID,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
