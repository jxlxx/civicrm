// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: activity_contacts.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const CountActivityContacts = `-- name: CountActivityContacts :one
SELECT COUNT(*) FROM activity_contacts WHERE is_deleted = FALSE
`

func (q *Queries) CountActivityContacts(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountActivityContacts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountActivityContactsByActivity = `-- name: CountActivityContactsByActivity :one
SELECT COUNT(*) FROM activity_contacts 
WHERE activity_id = $1 AND is_deleted = FALSE
`

func (q *Queries) CountActivityContactsByActivity(ctx context.Context, activityID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountActivityContactsByActivity, activityID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountActivityContactsByContact = `-- name: CountActivityContactsByContact :one
SELECT COUNT(*) FROM activity_contacts 
WHERE contact_id = $1 AND is_deleted = FALSE
`

func (q *Queries) CountActivityContactsByContact(ctx context.Context, contactID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountActivityContactsByContact, contactID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountActivityContactsByRole = `-- name: CountActivityContactsByRole :one
SELECT COUNT(*) FROM activity_contacts 
WHERE role = $1 AND is_deleted = FALSE
`

func (q *Queries) CountActivityContactsByRole(ctx context.Context, role sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountActivityContactsByRole, role)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateActivityContact = `-- name: CreateActivityContact :one
INSERT INTO activity_contacts (
    activity_id, contact_id, record_type_id, role, is_deleted
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, activity_id, contact_id, record_type_id, role, is_deleted, created_at, updated_at
`

type CreateActivityContactParams struct {
	ActivityID   uuid.UUID      `json:"activity_id"`
	ContactID    uuid.UUID      `json:"contact_id"`
	RecordTypeID uuid.NullUUID  `json:"record_type_id"`
	Role         sql.NullString `json:"role"`
	IsDeleted    sql.NullBool   `json:"is_deleted"`
}

func (q *Queries) CreateActivityContact(ctx context.Context, arg CreateActivityContactParams) (ActivityContact, error) {
	row := q.db.QueryRowContext(ctx, CreateActivityContact,
		arg.ActivityID,
		arg.ContactID,
		arg.RecordTypeID,
		arg.Role,
		arg.IsDeleted,
	)
	var i ActivityContact
	err := row.Scan(
		&i.ID,
		&i.ActivityID,
		&i.ContactID,
		&i.RecordTypeID,
		&i.Role,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteActivityContact = `-- name: DeleteActivityContact :exec
UPDATE activity_contacts SET is_deleted = TRUE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) DeleteActivityContact(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteActivityContact, id)
	return err
}

const GetActivityContact = `-- name: GetActivityContact :one
SELECT id, activity_id, contact_id, record_type_id, role, is_deleted, created_at, updated_at FROM activity_contacts WHERE id = $1
`

func (q *Queries) GetActivityContact(ctx context.Context, id uuid.UUID) (ActivityContact, error) {
	row := q.db.QueryRowContext(ctx, GetActivityContact, id)
	var i ActivityContact
	err := row.Scan(
		&i.ID,
		&i.ActivityID,
		&i.ContactID,
		&i.RecordTypeID,
		&i.Role,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetActivityContactsByActivity = `-- name: GetActivityContactsByActivity :many
SELECT id, activity_id, contact_id, record_type_id, role, is_deleted, created_at, updated_at FROM activity_contacts 
WHERE activity_id = $1 AND is_deleted = FALSE
ORDER BY id
`

func (q *Queries) GetActivityContactsByActivity(ctx context.Context, activityID uuid.UUID) ([]ActivityContact, error) {
	rows, err := q.db.QueryContext(ctx, GetActivityContactsByActivity, activityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActivityContact{}
	for rows.Next() {
		var i ActivityContact
		if err := rows.Scan(
			&i.ID,
			&i.ActivityID,
			&i.ContactID,
			&i.RecordTypeID,
			&i.Role,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetActivityContactsByContact = `-- name: GetActivityContactsByContact :many
SELECT id, activity_id, contact_id, record_type_id, role, is_deleted, created_at, updated_at FROM activity_contacts 
WHERE contact_id = $1 AND is_deleted = FALSE
ORDER BY id
`

func (q *Queries) GetActivityContactsByContact(ctx context.Context, contactID uuid.UUID) ([]ActivityContact, error) {
	rows, err := q.db.QueryContext(ctx, GetActivityContactsByContact, contactID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActivityContact{}
	for rows.Next() {
		var i ActivityContact
		if err := rows.Scan(
			&i.ID,
			&i.ActivityID,
			&i.ContactID,
			&i.RecordTypeID,
			&i.Role,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetActivityContactsByRecordType = `-- name: GetActivityContactsByRecordType :many
SELECT id, activity_id, contact_id, record_type_id, role, is_deleted, created_at, updated_at FROM activity_contacts 
WHERE record_type_id = $1 AND is_deleted = FALSE
ORDER BY id
`

func (q *Queries) GetActivityContactsByRecordType(ctx context.Context, recordTypeID uuid.NullUUID) ([]ActivityContact, error) {
	rows, err := q.db.QueryContext(ctx, GetActivityContactsByRecordType, recordTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActivityContact{}
	for rows.Next() {
		var i ActivityContact
		if err := rows.Scan(
			&i.ID,
			&i.ActivityID,
			&i.ContactID,
			&i.RecordTypeID,
			&i.Role,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetActivityContactsByRole = `-- name: GetActivityContactsByRole :many
SELECT id, activity_id, contact_id, record_type_id, role, is_deleted, created_at, updated_at FROM activity_contacts 
WHERE role = $1 AND is_deleted = FALSE
ORDER BY id
`

func (q *Queries) GetActivityContactsByRole(ctx context.Context, role sql.NullString) ([]ActivityContact, error) {
	rows, err := q.db.QueryContext(ctx, GetActivityContactsByRole, role)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActivityContact{}
	for rows.Next() {
		var i ActivityContact
		if err := rows.Scan(
			&i.ID,
			&i.ActivityID,
			&i.ContactID,
			&i.RecordTypeID,
			&i.Role,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const HardDeleteActivityContact = `-- name: HardDeleteActivityContact :exec
DELETE FROM activity_contacts WHERE id = $1
`

func (q *Queries) HardDeleteActivityContact(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, HardDeleteActivityContact, id)
	return err
}

const ListAllActivityContacts = `-- name: ListAllActivityContacts :many
SELECT id, activity_id, contact_id, record_type_id, role, is_deleted, created_at, updated_at FROM activity_contacts 
WHERE is_deleted = FALSE
ORDER BY activity_id, id
`

func (q *Queries) ListAllActivityContacts(ctx context.Context) ([]ActivityContact, error) {
	rows, err := q.db.QueryContext(ctx, ListAllActivityContacts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActivityContact{}
	for rows.Next() {
		var i ActivityContact
		if err := rows.Scan(
			&i.ID,
			&i.ActivityID,
			&i.ContactID,
			&i.RecordTypeID,
			&i.Role,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchActivityContacts = `-- name: SearchActivityContacts :many
SELECT id, activity_id, contact_id, record_type_id, role, is_deleted, created_at, updated_at FROM activity_contacts 
WHERE role ILIKE $1 AND is_deleted = FALSE
ORDER BY activity_id, id
`

func (q *Queries) SearchActivityContacts(ctx context.Context, role sql.NullString) ([]ActivityContact, error) {
	rows, err := q.db.QueryContext(ctx, SearchActivityContacts, role)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActivityContact{}
	for rows.Next() {
		var i ActivityContact
		if err := rows.Scan(
			&i.ID,
			&i.ActivityID,
			&i.ContactID,
			&i.RecordTypeID,
			&i.Role,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateActivityContact = `-- name: UpdateActivityContact :one
UPDATE activity_contacts SET
    activity_id = $2, contact_id = $3, record_type_id = $4,
    role = $5, is_deleted = $6, updated_at = NOW()
WHERE id = $1 RETURNING id, activity_id, contact_id, record_type_id, role, is_deleted, created_at, updated_at
`

type UpdateActivityContactParams struct {
	ID           uuid.UUID      `json:"id"`
	ActivityID   uuid.UUID      `json:"activity_id"`
	ContactID    uuid.UUID      `json:"contact_id"`
	RecordTypeID uuid.NullUUID  `json:"record_type_id"`
	Role         sql.NullString `json:"role"`
	IsDeleted    sql.NullBool   `json:"is_deleted"`
}

func (q *Queries) UpdateActivityContact(ctx context.Context, arg UpdateActivityContactParams) (ActivityContact, error) {
	row := q.db.QueryRowContext(ctx, UpdateActivityContact,
		arg.ID,
		arg.ActivityID,
		arg.ContactID,
		arg.RecordTypeID,
		arg.Role,
		arg.IsDeleted,
	)
	var i ActivityContact
	err := row.Scan(
		&i.ID,
		&i.ActivityID,
		&i.ContactID,
		&i.RecordTypeID,
		&i.Role,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
