// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: price_field_values.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const CountPriceFieldValues = `-- name: CountPriceFieldValues :one
SELECT COUNT(*) FROM price_field_values WHERE price_field_id = $1
`

func (q *Queries) CountPriceFieldValues(ctx context.Context, priceFieldID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountPriceFieldValues, priceFieldID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountPriceFieldValuesByFinancialType = `-- name: CountPriceFieldValuesByFinancialType :one
SELECT COUNT(*) FROM price_field_values 
WHERE financial_type_id = $1 AND is_active = $2
`

type CountPriceFieldValuesByFinancialTypeParams struct {
	FinancialTypeID uuid.NullUUID `json:"financial_type_id"`
	IsActive        sql.NullBool  `json:"is_active"`
}

func (q *Queries) CountPriceFieldValuesByFinancialType(ctx context.Context, arg CountPriceFieldValuesByFinancialTypeParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountPriceFieldValuesByFinancialType, arg.FinancialTypeID, arg.IsActive)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreatePriceFieldValue = `-- name: CreatePriceFieldValue :one
INSERT INTO price_field_values (
    price_field_id, name, label, amount, weight, is_active,
    financial_type_id, membership_type_id, membership_num_terms, is_default
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id, price_field_id, name, label, amount, weight, is_active, financial_type_id, membership_type_id, membership_num_terms, is_default, created_at, updated_at
`

type CreatePriceFieldValueParams struct {
	PriceFieldID       uuid.UUID     `json:"price_field_id"`
	Name               string        `json:"name"`
	Label              string        `json:"label"`
	Amount             string        `json:"amount"`
	Weight             sql.NullInt32 `json:"weight"`
	IsActive           sql.NullBool  `json:"is_active"`
	FinancialTypeID    uuid.NullUUID `json:"financial_type_id"`
	MembershipTypeID   uuid.NullUUID `json:"membership_type_id"`
	MembershipNumTerms sql.NullInt32 `json:"membership_num_terms"`
	IsDefault          sql.NullBool  `json:"is_default"`
}

func (q *Queries) CreatePriceFieldValue(ctx context.Context, arg CreatePriceFieldValueParams) (PriceFieldValue, error) {
	row := q.db.QueryRowContext(ctx, CreatePriceFieldValue,
		arg.PriceFieldID,
		arg.Name,
		arg.Label,
		arg.Amount,
		arg.Weight,
		arg.IsActive,
		arg.FinancialTypeID,
		arg.MembershipTypeID,
		arg.MembershipNumTerms,
		arg.IsDefault,
	)
	var i PriceFieldValue
	err := row.Scan(
		&i.ID,
		&i.PriceFieldID,
		&i.Name,
		&i.Label,
		&i.Amount,
		&i.Weight,
		&i.IsActive,
		&i.FinancialTypeID,
		&i.MembershipTypeID,
		&i.MembershipNumTerms,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeletePriceFieldValue = `-- name: DeletePriceFieldValue :exec
DELETE FROM price_field_values WHERE id = $1
`

func (q *Queries) DeletePriceFieldValue(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeletePriceFieldValue, id)
	return err
}

const GetPriceFieldValue = `-- name: GetPriceFieldValue :one
SELECT id, price_field_id, name, label, amount, weight, is_active, financial_type_id, membership_type_id, membership_num_terms, is_default, created_at, updated_at FROM price_field_values WHERE id = $1
`

func (q *Queries) GetPriceFieldValue(ctx context.Context, id uuid.UUID) (PriceFieldValue, error) {
	row := q.db.QueryRowContext(ctx, GetPriceFieldValue, id)
	var i PriceFieldValue
	err := row.Scan(
		&i.ID,
		&i.PriceFieldID,
		&i.Name,
		&i.Label,
		&i.Amount,
		&i.Weight,
		&i.IsActive,
		&i.FinancialTypeID,
		&i.MembershipTypeID,
		&i.MembershipNumTerms,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetPriceFieldValueByName = `-- name: GetPriceFieldValueByName :one
SELECT id, price_field_id, name, label, amount, weight, is_active, financial_type_id, membership_type_id, membership_num_terms, is_default, created_at, updated_at FROM price_field_values WHERE name = $1 AND price_field_id = $2
`

type GetPriceFieldValueByNameParams struct {
	Name         string    `json:"name"`
	PriceFieldID uuid.UUID `json:"price_field_id"`
}

func (q *Queries) GetPriceFieldValueByName(ctx context.Context, arg GetPriceFieldValueByNameParams) (PriceFieldValue, error) {
	row := q.db.QueryRowContext(ctx, GetPriceFieldValueByName, arg.Name, arg.PriceFieldID)
	var i PriceFieldValue
	err := row.Scan(
		&i.ID,
		&i.PriceFieldID,
		&i.Name,
		&i.Label,
		&i.Amount,
		&i.Weight,
		&i.IsActive,
		&i.FinancialTypeID,
		&i.MembershipTypeID,
		&i.MembershipNumTerms,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListActivePriceFieldValues = `-- name: ListActivePriceFieldValues :many
SELECT id, price_field_id, name, label, amount, weight, is_active, financial_type_id, membership_type_id, membership_num_terms, is_default, created_at, updated_at FROM price_field_values 
WHERE is_active = TRUE 
ORDER BY weight, name
`

func (q *Queries) ListActivePriceFieldValues(ctx context.Context) ([]PriceFieldValue, error) {
	rows, err := q.db.QueryContext(ctx, ListActivePriceFieldValues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PriceFieldValue{}
	for rows.Next() {
		var i PriceFieldValue
		if err := rows.Scan(
			&i.ID,
			&i.PriceFieldID,
			&i.Name,
			&i.Label,
			&i.Amount,
			&i.Weight,
			&i.IsActive,
			&i.FinancialTypeID,
			&i.MembershipTypeID,
			&i.MembershipNumTerms,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListDefaultPriceFieldValues = `-- name: ListDefaultPriceFieldValues :many
SELECT id, price_field_id, name, label, amount, weight, is_active, financial_type_id, membership_type_id, membership_num_terms, is_default, created_at, updated_at FROM price_field_values 
WHERE is_default = TRUE AND is_active = $1
ORDER BY weight, name
`

func (q *Queries) ListDefaultPriceFieldValues(ctx context.Context, isActive sql.NullBool) ([]PriceFieldValue, error) {
	rows, err := q.db.QueryContext(ctx, ListDefaultPriceFieldValues, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PriceFieldValue{}
	for rows.Next() {
		var i PriceFieldValue
		if err := rows.Scan(
			&i.ID,
			&i.PriceFieldID,
			&i.Name,
			&i.Label,
			&i.Amount,
			&i.Weight,
			&i.IsActive,
			&i.FinancialTypeID,
			&i.MembershipTypeID,
			&i.MembershipNumTerms,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListPriceFieldValues = `-- name: ListPriceFieldValues :many
SELECT id, price_field_id, name, label, amount, weight, is_active, financial_type_id, membership_type_id, membership_num_terms, is_default, created_at, updated_at FROM price_field_values 
WHERE price_field_id = $1 
ORDER BY weight, name
`

func (q *Queries) ListPriceFieldValues(ctx context.Context, priceFieldID uuid.UUID) ([]PriceFieldValue, error) {
	rows, err := q.db.QueryContext(ctx, ListPriceFieldValues, priceFieldID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PriceFieldValue{}
	for rows.Next() {
		var i PriceFieldValue
		if err := rows.Scan(
			&i.ID,
			&i.PriceFieldID,
			&i.Name,
			&i.Label,
			&i.Amount,
			&i.Weight,
			&i.IsActive,
			&i.FinancialTypeID,
			&i.MembershipTypeID,
			&i.MembershipNumTerms,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListPriceFieldValuesByFinancialType = `-- name: ListPriceFieldValuesByFinancialType :many
SELECT id, price_field_id, name, label, amount, weight, is_active, financial_type_id, membership_type_id, membership_num_terms, is_default, created_at, updated_at FROM price_field_values 
WHERE financial_type_id = $1 AND is_active = $2
ORDER BY weight, name
`

type ListPriceFieldValuesByFinancialTypeParams struct {
	FinancialTypeID uuid.NullUUID `json:"financial_type_id"`
	IsActive        sql.NullBool  `json:"is_active"`
}

func (q *Queries) ListPriceFieldValuesByFinancialType(ctx context.Context, arg ListPriceFieldValuesByFinancialTypeParams) ([]PriceFieldValue, error) {
	rows, err := q.db.QueryContext(ctx, ListPriceFieldValuesByFinancialType, arg.FinancialTypeID, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PriceFieldValue{}
	for rows.Next() {
		var i PriceFieldValue
		if err := rows.Scan(
			&i.ID,
			&i.PriceFieldID,
			&i.Name,
			&i.Label,
			&i.Amount,
			&i.Weight,
			&i.IsActive,
			&i.FinancialTypeID,
			&i.MembershipTypeID,
			&i.MembershipNumTerms,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchPriceFieldValues = `-- name: SearchPriceFieldValues :many
SELECT id, price_field_id, name, label, amount, weight, is_active, financial_type_id, membership_type_id, membership_num_terms, is_default, created_at, updated_at FROM price_field_values 
WHERE (name ILIKE $1 OR label ILIKE $1)
AND price_field_id = $2
ORDER BY weight, name
`

type SearchPriceFieldValuesParams struct {
	Name         string    `json:"name"`
	PriceFieldID uuid.UUID `json:"price_field_id"`
}

func (q *Queries) SearchPriceFieldValues(ctx context.Context, arg SearchPriceFieldValuesParams) ([]PriceFieldValue, error) {
	rows, err := q.db.QueryContext(ctx, SearchPriceFieldValues, arg.Name, arg.PriceFieldID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PriceFieldValue{}
	for rows.Next() {
		var i PriceFieldValue
		if err := rows.Scan(
			&i.ID,
			&i.PriceFieldID,
			&i.Name,
			&i.Label,
			&i.Amount,
			&i.Weight,
			&i.IsActive,
			&i.FinancialTypeID,
			&i.MembershipTypeID,
			&i.MembershipNumTerms,
			&i.IsDefault,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdatePriceFieldValue = `-- name: UpdatePriceFieldValue :one
UPDATE price_field_values SET
    price_field_id = $2, name = $3, label = $4, amount = $5, weight = $6,
    is_active = $7, financial_type_id = $8, membership_type_id = $9,
    membership_num_terms = $10, is_default = $11, updated_at = NOW()
WHERE id = $1 RETURNING id, price_field_id, name, label, amount, weight, is_active, financial_type_id, membership_type_id, membership_num_terms, is_default, created_at, updated_at
`

type UpdatePriceFieldValueParams struct {
	ID                 uuid.UUID     `json:"id"`
	PriceFieldID       uuid.UUID     `json:"price_field_id"`
	Name               string        `json:"name"`
	Label              string        `json:"label"`
	Amount             string        `json:"amount"`
	Weight             sql.NullInt32 `json:"weight"`
	IsActive           sql.NullBool  `json:"is_active"`
	FinancialTypeID    uuid.NullUUID `json:"financial_type_id"`
	MembershipTypeID   uuid.NullUUID `json:"membership_type_id"`
	MembershipNumTerms sql.NullInt32 `json:"membership_num_terms"`
	IsDefault          sql.NullBool  `json:"is_default"`
}

func (q *Queries) UpdatePriceFieldValue(ctx context.Context, arg UpdatePriceFieldValueParams) (PriceFieldValue, error) {
	row := q.db.QueryRowContext(ctx, UpdatePriceFieldValue,
		arg.ID,
		arg.PriceFieldID,
		arg.Name,
		arg.Label,
		arg.Amount,
		arg.Weight,
		arg.IsActive,
		arg.FinancialTypeID,
		arg.MembershipTypeID,
		arg.MembershipNumTerms,
		arg.IsDefault,
	)
	var i PriceFieldValue
	err := row.Scan(
		&i.ID,
		&i.PriceFieldID,
		&i.Name,
		&i.Label,
		&i.Amount,
		&i.Weight,
		&i.IsActive,
		&i.FinancialTypeID,
		&i.MembershipTypeID,
		&i.MembershipNumTerms,
		&i.IsDefault,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
