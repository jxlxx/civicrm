// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: membership_status.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const ActivateMembershipStatus = `-- name: ActivateMembershipStatus :exec
UPDATE membership_status SET is_active = TRUE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) ActivateMembershipStatus(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, ActivateMembershipStatus, id)
	return err
}

const CreateMembershipStatus = `-- name: CreateMembershipStatus :one
INSERT INTO membership_status (
    name, label, start_event, end_event, is_current_member,
    is_admin, weight, is_active, is_reserved
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, name, label, start_event, end_event, is_current_member, is_admin, weight, is_active, is_reserved, created_at, updated_at
`

type CreateMembershipStatusParams struct {
	Name            string         `json:"name"`
	Label           string         `json:"label"`
	StartEvent      sql.NullString `json:"start_event"`
	EndEvent        sql.NullString `json:"end_event"`
	IsCurrentMember sql.NullBool   `json:"is_current_member"`
	IsAdmin         sql.NullBool   `json:"is_admin"`
	Weight          sql.NullInt32  `json:"weight"`
	IsActive        sql.NullBool   `json:"is_active"`
	IsReserved      sql.NullBool   `json:"is_reserved"`
}

func (q *Queries) CreateMembershipStatus(ctx context.Context, arg CreateMembershipStatusParams) (MembershipStatus, error) {
	row := q.db.QueryRowContext(ctx, CreateMembershipStatus,
		arg.Name,
		arg.Label,
		arg.StartEvent,
		arg.EndEvent,
		arg.IsCurrentMember,
		arg.IsAdmin,
		arg.Weight,
		arg.IsActive,
		arg.IsReserved,
	)
	var i MembershipStatus
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Label,
		&i.StartEvent,
		&i.EndEvent,
		&i.IsCurrentMember,
		&i.IsAdmin,
		&i.Weight,
		&i.IsActive,
		&i.IsReserved,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeactivateMembershipStatus = `-- name: DeactivateMembershipStatus :exec
UPDATE membership_status SET is_active = FALSE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) DeactivateMembershipStatus(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeactivateMembershipStatus, id)
	return err
}

const DeleteMembershipStatus = `-- name: DeleteMembershipStatus :exec
DELETE FROM membership_status WHERE id = $1
`

func (q *Queries) DeleteMembershipStatus(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteMembershipStatus, id)
	return err
}

const GetMembershipStatus = `-- name: GetMembershipStatus :one
SELECT id, name, label, start_event, end_event, is_current_member, is_admin, weight, is_active, is_reserved, created_at, updated_at FROM membership_status WHERE id = $1
`

func (q *Queries) GetMembershipStatus(ctx context.Context, id uuid.UUID) (MembershipStatus, error) {
	row := q.db.QueryRowContext(ctx, GetMembershipStatus, id)
	var i MembershipStatus
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Label,
		&i.StartEvent,
		&i.EndEvent,
		&i.IsCurrentMember,
		&i.IsAdmin,
		&i.Weight,
		&i.IsActive,
		&i.IsReserved,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetMembershipStatusByName = `-- name: GetMembershipStatusByName :one
SELECT id, name, label, start_event, end_event, is_current_member, is_admin, weight, is_active, is_reserved, created_at, updated_at FROM membership_status WHERE name = $1
`

func (q *Queries) GetMembershipStatusByName(ctx context.Context, name string) (MembershipStatus, error) {
	row := q.db.QueryRowContext(ctx, GetMembershipStatusByName, name)
	var i MembershipStatus
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Label,
		&i.StartEvent,
		&i.EndEvent,
		&i.IsCurrentMember,
		&i.IsAdmin,
		&i.Weight,
		&i.IsActive,
		&i.IsReserved,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListAdminStatuses = `-- name: ListAdminStatuses :many
SELECT id, name, label, start_event, end_event, is_current_member, is_admin, weight, is_active, is_reserved, created_at, updated_at FROM membership_status 
WHERE is_admin = TRUE AND is_active = $1 
ORDER BY weight, name
`

func (q *Queries) ListAdminStatuses(ctx context.Context, isActive sql.NullBool) ([]MembershipStatus, error) {
	rows, err := q.db.QueryContext(ctx, ListAdminStatuses, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MembershipStatus{}
	for rows.Next() {
		var i MembershipStatus
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.StartEvent,
			&i.EndEvent,
			&i.IsCurrentMember,
			&i.IsAdmin,
			&i.Weight,
			&i.IsActive,
			&i.IsReserved,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCurrentMemberStatuses = `-- name: ListCurrentMemberStatuses :many
SELECT id, name, label, start_event, end_event, is_current_member, is_admin, weight, is_active, is_reserved, created_at, updated_at FROM membership_status 
WHERE is_current_member = TRUE AND is_active = $1 
ORDER BY weight, name
`

func (q *Queries) ListCurrentMemberStatuses(ctx context.Context, isActive sql.NullBool) ([]MembershipStatus, error) {
	rows, err := q.db.QueryContext(ctx, ListCurrentMemberStatuses, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MembershipStatus{}
	for rows.Next() {
		var i MembershipStatus
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.StartEvent,
			&i.EndEvent,
			&i.IsCurrentMember,
			&i.IsAdmin,
			&i.Weight,
			&i.IsActive,
			&i.IsReserved,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListMembershipStatus = `-- name: ListMembershipStatus :many
SELECT id, name, label, start_event, end_event, is_current_member, is_admin, weight, is_active, is_reserved, created_at, updated_at FROM membership_status 
WHERE is_active = $1 
ORDER BY weight, name
`

func (q *Queries) ListMembershipStatus(ctx context.Context, isActive sql.NullBool) ([]MembershipStatus, error) {
	rows, err := q.db.QueryContext(ctx, ListMembershipStatus, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MembershipStatus{}
	for rows.Next() {
		var i MembershipStatus
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.StartEvent,
			&i.EndEvent,
			&i.IsCurrentMember,
			&i.IsAdmin,
			&i.Weight,
			&i.IsActive,
			&i.IsReserved,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListMembershipStatusByEvent = `-- name: ListMembershipStatusByEvent :many
SELECT id, name, label, start_event, end_event, is_current_member, is_admin, weight, is_active, is_reserved, created_at, updated_at FROM membership_status 
WHERE (start_event = $1 OR end_event = $1) AND is_active = $2 
ORDER BY weight, name
`

type ListMembershipStatusByEventParams struct {
	StartEvent sql.NullString `json:"start_event"`
	IsActive   sql.NullBool   `json:"is_active"`
}

func (q *Queries) ListMembershipStatusByEvent(ctx context.Context, arg ListMembershipStatusByEventParams) ([]MembershipStatus, error) {
	rows, err := q.db.QueryContext(ctx, ListMembershipStatusByEvent, arg.StartEvent, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MembershipStatus{}
	for rows.Next() {
		var i MembershipStatus
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.StartEvent,
			&i.EndEvent,
			&i.IsCurrentMember,
			&i.IsAdmin,
			&i.Weight,
			&i.IsActive,
			&i.IsReserved,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchMembershipStatus = `-- name: SearchMembershipStatus :many
SELECT id, name, label, start_event, end_event, is_current_member, is_admin, weight, is_active, is_reserved, created_at, updated_at FROM membership_status 
WHERE (name ILIKE $1 OR label ILIKE $1) 
AND is_active = $2 
ORDER BY weight, name
`

type SearchMembershipStatusParams struct {
	Name     string       `json:"name"`
	IsActive sql.NullBool `json:"is_active"`
}

func (q *Queries) SearchMembershipStatus(ctx context.Context, arg SearchMembershipStatusParams) ([]MembershipStatus, error) {
	rows, err := q.db.QueryContext(ctx, SearchMembershipStatus, arg.Name, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MembershipStatus{}
	for rows.Next() {
		var i MembershipStatus
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.StartEvent,
			&i.EndEvent,
			&i.IsCurrentMember,
			&i.IsAdmin,
			&i.Weight,
			&i.IsActive,
			&i.IsReserved,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateMembershipStatus = `-- name: UpdateMembershipStatus :one
UPDATE membership_status SET
    name = $2, label = $3, start_event = $4, end_event = $5,
    is_current_member = $6, is_admin = $7, weight = $8, 
    is_active = $9, is_reserved = $10, updated_at = NOW()
WHERE id = $1 RETURNING id, name, label, start_event, end_event, is_current_member, is_admin, weight, is_active, is_reserved, created_at, updated_at
`

type UpdateMembershipStatusParams struct {
	ID              uuid.UUID      `json:"id"`
	Name            string         `json:"name"`
	Label           string         `json:"label"`
	StartEvent      sql.NullString `json:"start_event"`
	EndEvent        sql.NullString `json:"end_event"`
	IsCurrentMember sql.NullBool   `json:"is_current_member"`
	IsAdmin         sql.NullBool   `json:"is_admin"`
	Weight          sql.NullInt32  `json:"weight"`
	IsActive        sql.NullBool   `json:"is_active"`
	IsReserved      sql.NullBool   `json:"is_reserved"`
}

func (q *Queries) UpdateMembershipStatus(ctx context.Context, arg UpdateMembershipStatusParams) (MembershipStatus, error) {
	row := q.db.QueryRowContext(ctx, UpdateMembershipStatus,
		arg.ID,
		arg.Name,
		arg.Label,
		arg.StartEvent,
		arg.EndEvent,
		arg.IsCurrentMember,
		arg.IsAdmin,
		arg.Weight,
		arg.IsActive,
		arg.IsReserved,
	)
	var i MembershipStatus
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Label,
		&i.StartEvent,
		&i.EndEvent,
		&i.IsCurrentMember,
		&i.IsAdmin,
		&i.Weight,
		&i.IsActive,
		&i.IsReserved,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateMembershipStatusWeight = `-- name: UpdateMembershipStatusWeight :exec
UPDATE membership_status SET weight = $2, updated_at = NOW() WHERE id = $1
`

type UpdateMembershipStatusWeightParams struct {
	ID     uuid.UUID     `json:"id"`
	Weight sql.NullInt32 `json:"weight"`
}

func (q *Queries) UpdateMembershipStatusWeight(ctx context.Context, arg UpdateMembershipStatusWeightParams) error {
	_, err := q.db.ExecContext(ctx, UpdateMembershipStatusWeight, arg.ID, arg.Weight)
	return err
}
