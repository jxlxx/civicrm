// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: membership_logs.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const CreateMembershipLog = `-- name: CreateMembershipLog :one
INSERT INTO membership_logs (
    membership_id, modified_date, modified_by_contact_id, status_id,
    start_date, end_date, membership_type_id, is_override,
    status_override_end_date, log_type, description
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, membership_id, modified_date, modified_by_contact_id, status_id, start_date, end_date, membership_type_id, is_override, status_override_end_date, log_type, description, created_at, updated_at
`

type CreateMembershipLogParams struct {
	MembershipID          uuid.UUID      `json:"membership_id"`
	ModifiedDate          sql.NullTime   `json:"modified_date"`
	ModifiedByContactID   uuid.NullUUID  `json:"modified_by_contact_id"`
	StatusID              uuid.NullUUID  `json:"status_id"`
	StartDate             sql.NullTime   `json:"start_date"`
	EndDate               sql.NullTime   `json:"end_date"`
	MembershipTypeID      uuid.NullUUID  `json:"membership_type_id"`
	IsOverride            sql.NullBool   `json:"is_override"`
	StatusOverrideEndDate sql.NullTime   `json:"status_override_end_date"`
	LogType               sql.NullString `json:"log_type"`
	Description           sql.NullString `json:"description"`
}

func (q *Queries) CreateMembershipLog(ctx context.Context, arg CreateMembershipLogParams) (MembershipLog, error) {
	row := q.db.QueryRowContext(ctx, CreateMembershipLog,
		arg.MembershipID,
		arg.ModifiedDate,
		arg.ModifiedByContactID,
		arg.StatusID,
		arg.StartDate,
		arg.EndDate,
		arg.MembershipTypeID,
		arg.IsOverride,
		arg.StatusOverrideEndDate,
		arg.LogType,
		arg.Description,
	)
	var i MembershipLog
	err := row.Scan(
		&i.ID,
		&i.MembershipID,
		&i.ModifiedDate,
		&i.ModifiedByContactID,
		&i.StatusID,
		&i.StartDate,
		&i.EndDate,
		&i.MembershipTypeID,
		&i.IsOverride,
		&i.StatusOverrideEndDate,
		&i.LogType,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteMembershipLog = `-- name: DeleteMembershipLog :exec
DELETE FROM membership_logs WHERE id = $1
`

func (q *Queries) DeleteMembershipLog(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteMembershipLog, id)
	return err
}

const GetMembershipAuditTrail = `-- name: GetMembershipAuditTrail :many
SELECT 
    ml.id, ml.membership_id, ml.modified_date, ml.modified_by_contact_id, ml.status_id, ml.start_date, ml.end_date, ml.membership_type_id, ml.is_override, ml.status_override_end_date, ml.log_type, ml.description, ml.created_at, ml.updated_at,
    ms.name as status_name,
    mt.name as membership_type_name,
    c.first_name, c.last_name
FROM membership_logs ml
LEFT JOIN membership_status ms ON ml.status_id = ms.id
LEFT JOIN membership_types mt ON ml.membership_type_id = mt.id
LEFT JOIN contacts c ON ml.modified_by_contact_id = c.id
WHERE ml.membership_id = $1 
ORDER BY ml.modified_date DESC
`

type GetMembershipAuditTrailRow struct {
	ID                    uuid.UUID      `json:"id"`
	MembershipID          uuid.UUID      `json:"membership_id"`
	ModifiedDate          sql.NullTime   `json:"modified_date"`
	ModifiedByContactID   uuid.NullUUID  `json:"modified_by_contact_id"`
	StatusID              uuid.NullUUID  `json:"status_id"`
	StartDate             sql.NullTime   `json:"start_date"`
	EndDate               sql.NullTime   `json:"end_date"`
	MembershipTypeID      uuid.NullUUID  `json:"membership_type_id"`
	IsOverride            sql.NullBool   `json:"is_override"`
	StatusOverrideEndDate sql.NullTime   `json:"status_override_end_date"`
	LogType               sql.NullString `json:"log_type"`
	Description           sql.NullString `json:"description"`
	CreatedAt             sql.NullTime   `json:"created_at"`
	UpdatedAt             sql.NullTime   `json:"updated_at"`
	StatusName            sql.NullString `json:"status_name"`
	MembershipTypeName    sql.NullString `json:"membership_type_name"`
	FirstName             sql.NullString `json:"first_name"`
	LastName              sql.NullString `json:"last_name"`
}

func (q *Queries) GetMembershipAuditTrail(ctx context.Context, membershipID uuid.UUID) ([]GetMembershipAuditTrailRow, error) {
	rows, err := q.db.QueryContext(ctx, GetMembershipAuditTrail, membershipID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMembershipAuditTrailRow{}
	for rows.Next() {
		var i GetMembershipAuditTrailRow
		if err := rows.Scan(
			&i.ID,
			&i.MembershipID,
			&i.ModifiedDate,
			&i.ModifiedByContactID,
			&i.StatusID,
			&i.StartDate,
			&i.EndDate,
			&i.MembershipTypeID,
			&i.IsOverride,
			&i.StatusOverrideEndDate,
			&i.LogType,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StatusName,
			&i.MembershipTypeName,
			&i.FirstName,
			&i.LastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetMembershipChangeSummary = `-- name: GetMembershipChangeSummary :many
SELECT 
    log_type,
    COUNT(*) as change_count,
    MIN(modified_date) as first_change,
    MAX(modified_date) as last_change
FROM membership_logs 
WHERE membership_id = $1
GROUP BY log_type
ORDER BY log_type
`

type GetMembershipChangeSummaryRow struct {
	LogType     sql.NullString `json:"log_type"`
	ChangeCount int64          `json:"change_count"`
	FirstChange interface{}    `json:"first_change"`
	LastChange  interface{}    `json:"last_change"`
}

func (q *Queries) GetMembershipChangeSummary(ctx context.Context, membershipID uuid.UUID) ([]GetMembershipChangeSummaryRow, error) {
	rows, err := q.db.QueryContext(ctx, GetMembershipChangeSummary, membershipID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMembershipChangeSummaryRow{}
	for rows.Next() {
		var i GetMembershipChangeSummaryRow
		if err := rows.Scan(
			&i.LogType,
			&i.ChangeCount,
			&i.FirstChange,
			&i.LastChange,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetMembershipLog = `-- name: GetMembershipLog :one
SELECT id, membership_id, modified_date, modified_by_contact_id, status_id, start_date, end_date, membership_type_id, is_override, status_override_end_date, log_type, description, created_at, updated_at FROM membership_logs WHERE id = $1
`

func (q *Queries) GetMembershipLog(ctx context.Context, id uuid.UUID) (MembershipLog, error) {
	row := q.db.QueryRowContext(ctx, GetMembershipLog, id)
	var i MembershipLog
	err := row.Scan(
		&i.ID,
		&i.MembershipID,
		&i.ModifiedDate,
		&i.ModifiedByContactID,
		&i.StatusID,
		&i.StartDate,
		&i.EndDate,
		&i.MembershipTypeID,
		&i.IsOverride,
		&i.StatusOverrideEndDate,
		&i.LogType,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetMembershipLogsByContact = `-- name: GetMembershipLogsByContact :many
SELECT ml.id, ml.membership_id, ml.modified_date, ml.modified_by_contact_id, ml.status_id, ml.start_date, ml.end_date, ml.membership_type_id, ml.is_override, ml.status_override_end_date, ml.log_type, ml.description, ml.created_at, ml.updated_at FROM membership_logs ml
JOIN memberships m ON ml.membership_id = m.id
WHERE m.contact_id = $1 
ORDER BY ml.modified_date DESC
`

func (q *Queries) GetMembershipLogsByContact(ctx context.Context, contactID uuid.UUID) ([]MembershipLog, error) {
	rows, err := q.db.QueryContext(ctx, GetMembershipLogsByContact, contactID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MembershipLog{}
	for rows.Next() {
		var i MembershipLog
		if err := rows.Scan(
			&i.ID,
			&i.MembershipID,
			&i.ModifiedDate,
			&i.ModifiedByContactID,
			&i.StatusID,
			&i.StartDate,
			&i.EndDate,
			&i.MembershipTypeID,
			&i.IsOverride,
			&i.StatusOverrideEndDate,
			&i.LogType,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetMembershipLogsByMembership = `-- name: GetMembershipLogsByMembership :many
SELECT id, membership_id, modified_date, modified_by_contact_id, status_id, start_date, end_date, membership_type_id, is_override, status_override_end_date, log_type, description, created_at, updated_at FROM membership_logs 
WHERE membership_id = $1 
ORDER BY modified_date DESC
`

func (q *Queries) GetMembershipLogsByMembership(ctx context.Context, membershipID uuid.UUID) ([]MembershipLog, error) {
	rows, err := q.db.QueryContext(ctx, GetMembershipLogsByMembership, membershipID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MembershipLog{}
	for rows.Next() {
		var i MembershipLog
		if err := rows.Scan(
			&i.ID,
			&i.MembershipID,
			&i.ModifiedDate,
			&i.ModifiedByContactID,
			&i.StatusID,
			&i.StartDate,
			&i.EndDate,
			&i.MembershipTypeID,
			&i.IsOverride,
			&i.StatusOverrideEndDate,
			&i.LogType,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListMembershipLogs = `-- name: ListMembershipLogs :many
SELECT id, membership_id, modified_date, modified_by_contact_id, status_id, start_date, end_date, membership_type_id, is_override, status_override_end_date, log_type, description, created_at, updated_at FROM membership_logs 
ORDER BY modified_date DESC
`

func (q *Queries) ListMembershipLogs(ctx context.Context) ([]MembershipLog, error) {
	rows, err := q.db.QueryContext(ctx, ListMembershipLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MembershipLog{}
	for rows.Next() {
		var i MembershipLog
		if err := rows.Scan(
			&i.ID,
			&i.MembershipID,
			&i.ModifiedDate,
			&i.ModifiedByContactID,
			&i.StatusID,
			&i.StartDate,
			&i.EndDate,
			&i.MembershipTypeID,
			&i.IsOverride,
			&i.StatusOverrideEndDate,
			&i.LogType,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListMembershipLogsByDateRange = `-- name: ListMembershipLogsByDateRange :many
SELECT id, membership_id, modified_date, modified_by_contact_id, status_id, start_date, end_date, membership_type_id, is_override, status_override_end_date, log_type, description, created_at, updated_at FROM membership_logs 
WHERE modified_date >= $1 AND modified_date <= $2 
ORDER BY modified_date DESC
`

type ListMembershipLogsByDateRangeParams struct {
	ModifiedDate   sql.NullTime `json:"modified_date"`
	ModifiedDate_2 sql.NullTime `json:"modified_date_2"`
}

func (q *Queries) ListMembershipLogsByDateRange(ctx context.Context, arg ListMembershipLogsByDateRangeParams) ([]MembershipLog, error) {
	rows, err := q.db.QueryContext(ctx, ListMembershipLogsByDateRange, arg.ModifiedDate, arg.ModifiedDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MembershipLog{}
	for rows.Next() {
		var i MembershipLog
		if err := rows.Scan(
			&i.ID,
			&i.MembershipID,
			&i.ModifiedDate,
			&i.ModifiedByContactID,
			&i.StatusID,
			&i.StartDate,
			&i.EndDate,
			&i.MembershipTypeID,
			&i.IsOverride,
			&i.StatusOverrideEndDate,
			&i.LogType,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListMembershipLogsByModifier = `-- name: ListMembershipLogsByModifier :many
SELECT id, membership_id, modified_date, modified_by_contact_id, status_id, start_date, end_date, membership_type_id, is_override, status_override_end_date, log_type, description, created_at, updated_at FROM membership_logs 
WHERE modified_by_contact_id = $1 
ORDER BY modified_date DESC
`

func (q *Queries) ListMembershipLogsByModifier(ctx context.Context, modifiedByContactID uuid.NullUUID) ([]MembershipLog, error) {
	rows, err := q.db.QueryContext(ctx, ListMembershipLogsByModifier, modifiedByContactID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MembershipLog{}
	for rows.Next() {
		var i MembershipLog
		if err := rows.Scan(
			&i.ID,
			&i.MembershipID,
			&i.ModifiedDate,
			&i.ModifiedByContactID,
			&i.StatusID,
			&i.StartDate,
			&i.EndDate,
			&i.MembershipTypeID,
			&i.IsOverride,
			&i.StatusOverrideEndDate,
			&i.LogType,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListMembershipLogsByStatus = `-- name: ListMembershipLogsByStatus :many
SELECT id, membership_id, modified_date, modified_by_contact_id, status_id, start_date, end_date, membership_type_id, is_override, status_override_end_date, log_type, description, created_at, updated_at FROM membership_logs 
WHERE status_id = $1 
ORDER BY modified_date DESC
`

func (q *Queries) ListMembershipLogsByStatus(ctx context.Context, statusID uuid.NullUUID) ([]MembershipLog, error) {
	rows, err := q.db.QueryContext(ctx, ListMembershipLogsByStatus, statusID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MembershipLog{}
	for rows.Next() {
		var i MembershipLog
		if err := rows.Scan(
			&i.ID,
			&i.MembershipID,
			&i.ModifiedDate,
			&i.ModifiedByContactID,
			&i.StatusID,
			&i.StartDate,
			&i.EndDate,
			&i.MembershipTypeID,
			&i.IsOverride,
			&i.StatusOverrideEndDate,
			&i.LogType,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListMembershipLogsByType = `-- name: ListMembershipLogsByType :many
SELECT id, membership_id, modified_date, modified_by_contact_id, status_id, start_date, end_date, membership_type_id, is_override, status_override_end_date, log_type, description, created_at, updated_at FROM membership_logs 
WHERE log_type = $1 
ORDER BY modified_date DESC
`

func (q *Queries) ListMembershipLogsByType(ctx context.Context, logType sql.NullString) ([]MembershipLog, error) {
	rows, err := q.db.QueryContext(ctx, ListMembershipLogsByType, logType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MembershipLog{}
	for rows.Next() {
		var i MembershipLog
		if err := rows.Scan(
			&i.ID,
			&i.MembershipID,
			&i.ModifiedDate,
			&i.ModifiedByContactID,
			&i.StatusID,
			&i.StartDate,
			&i.EndDate,
			&i.MembershipTypeID,
			&i.IsOverride,
			&i.StatusOverrideEndDate,
			&i.LogType,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchMembershipLogs = `-- name: SearchMembershipLogs :many
SELECT ml.id, ml.membership_id, ml.modified_date, ml.modified_by_contact_id, ml.status_id, ml.start_date, ml.end_date, ml.membership_type_id, ml.is_override, ml.status_override_end_date, ml.log_type, ml.description, ml.created_at, ml.updated_at FROM membership_logs ml
JOIN memberships m ON ml.membership_id = m.id
JOIN contacts c ON m.contact_id = c.id
WHERE (c.first_name ILIKE $1 OR c.last_name ILIKE $1 OR c.organization_name ILIKE $1)
ORDER BY ml.modified_date DESC
`

func (q *Queries) SearchMembershipLogs(ctx context.Context, firstName sql.NullString) ([]MembershipLog, error) {
	rows, err := q.db.QueryContext(ctx, SearchMembershipLogs, firstName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MembershipLog{}
	for rows.Next() {
		var i MembershipLog
		if err := rows.Scan(
			&i.ID,
			&i.MembershipID,
			&i.ModifiedDate,
			&i.ModifiedByContactID,
			&i.StatusID,
			&i.StartDate,
			&i.EndDate,
			&i.MembershipTypeID,
			&i.IsOverride,
			&i.StatusOverrideEndDate,
			&i.LogType,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateMembershipLog = `-- name: UpdateMembershipLog :one
UPDATE membership_logs SET
    membership_id = $2, modified_date = $3, modified_by_contact_id = $4,
    status_id = $5, start_date = $6, end_date = $7, membership_type_id = $8,
    is_override = $9, status_override_end_date = $10, log_type = $11,
    description = $12, updated_at = NOW()
WHERE id = $1 RETURNING id, membership_id, modified_date, modified_by_contact_id, status_id, start_date, end_date, membership_type_id, is_override, status_override_end_date, log_type, description, created_at, updated_at
`

type UpdateMembershipLogParams struct {
	ID                    uuid.UUID      `json:"id"`
	MembershipID          uuid.UUID      `json:"membership_id"`
	ModifiedDate          sql.NullTime   `json:"modified_date"`
	ModifiedByContactID   uuid.NullUUID  `json:"modified_by_contact_id"`
	StatusID              uuid.NullUUID  `json:"status_id"`
	StartDate             sql.NullTime   `json:"start_date"`
	EndDate               sql.NullTime   `json:"end_date"`
	MembershipTypeID      uuid.NullUUID  `json:"membership_type_id"`
	IsOverride            sql.NullBool   `json:"is_override"`
	StatusOverrideEndDate sql.NullTime   `json:"status_override_end_date"`
	LogType               sql.NullString `json:"log_type"`
	Description           sql.NullString `json:"description"`
}

func (q *Queries) UpdateMembershipLog(ctx context.Context, arg UpdateMembershipLogParams) (MembershipLog, error) {
	row := q.db.QueryRowContext(ctx, UpdateMembershipLog,
		arg.ID,
		arg.MembershipID,
		arg.ModifiedDate,
		arg.ModifiedByContactID,
		arg.StatusID,
		arg.StartDate,
		arg.EndDate,
		arg.MembershipTypeID,
		arg.IsOverride,
		arg.StatusOverrideEndDate,
		arg.LogType,
		arg.Description,
	)
	var i MembershipLog
	err := row.Scan(
		&i.ID,
		&i.MembershipID,
		&i.ModifiedDate,
		&i.ModifiedByContactID,
		&i.StatusID,
		&i.StartDate,
		&i.EndDate,
		&i.MembershipTypeID,
		&i.IsOverride,
		&i.StatusOverrideEndDate,
		&i.LogType,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
