// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: discounts.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const CountDiscounts = `-- name: CountDiscounts :one
SELECT COUNT(*) FROM discounts WHERE is_active = $1
`

func (q *Queries) CountDiscounts(ctx context.Context, isActive sql.NullBool) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountDiscounts, isActive)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateDiscount = `-- name: CreateDiscount :one
INSERT INTO discounts (
    name, description, discount_type_id, amount, percentage, is_active
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, name, description, discount_type_id, amount, percentage, is_active, created_at, updated_at
`

type CreateDiscountParams struct {
	Name           string         `json:"name"`
	Description    sql.NullString `json:"description"`
	DiscountTypeID uuid.NullUUID  `json:"discount_type_id"`
	Amount         sql.NullString `json:"amount"`
	Percentage     sql.NullString `json:"percentage"`
	IsActive       sql.NullBool   `json:"is_active"`
}

func (q *Queries) CreateDiscount(ctx context.Context, arg CreateDiscountParams) (Discount, error) {
	row := q.db.QueryRowContext(ctx, CreateDiscount,
		arg.Name,
		arg.Description,
		arg.DiscountTypeID,
		arg.Amount,
		arg.Percentage,
		arg.IsActive,
	)
	var i Discount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DiscountTypeID,
		&i.Amount,
		&i.Percentage,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteDiscount = `-- name: DeleteDiscount :exec
DELETE FROM discounts WHERE id = $1
`

func (q *Queries) DeleteDiscount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteDiscount, id)
	return err
}

const GetDiscount = `-- name: GetDiscount :one
SELECT id, name, description, discount_type_id, amount, percentage, is_active, created_at, updated_at FROM discounts WHERE id = $1
`

func (q *Queries) GetDiscount(ctx context.Context, id uuid.UUID) (Discount, error) {
	row := q.db.QueryRowContext(ctx, GetDiscount, id)
	var i Discount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DiscountTypeID,
		&i.Amount,
		&i.Percentage,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetDiscountByName = `-- name: GetDiscountByName :one
SELECT id, name, description, discount_type_id, amount, percentage, is_active, created_at, updated_at FROM discounts WHERE name = $1
`

func (q *Queries) GetDiscountByName(ctx context.Context, name string) (Discount, error) {
	row := q.db.QueryRowContext(ctx, GetDiscountByName, name)
	var i Discount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DiscountTypeID,
		&i.Amount,
		&i.Percentage,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListDiscounts = `-- name: ListDiscounts :many
SELECT id, name, description, discount_type_id, amount, percentage, is_active, created_at, updated_at FROM discounts 
WHERE is_active = $1
ORDER BY name
`

func (q *Queries) ListDiscounts(ctx context.Context, isActive sql.NullBool) ([]Discount, error) {
	rows, err := q.db.QueryContext(ctx, ListDiscounts, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Discount{}
	for rows.Next() {
		var i Discount
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.DiscountTypeID,
			&i.Amount,
			&i.Percentage,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchDiscounts = `-- name: SearchDiscounts :many
SELECT id, name, description, discount_type_id, amount, percentage, is_active, created_at, updated_at FROM discounts 
WHERE (name ILIKE $1 OR description ILIKE $1)
AND is_active = $2
ORDER BY name
`

type SearchDiscountsParams struct {
	Name     string       `json:"name"`
	IsActive sql.NullBool `json:"is_active"`
}

func (q *Queries) SearchDiscounts(ctx context.Context, arg SearchDiscountsParams) ([]Discount, error) {
	rows, err := q.db.QueryContext(ctx, SearchDiscounts, arg.Name, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Discount{}
	for rows.Next() {
		var i Discount
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.DiscountTypeID,
			&i.Amount,
			&i.Percentage,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateDiscount = `-- name: UpdateDiscount :one
UPDATE discounts SET
    name = $2, description = $3, discount_type_id = $4,
    amount = $5, percentage = $6, is_active = $7, updated_at = NOW()
WHERE id = $1 RETURNING id, name, description, discount_type_id, amount, percentage, is_active, created_at, updated_at
`

type UpdateDiscountParams struct {
	ID             uuid.UUID      `json:"id"`
	Name           string         `json:"name"`
	Description    sql.NullString `json:"description"`
	DiscountTypeID uuid.NullUUID  `json:"discount_type_id"`
	Amount         sql.NullString `json:"amount"`
	Percentage     sql.NullString `json:"percentage"`
	IsActive       sql.NullBool   `json:"is_active"`
}

func (q *Queries) UpdateDiscount(ctx context.Context, arg UpdateDiscountParams) (Discount, error) {
	row := q.db.QueryRowContext(ctx, UpdateDiscount,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.DiscountTypeID,
		arg.Amount,
		arg.Percentage,
		arg.IsActive,
	)
	var i Discount
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DiscountTypeID,
		&i.Amount,
		&i.Percentage,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
