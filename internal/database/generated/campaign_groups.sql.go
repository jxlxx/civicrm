// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: campaign_groups.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const ActivateCampaignGroup = `-- name: ActivateCampaignGroup :exec
UPDATE campaign_groups SET is_active = TRUE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) ActivateCampaignGroup(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, ActivateCampaignGroup, id)
	return err
}

const CreateCampaignGroup = `-- name: CreateCampaignGroup :one
INSERT INTO campaign_groups (
    campaign_id, group_id, is_active
) VALUES (
    $1, $2, $3
) RETURNING id, campaign_id, group_id, is_active, created_at, updated_at
`

type CreateCampaignGroupParams struct {
	CampaignID uuid.UUID    `json:"campaign_id"`
	GroupID    uuid.UUID    `json:"group_id"`
	IsActive   sql.NullBool `json:"is_active"`
}

func (q *Queries) CreateCampaignGroup(ctx context.Context, arg CreateCampaignGroupParams) (CampaignGroup, error) {
	row := q.db.QueryRowContext(ctx, CreateCampaignGroup, arg.CampaignID, arg.GroupID, arg.IsActive)
	var i CampaignGroup
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.GroupID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeactivateCampaignGroup = `-- name: DeactivateCampaignGroup :exec
UPDATE campaign_groups SET is_active = FALSE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) DeactivateCampaignGroup(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeactivateCampaignGroup, id)
	return err
}

const DeleteCampaignGroup = `-- name: DeleteCampaignGroup :exec
DELETE FROM campaign_groups WHERE id = $1
`

func (q *Queries) DeleteCampaignGroup(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteCampaignGroup, id)
	return err
}

const GetActiveCampaignGroups = `-- name: GetActiveCampaignGroups :many
SELECT id, campaign_id, group_id, is_active, created_at, updated_at FROM campaign_groups 
WHERE campaign_id = $1 AND is_active = TRUE 
ORDER BY id
`

func (q *Queries) GetActiveCampaignGroups(ctx context.Context, campaignID uuid.UUID) ([]CampaignGroup, error) {
	rows, err := q.db.QueryContext(ctx, GetActiveCampaignGroups, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignGroup{}
	for rows.Next() {
		var i CampaignGroup
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.GroupID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCampaignGroup = `-- name: GetCampaignGroup :one
SELECT id, campaign_id, group_id, is_active, created_at, updated_at FROM campaign_groups WHERE id = $1
`

func (q *Queries) GetCampaignGroup(ctx context.Context, id uuid.UUID) (CampaignGroup, error) {
	row := q.db.QueryRowContext(ctx, GetCampaignGroup, id)
	var i CampaignGroup
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.GroupID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCampaignGroupByCampaignAndGroup = `-- name: GetCampaignGroupByCampaignAndGroup :one
SELECT id, campaign_id, group_id, is_active, created_at, updated_at FROM campaign_groups 
WHERE campaign_id = $1 AND group_id = $2 
ORDER BY id LIMIT 1
`

type GetCampaignGroupByCampaignAndGroupParams struct {
	CampaignID uuid.UUID `json:"campaign_id"`
	GroupID    uuid.UUID `json:"group_id"`
}

func (q *Queries) GetCampaignGroupByCampaignAndGroup(ctx context.Context, arg GetCampaignGroupByCampaignAndGroupParams) (CampaignGroup, error) {
	row := q.db.QueryRowContext(ctx, GetCampaignGroupByCampaignAndGroup, arg.CampaignID, arg.GroupID)
	var i CampaignGroup
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.GroupID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCampaignGroupStats = `-- name: GetCampaignGroupStats :many
SELECT 
    g.title as group_name,
    COUNT(cg.id) as campaign_count
FROM campaign_groups cg
JOIN groups g ON cg.group_id = g.id
WHERE cg.is_active = $1
GROUP BY g.title
ORDER BY g.title
`

type GetCampaignGroupStatsRow struct {
	GroupName     sql.NullString `json:"group_name"`
	CampaignCount int64          `json:"campaign_count"`
}

func (q *Queries) GetCampaignGroupStats(ctx context.Context, isActive sql.NullBool) ([]GetCampaignGroupStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignGroupStats, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCampaignGroupStatsRow{}
	for rows.Next() {
		var i GetCampaignGroupStatsRow
		if err := rows.Scan(&i.GroupName, &i.CampaignCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCampaignGroupsByCampaign = `-- name: GetCampaignGroupsByCampaign :many
SELECT id, campaign_id, group_id, is_active, created_at, updated_at FROM campaign_groups 
WHERE campaign_id = $1 
ORDER BY id
`

func (q *Queries) GetCampaignGroupsByCampaign(ctx context.Context, campaignID uuid.UUID) ([]CampaignGroup, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignGroupsByCampaign, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignGroup{}
	for rows.Next() {
		var i CampaignGroup
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.GroupID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCampaignGroupsByGroup = `-- name: GetCampaignGroupsByGroup :many
SELECT id, campaign_id, group_id, is_active, created_at, updated_at FROM campaign_groups 
WHERE group_id = $1 
ORDER BY id
`

func (q *Queries) GetCampaignGroupsByGroup(ctx context.Context, groupID uuid.UUID) ([]CampaignGroup, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignGroupsByGroup, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignGroup{}
	for rows.Next() {
		var i CampaignGroup
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.GroupID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCampaignTargetAudience = `-- name: GetCampaignTargetAudience :many
SELECT 
    c.id as campaign_id,
    c.name as campaign_name,
    COUNT(cg.id) as group_count,
    STRING_AGG(g.title, ', ') as target_groups
FROM campaigns c
LEFT JOIN campaign_groups cg ON c.id = cg.campaign_id AND cg.is_active = TRUE
LEFT JOIN groups g ON cg.group_id = g.id
WHERE c.is_active = $1
GROUP BY c.id, c.name
ORDER BY c.start_date DESC
`

type GetCampaignTargetAudienceRow struct {
	CampaignID   uuid.UUID `json:"campaign_id"`
	CampaignName string    `json:"campaign_name"`
	GroupCount   int64     `json:"group_count"`
	TargetGroups []byte    `json:"target_groups"`
}

func (q *Queries) GetCampaignTargetAudience(ctx context.Context, isActive sql.NullBool) ([]GetCampaignTargetAudienceRow, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignTargetAudience, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCampaignTargetAudienceRow{}
	for rows.Next() {
		var i GetCampaignTargetAudienceRow
		if err := rows.Scan(
			&i.CampaignID,
			&i.CampaignName,
			&i.GroupCount,
			&i.TargetGroups,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListActiveCampaignGroups = `-- name: ListActiveCampaignGroups :many
SELECT id, campaign_id, group_id, is_active, created_at, updated_at FROM campaign_groups 
WHERE is_active = TRUE 
ORDER BY id
`

func (q *Queries) ListActiveCampaignGroups(ctx context.Context) ([]CampaignGroup, error) {
	rows, err := q.db.QueryContext(ctx, ListActiveCampaignGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignGroup{}
	for rows.Next() {
		var i CampaignGroup
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.GroupID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCampaignGroups = `-- name: ListCampaignGroups :many
SELECT id, campaign_id, group_id, is_active, created_at, updated_at FROM campaign_groups 
ORDER BY id
`

func (q *Queries) ListCampaignGroups(ctx context.Context) ([]CampaignGroup, error) {
	rows, err := q.db.QueryContext(ctx, ListCampaignGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignGroup{}
	for rows.Next() {
		var i CampaignGroup
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.GroupID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchCampaignGroups = `-- name: SearchCampaignGroups :many
SELECT cg.id, cg.campaign_id, cg.group_id, cg.is_active, cg.created_at, cg.updated_at FROM campaign_groups cg
JOIN groups g ON cg.group_id = g.id
WHERE g.title ILIKE $1
ORDER BY cg.id
`

func (q *Queries) SearchCampaignGroups(ctx context.Context, title sql.NullString) ([]CampaignGroup, error) {
	rows, err := q.db.QueryContext(ctx, SearchCampaignGroups, title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignGroup{}
	for rows.Next() {
		var i CampaignGroup
		if err := rows.Scan(
			&i.ID,
			&i.CampaignID,
			&i.GroupID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateCampaignGroup = `-- name: UpdateCampaignGroup :one
UPDATE campaign_groups SET
    campaign_id = $2, group_id = $3, is_active = $4, updated_at = NOW()
WHERE id = $1 RETURNING id, campaign_id, group_id, is_active, created_at, updated_at
`

type UpdateCampaignGroupParams struct {
	ID         uuid.UUID    `json:"id"`
	CampaignID uuid.UUID    `json:"campaign_id"`
	GroupID    uuid.UUID    `json:"group_id"`
	IsActive   sql.NullBool `json:"is_active"`
}

func (q *Queries) UpdateCampaignGroup(ctx context.Context, arg UpdateCampaignGroupParams) (CampaignGroup, error) {
	row := q.db.QueryRowContext(ctx, UpdateCampaignGroup,
		arg.ID,
		arg.CampaignID,
		arg.GroupID,
		arg.IsActive,
	)
	var i CampaignGroup
	err := row.Scan(
		&i.ID,
		&i.CampaignID,
		&i.GroupID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
