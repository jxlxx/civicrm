// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: activities.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const CountActivities = `-- name: CountActivities :one
SELECT COUNT(*) FROM activities WHERE is_deleted = FALSE
`

func (q *Queries) CountActivities(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountActivities)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountActivitiesByContact = `-- name: CountActivitiesByContact :one
SELECT COUNT(*) FROM activities a
JOIN activity_contacts ac ON a.id = ac.activity_id
WHERE ac.contact_id = $1 AND a.is_deleted = FALSE
`

func (q *Queries) CountActivitiesByContact(ctx context.Context, contactID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountActivitiesByContact, contactID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountActivitiesByStatus = `-- name: CountActivitiesByStatus :one
SELECT COUNT(*) FROM activities 
WHERE status_id = $1 AND is_deleted = FALSE
`

func (q *Queries) CountActivitiesByStatus(ctx context.Context, statusID uuid.NullUUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountActivitiesByStatus, statusID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountActivitiesByType = `-- name: CountActivitiesByType :one
SELECT COUNT(*) FROM activities 
WHERE activity_type_id = $1 AND is_deleted = FALSE
`

func (q *Queries) CountActivitiesByType(ctx context.Context, activityTypeID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountActivitiesByType, activityTypeID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateActivity = `-- name: CreateActivity :one
INSERT INTO activities (
    activity_type_id, subject, activity_date_time, duration, location,
    phone_id, phone_number, details, status_id, priority_id, parent_id,
    is_test, medium_id, is_auto, relationship_id, is_current_revision,
    original_id, result, is_deleted, campaign_id, engagement_level, weight, is_star
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23
) RETURNING id, activity_type_id, subject, activity_date_time, duration, location, phone_id, phone_number, details, status_id, priority_id, parent_id, is_test, medium_id, is_auto, relationship_id, is_current_revision, original_id, result, is_deleted, campaign_id, engagement_level, weight, is_star, created_date, modified_date, created_at, updated_at
`

type CreateActivityParams struct {
	ActivityTypeID    uuid.UUID      `json:"activity_type_id"`
	Subject           sql.NullString `json:"subject"`
	ActivityDateTime  time.Time      `json:"activity_date_time"`
	Duration          sql.NullInt32  `json:"duration"`
	Location          sql.NullString `json:"location"`
	PhoneID           uuid.NullUUID  `json:"phone_id"`
	PhoneNumber       sql.NullString `json:"phone_number"`
	Details           sql.NullString `json:"details"`
	StatusID          uuid.NullUUID  `json:"status_id"`
	PriorityID        uuid.NullUUID  `json:"priority_id"`
	ParentID          uuid.NullUUID  `json:"parent_id"`
	IsTest            sql.NullBool   `json:"is_test"`
	MediumID          uuid.NullUUID  `json:"medium_id"`
	IsAuto            sql.NullBool   `json:"is_auto"`
	RelationshipID    uuid.NullUUID  `json:"relationship_id"`
	IsCurrentRevision sql.NullBool   `json:"is_current_revision"`
	OriginalID        uuid.NullUUID  `json:"original_id"`
	Result            sql.NullString `json:"result"`
	IsDeleted         sql.NullBool   `json:"is_deleted"`
	CampaignID        uuid.NullUUID  `json:"campaign_id"`
	EngagementLevel   sql.NullInt32  `json:"engagement_level"`
	Weight            sql.NullInt32  `json:"weight"`
	IsStar            sql.NullBool   `json:"is_star"`
}

func (q *Queries) CreateActivity(ctx context.Context, arg CreateActivityParams) (Activity, error) {
	row := q.db.QueryRowContext(ctx, CreateActivity,
		arg.ActivityTypeID,
		arg.Subject,
		arg.ActivityDateTime,
		arg.Duration,
		arg.Location,
		arg.PhoneID,
		arg.PhoneNumber,
		arg.Details,
		arg.StatusID,
		arg.PriorityID,
		arg.ParentID,
		arg.IsTest,
		arg.MediumID,
		arg.IsAuto,
		arg.RelationshipID,
		arg.IsCurrentRevision,
		arg.OriginalID,
		arg.Result,
		arg.IsDeleted,
		arg.CampaignID,
		arg.EngagementLevel,
		arg.Weight,
		arg.IsStar,
	)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.ActivityTypeID,
		&i.Subject,
		&i.ActivityDateTime,
		&i.Duration,
		&i.Location,
		&i.PhoneID,
		&i.PhoneNumber,
		&i.Details,
		&i.StatusID,
		&i.PriorityID,
		&i.ParentID,
		&i.IsTest,
		&i.MediumID,
		&i.IsAuto,
		&i.RelationshipID,
		&i.IsCurrentRevision,
		&i.OriginalID,
		&i.Result,
		&i.IsDeleted,
		&i.CampaignID,
		&i.EngagementLevel,
		&i.Weight,
		&i.IsStar,
		&i.CreatedDate,
		&i.ModifiedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteActivity = `-- name: DeleteActivity :exec
UPDATE activities SET is_deleted = TRUE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) DeleteActivity(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteActivity, id)
	return err
}

const GetActivitiesByCampaign = `-- name: GetActivitiesByCampaign :many
SELECT id, activity_type_id, subject, activity_date_time, duration, location, phone_id, phone_number, details, status_id, priority_id, parent_id, is_test, medium_id, is_auto, relationship_id, is_current_revision, original_id, result, is_deleted, campaign_id, engagement_level, weight, is_star, created_date, modified_date, created_at, updated_at FROM activities 
WHERE campaign_id = $1 AND is_deleted = FALSE
ORDER BY activity_date_time DESC
`

func (q *Queries) GetActivitiesByCampaign(ctx context.Context, campaignID uuid.NullUUID) ([]Activity, error) {
	rows, err := q.db.QueryContext(ctx, GetActivitiesByCampaign, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Activity{}
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.ActivityTypeID,
			&i.Subject,
			&i.ActivityDateTime,
			&i.Duration,
			&i.Location,
			&i.PhoneID,
			&i.PhoneNumber,
			&i.Details,
			&i.StatusID,
			&i.PriorityID,
			&i.ParentID,
			&i.IsTest,
			&i.MediumID,
			&i.IsAuto,
			&i.RelationshipID,
			&i.IsCurrentRevision,
			&i.OriginalID,
			&i.Result,
			&i.IsDeleted,
			&i.CampaignID,
			&i.EngagementLevel,
			&i.Weight,
			&i.IsStar,
			&i.CreatedDate,
			&i.ModifiedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetActivitiesByContact = `-- name: GetActivitiesByContact :many
SELECT a.id, a.activity_type_id, a.subject, a.activity_date_time, a.duration, a.location, a.phone_id, a.phone_number, a.details, a.status_id, a.priority_id, a.parent_id, a.is_test, a.medium_id, a.is_auto, a.relationship_id, a.is_current_revision, a.original_id, a.result, a.is_deleted, a.campaign_id, a.engagement_level, a.weight, a.is_star, a.created_date, a.modified_date, a.created_at, a.updated_at FROM activities a
JOIN activity_contacts ac ON a.id = ac.activity_id
WHERE ac.contact_id = $1 AND a.is_deleted = FALSE
ORDER BY a.activity_date_time DESC
`

func (q *Queries) GetActivitiesByContact(ctx context.Context, contactID uuid.UUID) ([]Activity, error) {
	rows, err := q.db.QueryContext(ctx, GetActivitiesByContact, contactID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Activity{}
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.ActivityTypeID,
			&i.Subject,
			&i.ActivityDateTime,
			&i.Duration,
			&i.Location,
			&i.PhoneID,
			&i.PhoneNumber,
			&i.Details,
			&i.StatusID,
			&i.PriorityID,
			&i.ParentID,
			&i.IsTest,
			&i.MediumID,
			&i.IsAuto,
			&i.RelationshipID,
			&i.IsCurrentRevision,
			&i.OriginalID,
			&i.Result,
			&i.IsDeleted,
			&i.CampaignID,
			&i.EngagementLevel,
			&i.Weight,
			&i.IsStar,
			&i.CreatedDate,
			&i.ModifiedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetActivitiesByDateRange = `-- name: GetActivitiesByDateRange :many
SELECT id, activity_type_id, subject, activity_date_time, duration, location, phone_id, phone_number, details, status_id, priority_id, parent_id, is_test, medium_id, is_auto, relationship_id, is_current_revision, original_id, result, is_deleted, campaign_id, engagement_level, weight, is_star, created_date, modified_date, created_at, updated_at FROM activities 
WHERE activity_date_time BETWEEN $1 AND $2 AND is_deleted = FALSE
ORDER BY activity_date_time DESC
`

type GetActivitiesByDateRangeParams struct {
	ActivityDateTime   time.Time `json:"activity_date_time"`
	ActivityDateTime_2 time.Time `json:"activity_date_time_2"`
}

func (q *Queries) GetActivitiesByDateRange(ctx context.Context, arg GetActivitiesByDateRangeParams) ([]Activity, error) {
	rows, err := q.db.QueryContext(ctx, GetActivitiesByDateRange, arg.ActivityDateTime, arg.ActivityDateTime_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Activity{}
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.ActivityTypeID,
			&i.Subject,
			&i.ActivityDateTime,
			&i.Duration,
			&i.Location,
			&i.PhoneID,
			&i.PhoneNumber,
			&i.Details,
			&i.StatusID,
			&i.PriorityID,
			&i.ParentID,
			&i.IsTest,
			&i.MediumID,
			&i.IsAuto,
			&i.RelationshipID,
			&i.IsCurrentRevision,
			&i.OriginalID,
			&i.Result,
			&i.IsDeleted,
			&i.CampaignID,
			&i.EngagementLevel,
			&i.Weight,
			&i.IsStar,
			&i.CreatedDate,
			&i.ModifiedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetActivitiesByPriority = `-- name: GetActivitiesByPriority :many
SELECT id, activity_type_id, subject, activity_date_time, duration, location, phone_id, phone_number, details, status_id, priority_id, parent_id, is_test, medium_id, is_auto, relationship_id, is_current_revision, original_id, result, is_deleted, campaign_id, engagement_level, weight, is_star, created_date, modified_date, created_at, updated_at FROM activities 
WHERE priority_id = $1 AND is_deleted = FALSE
ORDER BY activity_date_time DESC
`

func (q *Queries) GetActivitiesByPriority(ctx context.Context, priorityID uuid.NullUUID) ([]Activity, error) {
	rows, err := q.db.QueryContext(ctx, GetActivitiesByPriority, priorityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Activity{}
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.ActivityTypeID,
			&i.Subject,
			&i.ActivityDateTime,
			&i.Duration,
			&i.Location,
			&i.PhoneID,
			&i.PhoneNumber,
			&i.Details,
			&i.StatusID,
			&i.PriorityID,
			&i.ParentID,
			&i.IsTest,
			&i.MediumID,
			&i.IsAuto,
			&i.RelationshipID,
			&i.IsCurrentRevision,
			&i.OriginalID,
			&i.Result,
			&i.IsDeleted,
			&i.CampaignID,
			&i.EngagementLevel,
			&i.Weight,
			&i.IsStar,
			&i.CreatedDate,
			&i.ModifiedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetActivitiesByStatus = `-- name: GetActivitiesByStatus :many
SELECT id, activity_type_id, subject, activity_date_time, duration, location, phone_id, phone_number, details, status_id, priority_id, parent_id, is_test, medium_id, is_auto, relationship_id, is_current_revision, original_id, result, is_deleted, campaign_id, engagement_level, weight, is_star, created_date, modified_date, created_at, updated_at FROM activities 
WHERE status_id = $1 AND is_deleted = FALSE
ORDER BY activity_date_time DESC
`

func (q *Queries) GetActivitiesByStatus(ctx context.Context, statusID uuid.NullUUID) ([]Activity, error) {
	rows, err := q.db.QueryContext(ctx, GetActivitiesByStatus, statusID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Activity{}
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.ActivityTypeID,
			&i.Subject,
			&i.ActivityDateTime,
			&i.Duration,
			&i.Location,
			&i.PhoneID,
			&i.PhoneNumber,
			&i.Details,
			&i.StatusID,
			&i.PriorityID,
			&i.ParentID,
			&i.IsTest,
			&i.MediumID,
			&i.IsAuto,
			&i.RelationshipID,
			&i.IsCurrentRevision,
			&i.OriginalID,
			&i.Result,
			&i.IsDeleted,
			&i.CampaignID,
			&i.EngagementLevel,
			&i.Weight,
			&i.IsStar,
			&i.CreatedDate,
			&i.ModifiedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetActivitiesByType = `-- name: GetActivitiesByType :many
SELECT id, activity_type_id, subject, activity_date_time, duration, location, phone_id, phone_number, details, status_id, priority_id, parent_id, is_test, medium_id, is_auto, relationship_id, is_current_revision, original_id, result, is_deleted, campaign_id, engagement_level, weight, is_star, created_date, modified_date, created_at, updated_at FROM activities 
WHERE activity_type_id = $1 AND is_deleted = FALSE
ORDER BY activity_date_time DESC
`

func (q *Queries) GetActivitiesByType(ctx context.Context, activityTypeID uuid.UUID) ([]Activity, error) {
	rows, err := q.db.QueryContext(ctx, GetActivitiesByType, activityTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Activity{}
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.ActivityTypeID,
			&i.Subject,
			&i.ActivityDateTime,
			&i.Duration,
			&i.Location,
			&i.PhoneID,
			&i.PhoneNumber,
			&i.Details,
			&i.StatusID,
			&i.PriorityID,
			&i.ParentID,
			&i.IsTest,
			&i.MediumID,
			&i.IsAuto,
			&i.RelationshipID,
			&i.IsCurrentRevision,
			&i.OriginalID,
			&i.Result,
			&i.IsDeleted,
			&i.CampaignID,
			&i.EngagementLevel,
			&i.Weight,
			&i.IsStar,
			&i.CreatedDate,
			&i.ModifiedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetActivity = `-- name: GetActivity :one
SELECT id, activity_type_id, subject, activity_date_time, duration, location, phone_id, phone_number, details, status_id, priority_id, parent_id, is_test, medium_id, is_auto, relationship_id, is_current_revision, original_id, result, is_deleted, campaign_id, engagement_level, weight, is_star, created_date, modified_date, created_at, updated_at FROM activities WHERE id = $1
`

func (q *Queries) GetActivity(ctx context.Context, id uuid.UUID) (Activity, error) {
	row := q.db.QueryRowContext(ctx, GetActivity, id)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.ActivityTypeID,
		&i.Subject,
		&i.ActivityDateTime,
		&i.Duration,
		&i.Location,
		&i.PhoneID,
		&i.PhoneNumber,
		&i.Details,
		&i.StatusID,
		&i.PriorityID,
		&i.ParentID,
		&i.IsTest,
		&i.MediumID,
		&i.IsAuto,
		&i.RelationshipID,
		&i.IsCurrentRevision,
		&i.OriginalID,
		&i.Result,
		&i.IsDeleted,
		&i.CampaignID,
		&i.EngagementLevel,
		&i.Weight,
		&i.IsStar,
		&i.CreatedDate,
		&i.ModifiedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetActivityBySubject = `-- name: GetActivityBySubject :one
SELECT id, activity_type_id, subject, activity_date_time, duration, location, phone_id, phone_number, details, status_id, priority_id, parent_id, is_test, medium_id, is_auto, relationship_id, is_current_revision, original_id, result, is_deleted, campaign_id, engagement_level, weight, is_star, created_date, modified_date, created_at, updated_at FROM activities WHERE subject = $1 LIMIT 1
`

func (q *Queries) GetActivityBySubject(ctx context.Context, subject sql.NullString) (Activity, error) {
	row := q.db.QueryRowContext(ctx, GetActivityBySubject, subject)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.ActivityTypeID,
		&i.Subject,
		&i.ActivityDateTime,
		&i.Duration,
		&i.Location,
		&i.PhoneID,
		&i.PhoneNumber,
		&i.Details,
		&i.StatusID,
		&i.PriorityID,
		&i.ParentID,
		&i.IsTest,
		&i.MediumID,
		&i.IsAuto,
		&i.RelationshipID,
		&i.IsCurrentRevision,
		&i.OriginalID,
		&i.Result,
		&i.IsDeleted,
		&i.CampaignID,
		&i.EngagementLevel,
		&i.Weight,
		&i.IsStar,
		&i.CreatedDate,
		&i.ModifiedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetPastActivities = `-- name: GetPastActivities :many
SELECT id, activity_type_id, subject, activity_date_time, duration, location, phone_id, phone_number, details, status_id, priority_id, parent_id, is_test, medium_id, is_auto, relationship_id, is_current_revision, original_id, result, is_deleted, campaign_id, engagement_level, weight, is_star, created_date, modified_date, created_at, updated_at FROM activities 
WHERE activity_date_time < NOW() AND is_deleted = FALSE
ORDER BY activity_date_time DESC
`

func (q *Queries) GetPastActivities(ctx context.Context) ([]Activity, error) {
	rows, err := q.db.QueryContext(ctx, GetPastActivities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Activity{}
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.ActivityTypeID,
			&i.Subject,
			&i.ActivityDateTime,
			&i.Duration,
			&i.Location,
			&i.PhoneID,
			&i.PhoneNumber,
			&i.Details,
			&i.StatusID,
			&i.PriorityID,
			&i.ParentID,
			&i.IsTest,
			&i.MediumID,
			&i.IsAuto,
			&i.RelationshipID,
			&i.IsCurrentRevision,
			&i.OriginalID,
			&i.Result,
			&i.IsDeleted,
			&i.CampaignID,
			&i.EngagementLevel,
			&i.Weight,
			&i.IsStar,
			&i.CreatedDate,
			&i.ModifiedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetUpcomingActivities = `-- name: GetUpcomingActivities :many
SELECT id, activity_type_id, subject, activity_date_time, duration, location, phone_id, phone_number, details, status_id, priority_id, parent_id, is_test, medium_id, is_auto, relationship_id, is_current_revision, original_id, result, is_deleted, campaign_id, engagement_level, weight, is_star, created_date, modified_date, created_at, updated_at FROM activities 
WHERE activity_date_time > NOW() AND is_deleted = FALSE
ORDER BY activity_date_time
`

func (q *Queries) GetUpcomingActivities(ctx context.Context) ([]Activity, error) {
	rows, err := q.db.QueryContext(ctx, GetUpcomingActivities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Activity{}
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.ActivityTypeID,
			&i.Subject,
			&i.ActivityDateTime,
			&i.Duration,
			&i.Location,
			&i.PhoneID,
			&i.PhoneNumber,
			&i.Details,
			&i.StatusID,
			&i.PriorityID,
			&i.ParentID,
			&i.IsTest,
			&i.MediumID,
			&i.IsAuto,
			&i.RelationshipID,
			&i.IsCurrentRevision,
			&i.OriginalID,
			&i.Result,
			&i.IsDeleted,
			&i.CampaignID,
			&i.EngagementLevel,
			&i.Weight,
			&i.IsStar,
			&i.CreatedDate,
			&i.ModifiedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const HardDeleteActivity = `-- name: HardDeleteActivity :exec
DELETE FROM activities WHERE id = $1
`

func (q *Queries) HardDeleteActivity(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, HardDeleteActivity, id)
	return err
}

const ListAllActivities = `-- name: ListAllActivities :many
SELECT id, activity_type_id, subject, activity_date_time, duration, location, phone_id, phone_number, details, status_id, priority_id, parent_id, is_test, medium_id, is_auto, relationship_id, is_current_revision, original_id, result, is_deleted, campaign_id, engagement_level, weight, is_star, created_date, modified_date, created_at, updated_at FROM activities 
WHERE is_deleted = FALSE
ORDER BY activity_date_time DESC
`

func (q *Queries) ListAllActivities(ctx context.Context) ([]Activity, error) {
	rows, err := q.db.QueryContext(ctx, ListAllActivities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Activity{}
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.ActivityTypeID,
			&i.Subject,
			&i.ActivityDateTime,
			&i.Duration,
			&i.Location,
			&i.PhoneID,
			&i.PhoneNumber,
			&i.Details,
			&i.StatusID,
			&i.PriorityID,
			&i.ParentID,
			&i.IsTest,
			&i.MediumID,
			&i.IsAuto,
			&i.RelationshipID,
			&i.IsCurrentRevision,
			&i.OriginalID,
			&i.Result,
			&i.IsDeleted,
			&i.CampaignID,
			&i.EngagementLevel,
			&i.Weight,
			&i.IsStar,
			&i.CreatedDate,
			&i.ModifiedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchActivities = `-- name: SearchActivities :many
SELECT id, activity_type_id, subject, activity_date_time, duration, location, phone_id, phone_number, details, status_id, priority_id, parent_id, is_test, medium_id, is_auto, relationship_id, is_current_revision, original_id, result, is_deleted, campaign_id, engagement_level, weight, is_star, created_date, modified_date, created_at, updated_at FROM activities 
WHERE (subject ILIKE $1 OR details ILIKE $1 OR location ILIKE $1)
AND is_deleted = FALSE
ORDER BY activity_date_time DESC
`

func (q *Queries) SearchActivities(ctx context.Context, subject sql.NullString) ([]Activity, error) {
	rows, err := q.db.QueryContext(ctx, SearchActivities, subject)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Activity{}
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.ActivityTypeID,
			&i.Subject,
			&i.ActivityDateTime,
			&i.Duration,
			&i.Location,
			&i.PhoneID,
			&i.PhoneNumber,
			&i.Details,
			&i.StatusID,
			&i.PriorityID,
			&i.ParentID,
			&i.IsTest,
			&i.MediumID,
			&i.IsAuto,
			&i.RelationshipID,
			&i.IsCurrentRevision,
			&i.OriginalID,
			&i.Result,
			&i.IsDeleted,
			&i.CampaignID,
			&i.EngagementLevel,
			&i.Weight,
			&i.IsStar,
			&i.CreatedDate,
			&i.ModifiedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateActivity = `-- name: UpdateActivity :one
UPDATE activities SET
    activity_type_id = $2, subject = $3, activity_date_time = $4, duration = $5,
    location = $6, phone_id = $7, phone_number = $8, details = $9, status_id = $10,
    priority_id = $11, parent_id = $12, is_test = $13, medium_id = $14, is_auto = $15,
    relationship_id = $16, is_current_revision = $17, original_id = $18, result = $19,
    is_deleted = $20, campaign_id = $21, engagement_level = $22, weight = $23,
    is_star = $24, updated_at = NOW()
WHERE id = $1 RETURNING id, activity_type_id, subject, activity_date_time, duration, location, phone_id, phone_number, details, status_id, priority_id, parent_id, is_test, medium_id, is_auto, relationship_id, is_current_revision, original_id, result, is_deleted, campaign_id, engagement_level, weight, is_star, created_date, modified_date, created_at, updated_at
`

type UpdateActivityParams struct {
	ID                uuid.UUID      `json:"id"`
	ActivityTypeID    uuid.UUID      `json:"activity_type_id"`
	Subject           sql.NullString `json:"subject"`
	ActivityDateTime  time.Time      `json:"activity_date_time"`
	Duration          sql.NullInt32  `json:"duration"`
	Location          sql.NullString `json:"location"`
	PhoneID           uuid.NullUUID  `json:"phone_id"`
	PhoneNumber       sql.NullString `json:"phone_number"`
	Details           sql.NullString `json:"details"`
	StatusID          uuid.NullUUID  `json:"status_id"`
	PriorityID        uuid.NullUUID  `json:"priority_id"`
	ParentID          uuid.NullUUID  `json:"parent_id"`
	IsTest            sql.NullBool   `json:"is_test"`
	MediumID          uuid.NullUUID  `json:"medium_id"`
	IsAuto            sql.NullBool   `json:"is_auto"`
	RelationshipID    uuid.NullUUID  `json:"relationship_id"`
	IsCurrentRevision sql.NullBool   `json:"is_current_revision"`
	OriginalID        uuid.NullUUID  `json:"original_id"`
	Result            sql.NullString `json:"result"`
	IsDeleted         sql.NullBool   `json:"is_deleted"`
	CampaignID        uuid.NullUUID  `json:"campaign_id"`
	EngagementLevel   sql.NullInt32  `json:"engagement_level"`
	Weight            sql.NullInt32  `json:"weight"`
	IsStar            sql.NullBool   `json:"is_star"`
}

func (q *Queries) UpdateActivity(ctx context.Context, arg UpdateActivityParams) (Activity, error) {
	row := q.db.QueryRowContext(ctx, UpdateActivity,
		arg.ID,
		arg.ActivityTypeID,
		arg.Subject,
		arg.ActivityDateTime,
		arg.Duration,
		arg.Location,
		arg.PhoneID,
		arg.PhoneNumber,
		arg.Details,
		arg.StatusID,
		arg.PriorityID,
		arg.ParentID,
		arg.IsTest,
		arg.MediumID,
		arg.IsAuto,
		arg.RelationshipID,
		arg.IsCurrentRevision,
		arg.OriginalID,
		arg.Result,
		arg.IsDeleted,
		arg.CampaignID,
		arg.EngagementLevel,
		arg.Weight,
		arg.IsStar,
	)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.ActivityTypeID,
		&i.Subject,
		&i.ActivityDateTime,
		&i.Duration,
		&i.Location,
		&i.PhoneID,
		&i.PhoneNumber,
		&i.Details,
		&i.StatusID,
		&i.PriorityID,
		&i.ParentID,
		&i.IsTest,
		&i.MediumID,
		&i.IsAuto,
		&i.RelationshipID,
		&i.IsCurrentRevision,
		&i.OriginalID,
		&i.Result,
		&i.IsDeleted,
		&i.CampaignID,
		&i.EngagementLevel,
		&i.Weight,
		&i.IsStar,
		&i.CreatedDate,
		&i.ModifiedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
