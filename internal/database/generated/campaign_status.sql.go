// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: campaign_status.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const ActivateCampaignStatus = `-- name: ActivateCampaignStatus :exec
UPDATE campaign_status SET is_active = TRUE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) ActivateCampaignStatus(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, ActivateCampaignStatus, id)
	return err
}

const CreateCampaignStatus = `-- name: CreateCampaignStatus :one
INSERT INTO campaign_status (
    name, label, grouping, weight, is_active, is_reserved, color
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, name, label, grouping, weight, is_active, is_reserved, color, created_at, updated_at
`

type CreateCampaignStatusParams struct {
	Name       string         `json:"name"`
	Label      string         `json:"label"`
	Grouping   sql.NullString `json:"grouping"`
	Weight     sql.NullInt32  `json:"weight"`
	IsActive   sql.NullBool   `json:"is_active"`
	IsReserved sql.NullBool   `json:"is_reserved"`
	Color      sql.NullString `json:"color"`
}

func (q *Queries) CreateCampaignStatus(ctx context.Context, arg CreateCampaignStatusParams) (CampaignStatus, error) {
	row := q.db.QueryRowContext(ctx, CreateCampaignStatus,
		arg.Name,
		arg.Label,
		arg.Grouping,
		arg.Weight,
		arg.IsActive,
		arg.IsReserved,
		arg.Color,
	)
	var i CampaignStatus
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Label,
		&i.Grouping,
		&i.Weight,
		&i.IsActive,
		&i.IsReserved,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeactivateCampaignStatus = `-- name: DeactivateCampaignStatus :exec
UPDATE campaign_status SET is_active = FALSE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) DeactivateCampaignStatus(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeactivateCampaignStatus, id)
	return err
}

const DeleteCampaignStatus = `-- name: DeleteCampaignStatus :exec
DELETE FROM campaign_status WHERE id = $1
`

func (q *Queries) DeleteCampaignStatus(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteCampaignStatus, id)
	return err
}

const GetCampaignStatus = `-- name: GetCampaignStatus :one
SELECT id, name, label, grouping, weight, is_active, is_reserved, color, created_at, updated_at FROM campaign_status WHERE id = $1
`

func (q *Queries) GetCampaignStatus(ctx context.Context, id uuid.UUID) (CampaignStatus, error) {
	row := q.db.QueryRowContext(ctx, GetCampaignStatus, id)
	var i CampaignStatus
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Label,
		&i.Grouping,
		&i.Weight,
		&i.IsActive,
		&i.IsReserved,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCampaignStatusByName = `-- name: GetCampaignStatusByName :one
SELECT id, name, label, grouping, weight, is_active, is_reserved, color, created_at, updated_at FROM campaign_status WHERE name = $1
`

func (q *Queries) GetCampaignStatusByName(ctx context.Context, name string) (CampaignStatus, error) {
	row := q.db.QueryRowContext(ctx, GetCampaignStatusByName, name)
	var i CampaignStatus
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Label,
		&i.Grouping,
		&i.Weight,
		&i.IsActive,
		&i.IsReserved,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCampaignStatusStats = `-- name: GetCampaignStatusStats :many
SELECT 
    cs.grouping,
    cs.name as status,
    COUNT(c.id) as campaign_count
FROM campaign_status cs
LEFT JOIN campaigns c ON cs.id = c.status_id AND c.is_active = TRUE
WHERE cs.is_active = $1
GROUP BY cs.grouping, cs.name, cs.weight
ORDER BY cs.grouping, cs.weight, cs.name
`

type GetCampaignStatusStatsRow struct {
	Grouping      sql.NullString `json:"grouping"`
	Status        string         `json:"status"`
	CampaignCount int64          `json:"campaign_count"`
}

func (q *Queries) GetCampaignStatusStats(ctx context.Context, isActive sql.NullBool) ([]GetCampaignStatusStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignStatusStats, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCampaignStatusStatsRow{}
	for rows.Next() {
		var i GetCampaignStatusStatsRow
		if err := rows.Scan(&i.Grouping, &i.Status, &i.CampaignCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListActiveCampaignStatus = `-- name: ListActiveCampaignStatus :many
SELECT id, name, label, grouping, weight, is_active, is_reserved, color, created_at, updated_at FROM campaign_status 
WHERE is_active = TRUE 
ORDER BY weight, name
`

func (q *Queries) ListActiveCampaignStatus(ctx context.Context) ([]CampaignStatus, error) {
	rows, err := q.db.QueryContext(ctx, ListActiveCampaignStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignStatus{}
	for rows.Next() {
		var i CampaignStatus
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Grouping,
			&i.Weight,
			&i.IsActive,
			&i.IsReserved,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListActiveCampaignStatuses = `-- name: ListActiveCampaignStatuses :many
SELECT id, name, label, grouping, weight, is_active, is_reserved, color, created_at, updated_at FROM campaign_status 
WHERE grouping = 'Active' AND is_active = $1 
ORDER BY weight, name
`

func (q *Queries) ListActiveCampaignStatuses(ctx context.Context, isActive sql.NullBool) ([]CampaignStatus, error) {
	rows, err := q.db.QueryContext(ctx, ListActiveCampaignStatuses, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignStatus{}
	for rows.Next() {
		var i CampaignStatus
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Grouping,
			&i.Weight,
			&i.IsActive,
			&i.IsReserved,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCampaignStatus = `-- name: ListCampaignStatus :many
SELECT id, name, label, grouping, weight, is_active, is_reserved, color, created_at, updated_at FROM campaign_status 
WHERE is_active = $1 
ORDER BY weight, name
`

func (q *Queries) ListCampaignStatus(ctx context.Context, isActive sql.NullBool) ([]CampaignStatus, error) {
	rows, err := q.db.QueryContext(ctx, ListCampaignStatus, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignStatus{}
	for rows.Next() {
		var i CampaignStatus
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Grouping,
			&i.Weight,
			&i.IsActive,
			&i.IsReserved,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCampaignStatusByGrouping = `-- name: ListCampaignStatusByGrouping :many
SELECT id, name, label, grouping, weight, is_active, is_reserved, color, created_at, updated_at FROM campaign_status 
WHERE grouping = $1 AND is_active = $2 
ORDER BY weight, name
`

type ListCampaignStatusByGroupingParams struct {
	Grouping sql.NullString `json:"grouping"`
	IsActive sql.NullBool   `json:"is_active"`
}

func (q *Queries) ListCampaignStatusByGrouping(ctx context.Context, arg ListCampaignStatusByGroupingParams) ([]CampaignStatus, error) {
	rows, err := q.db.QueryContext(ctx, ListCampaignStatusByGrouping, arg.Grouping, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignStatus{}
	for rows.Next() {
		var i CampaignStatus
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Grouping,
			&i.Weight,
			&i.IsActive,
			&i.IsReserved,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCancelledCampaignStatus = `-- name: ListCancelledCampaignStatus :many
SELECT id, name, label, grouping, weight, is_active, is_reserved, color, created_at, updated_at FROM campaign_status 
WHERE grouping = 'Cancelled' AND is_active = $1 
ORDER BY weight, name
`

func (q *Queries) ListCancelledCampaignStatus(ctx context.Context, isActive sql.NullBool) ([]CampaignStatus, error) {
	rows, err := q.db.QueryContext(ctx, ListCancelledCampaignStatus, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignStatus{}
	for rows.Next() {
		var i CampaignStatus
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Grouping,
			&i.Weight,
			&i.IsActive,
			&i.IsReserved,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCompletedCampaignStatus = `-- name: ListCompletedCampaignStatus :many
SELECT id, name, label, grouping, weight, is_active, is_reserved, color, created_at, updated_at FROM campaign_status 
WHERE grouping = 'Completed' AND is_active = $1 
ORDER BY weight, name
`

func (q *Queries) ListCompletedCampaignStatus(ctx context.Context, isActive sql.NullBool) ([]CampaignStatus, error) {
	rows, err := q.db.QueryContext(ctx, ListCompletedCampaignStatus, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignStatus{}
	for rows.Next() {
		var i CampaignStatus
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Grouping,
			&i.Weight,
			&i.IsActive,
			&i.IsReserved,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListPlannedCampaignStatus = `-- name: ListPlannedCampaignStatus :many
SELECT id, name, label, grouping, weight, is_active, is_reserved, color, created_at, updated_at FROM campaign_status 
WHERE grouping = 'Planned' AND is_active = $1 
ORDER BY weight, name
`

func (q *Queries) ListPlannedCampaignStatus(ctx context.Context, isActive sql.NullBool) ([]CampaignStatus, error) {
	rows, err := q.db.QueryContext(ctx, ListPlannedCampaignStatus, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignStatus{}
	for rows.Next() {
		var i CampaignStatus
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Grouping,
			&i.Weight,
			&i.IsActive,
			&i.IsReserved,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListReservedCampaignStatus = `-- name: ListReservedCampaignStatus :many
SELECT id, name, label, grouping, weight, is_active, is_reserved, color, created_at, updated_at FROM campaign_status 
WHERE is_reserved = TRUE AND is_active = $1 
ORDER BY weight, name
`

func (q *Queries) ListReservedCampaignStatus(ctx context.Context, isActive sql.NullBool) ([]CampaignStatus, error) {
	rows, err := q.db.QueryContext(ctx, ListReservedCampaignStatus, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignStatus{}
	for rows.Next() {
		var i CampaignStatus
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Grouping,
			&i.Weight,
			&i.IsActive,
			&i.IsReserved,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchCampaignStatus = `-- name: SearchCampaignStatus :many
SELECT id, name, label, grouping, weight, is_active, is_reserved, color, created_at, updated_at FROM campaign_status 
WHERE (name ILIKE $1 OR label ILIKE $1) 
AND is_active = $2 
ORDER BY weight, name
`

type SearchCampaignStatusParams struct {
	Name     string       `json:"name"`
	IsActive sql.NullBool `json:"is_active"`
}

func (q *Queries) SearchCampaignStatus(ctx context.Context, arg SearchCampaignStatusParams) ([]CampaignStatus, error) {
	rows, err := q.db.QueryContext(ctx, SearchCampaignStatus, arg.Name, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignStatus{}
	for rows.Next() {
		var i CampaignStatus
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Grouping,
			&i.Weight,
			&i.IsActive,
			&i.IsReserved,
			&i.Color,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateCampaignStatus = `-- name: UpdateCampaignStatus :one
UPDATE campaign_status SET
    name = $2, label = $3, grouping = $4, weight = $5,
    is_active = $6, is_reserved = $7, color = $8, updated_at = NOW()
WHERE id = $1 RETURNING id, name, label, grouping, weight, is_active, is_reserved, color, created_at, updated_at
`

type UpdateCampaignStatusParams struct {
	ID         uuid.UUID      `json:"id"`
	Name       string         `json:"name"`
	Label      string         `json:"label"`
	Grouping   sql.NullString `json:"grouping"`
	Weight     sql.NullInt32  `json:"weight"`
	IsActive   sql.NullBool   `json:"is_active"`
	IsReserved sql.NullBool   `json:"is_reserved"`
	Color      sql.NullString `json:"color"`
}

func (q *Queries) UpdateCampaignStatus(ctx context.Context, arg UpdateCampaignStatusParams) (CampaignStatus, error) {
	row := q.db.QueryRowContext(ctx, UpdateCampaignStatus,
		arg.ID,
		arg.Name,
		arg.Label,
		arg.Grouping,
		arg.Weight,
		arg.IsActive,
		arg.IsReserved,
		arg.Color,
	)
	var i CampaignStatus
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Label,
		&i.Grouping,
		&i.Weight,
		&i.IsActive,
		&i.IsReserved,
		&i.Color,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateCampaignStatusWeight = `-- name: UpdateCampaignStatusWeight :exec
UPDATE campaign_status SET weight = $2, updated_at = NOW() WHERE id = $1
`

type UpdateCampaignStatusWeightParams struct {
	ID     uuid.UUID     `json:"id"`
	Weight sql.NullInt32 `json:"weight"`
}

func (q *Queries) UpdateCampaignStatusWeight(ctx context.Context, arg UpdateCampaignStatusWeightParams) error {
	_, err := q.db.ExecContext(ctx, UpdateCampaignStatusWeight, arg.ID, arg.Weight)
	return err
}
