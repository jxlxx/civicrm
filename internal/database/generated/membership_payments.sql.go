// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: membership_payments.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const CreateMembershipPayment = `-- name: CreateMembershipPayment :one
INSERT INTO membership_payments (
    membership_id, contribution_id, payment_amount, payment_currency,
    payment_date, payment_status
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, membership_id, contribution_id, payment_amount, payment_currency, payment_date, payment_status, created_at, updated_at
`

type CreateMembershipPaymentParams struct {
	MembershipID    uuid.UUID      `json:"membership_id"`
	ContributionID  uuid.UUID      `json:"contribution_id"`
	PaymentAmount   string         `json:"payment_amount"`
	PaymentCurrency sql.NullString `json:"payment_currency"`
	PaymentDate     time.Time      `json:"payment_date"`
	PaymentStatus   sql.NullString `json:"payment_status"`
}

func (q *Queries) CreateMembershipPayment(ctx context.Context, arg CreateMembershipPaymentParams) (MembershipPayment, error) {
	row := q.db.QueryRowContext(ctx, CreateMembershipPayment,
		arg.MembershipID,
		arg.ContributionID,
		arg.PaymentAmount,
		arg.PaymentCurrency,
		arg.PaymentDate,
		arg.PaymentStatus,
	)
	var i MembershipPayment
	err := row.Scan(
		&i.ID,
		&i.MembershipID,
		&i.ContributionID,
		&i.PaymentAmount,
		&i.PaymentCurrency,
		&i.PaymentDate,
		&i.PaymentStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteMembershipPayment = `-- name: DeleteMembershipPayment :exec
DELETE FROM membership_payments WHERE id = $1
`

func (q *Queries) DeleteMembershipPayment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteMembershipPayment, id)
	return err
}

const GetMembershipPayment = `-- name: GetMembershipPayment :one
SELECT id, membership_id, contribution_id, payment_amount, payment_currency, payment_date, payment_status, created_at, updated_at FROM membership_payments WHERE id = $1
`

func (q *Queries) GetMembershipPayment(ctx context.Context, id uuid.UUID) (MembershipPayment, error) {
	row := q.db.QueryRowContext(ctx, GetMembershipPayment, id)
	var i MembershipPayment
	err := row.Scan(
		&i.ID,
		&i.MembershipID,
		&i.ContributionID,
		&i.PaymentAmount,
		&i.PaymentCurrency,
		&i.PaymentDate,
		&i.PaymentStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetMembershipPaymentStats = `-- name: GetMembershipPaymentStats :many
SELECT 
    payment_status,
    payment_currency,
    COUNT(*) as count,
    SUM(payment_amount) as total_amount
FROM membership_payments 
WHERE payment_date >= $1 AND payment_date <= $2
GROUP BY payment_status, payment_currency
ORDER BY payment_status, payment_currency
`

type GetMembershipPaymentStatsParams struct {
	PaymentDate   time.Time `json:"payment_date"`
	PaymentDate_2 time.Time `json:"payment_date_2"`
}

type GetMembershipPaymentStatsRow struct {
	PaymentStatus   sql.NullString `json:"payment_status"`
	PaymentCurrency sql.NullString `json:"payment_currency"`
	Count           int64          `json:"count"`
	TotalAmount     int64          `json:"total_amount"`
}

func (q *Queries) GetMembershipPaymentStats(ctx context.Context, arg GetMembershipPaymentStatsParams) ([]GetMembershipPaymentStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetMembershipPaymentStats, arg.PaymentDate, arg.PaymentDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMembershipPaymentStatsRow{}
	for rows.Next() {
		var i GetMembershipPaymentStatsRow
		if err := rows.Scan(
			&i.PaymentStatus,
			&i.PaymentCurrency,
			&i.Count,
			&i.TotalAmount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetMembershipPaymentTotal = `-- name: GetMembershipPaymentTotal :one
SELECT SUM(payment_amount) FROM membership_payments 
WHERE membership_id = $1 AND payment_status = 'Completed'
`

func (q *Queries) GetMembershipPaymentTotal(ctx context.Context, membershipID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, GetMembershipPaymentTotal, membershipID)
	var sum int64
	err := row.Scan(&sum)
	return sum, err
}

const GetMembershipPaymentsByContribution = `-- name: GetMembershipPaymentsByContribution :one
SELECT id, membership_id, contribution_id, payment_amount, payment_currency, payment_date, payment_status, created_at, updated_at FROM membership_payments WHERE contribution_id = $1
`

func (q *Queries) GetMembershipPaymentsByContribution(ctx context.Context, contributionID uuid.UUID) (MembershipPayment, error) {
	row := q.db.QueryRowContext(ctx, GetMembershipPaymentsByContribution, contributionID)
	var i MembershipPayment
	err := row.Scan(
		&i.ID,
		&i.MembershipID,
		&i.ContributionID,
		&i.PaymentAmount,
		&i.PaymentCurrency,
		&i.PaymentDate,
		&i.PaymentStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetMembershipPaymentsByMembership = `-- name: GetMembershipPaymentsByMembership :many
SELECT id, membership_id, contribution_id, payment_amount, payment_currency, payment_date, payment_status, created_at, updated_at FROM membership_payments 
WHERE membership_id = $1 
ORDER BY payment_date DESC
`

func (q *Queries) GetMembershipPaymentsByMembership(ctx context.Context, membershipID uuid.UUID) ([]MembershipPayment, error) {
	rows, err := q.db.QueryContext(ctx, GetMembershipPaymentsByMembership, membershipID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MembershipPayment{}
	for rows.Next() {
		var i MembershipPayment
		if err := rows.Scan(
			&i.ID,
			&i.MembershipID,
			&i.ContributionID,
			&i.PaymentAmount,
			&i.PaymentCurrency,
			&i.PaymentDate,
			&i.PaymentStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListMembershipPayments = `-- name: ListMembershipPayments :many
SELECT id, membership_id, contribution_id, payment_amount, payment_currency, payment_date, payment_status, created_at, updated_at FROM membership_payments 
ORDER BY payment_date DESC
`

func (q *Queries) ListMembershipPayments(ctx context.Context) ([]MembershipPayment, error) {
	rows, err := q.db.QueryContext(ctx, ListMembershipPayments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MembershipPayment{}
	for rows.Next() {
		var i MembershipPayment
		if err := rows.Scan(
			&i.ID,
			&i.MembershipID,
			&i.ContributionID,
			&i.PaymentAmount,
			&i.PaymentCurrency,
			&i.PaymentDate,
			&i.PaymentStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListMembershipPaymentsByCurrency = `-- name: ListMembershipPaymentsByCurrency :many
SELECT id, membership_id, contribution_id, payment_amount, payment_currency, payment_date, payment_status, created_at, updated_at FROM membership_payments 
WHERE payment_currency = $1 
ORDER BY payment_date DESC
`

func (q *Queries) ListMembershipPaymentsByCurrency(ctx context.Context, paymentCurrency sql.NullString) ([]MembershipPayment, error) {
	rows, err := q.db.QueryContext(ctx, ListMembershipPaymentsByCurrency, paymentCurrency)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MembershipPayment{}
	for rows.Next() {
		var i MembershipPayment
		if err := rows.Scan(
			&i.ID,
			&i.MembershipID,
			&i.ContributionID,
			&i.PaymentAmount,
			&i.PaymentCurrency,
			&i.PaymentDate,
			&i.PaymentStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListMembershipPaymentsByDateRange = `-- name: ListMembershipPaymentsByDateRange :many
SELECT id, membership_id, contribution_id, payment_amount, payment_currency, payment_date, payment_status, created_at, updated_at FROM membership_payments 
WHERE payment_date >= $1 AND payment_date <= $2 
ORDER BY payment_date DESC
`

type ListMembershipPaymentsByDateRangeParams struct {
	PaymentDate   time.Time `json:"payment_date"`
	PaymentDate_2 time.Time `json:"payment_date_2"`
}

func (q *Queries) ListMembershipPaymentsByDateRange(ctx context.Context, arg ListMembershipPaymentsByDateRangeParams) ([]MembershipPayment, error) {
	rows, err := q.db.QueryContext(ctx, ListMembershipPaymentsByDateRange, arg.PaymentDate, arg.PaymentDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MembershipPayment{}
	for rows.Next() {
		var i MembershipPayment
		if err := rows.Scan(
			&i.ID,
			&i.MembershipID,
			&i.ContributionID,
			&i.PaymentAmount,
			&i.PaymentCurrency,
			&i.PaymentDate,
			&i.PaymentStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListMembershipPaymentsByStatus = `-- name: ListMembershipPaymentsByStatus :many
SELECT id, membership_id, contribution_id, payment_amount, payment_currency, payment_date, payment_status, created_at, updated_at FROM membership_payments 
WHERE payment_status = $1 
ORDER BY payment_date DESC
`

func (q *Queries) ListMembershipPaymentsByStatus(ctx context.Context, paymentStatus sql.NullString) ([]MembershipPayment, error) {
	rows, err := q.db.QueryContext(ctx, ListMembershipPaymentsByStatus, paymentStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MembershipPayment{}
	for rows.Next() {
		var i MembershipPayment
		if err := rows.Scan(
			&i.ID,
			&i.MembershipID,
			&i.ContributionID,
			&i.PaymentAmount,
			&i.PaymentCurrency,
			&i.PaymentDate,
			&i.PaymentStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchMembershipPayments = `-- name: SearchMembershipPayments :many
SELECT mp.id, mp.membership_id, mp.contribution_id, mp.payment_amount, mp.payment_currency, mp.payment_date, mp.payment_status, mp.created_at, mp.updated_at FROM membership_payments mp
JOIN memberships m ON mp.membership_id = m.id
JOIN contacts c ON m.contact_id = c.id
WHERE (c.first_name ILIKE $1 OR c.last_name ILIKE $1 OR c.organization_name ILIKE $1)
ORDER BY mp.payment_date DESC
`

func (q *Queries) SearchMembershipPayments(ctx context.Context, firstName sql.NullString) ([]MembershipPayment, error) {
	rows, err := q.db.QueryContext(ctx, SearchMembershipPayments, firstName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MembershipPayment{}
	for rows.Next() {
		var i MembershipPayment
		if err := rows.Scan(
			&i.ID,
			&i.MembershipID,
			&i.ContributionID,
			&i.PaymentAmount,
			&i.PaymentCurrency,
			&i.PaymentDate,
			&i.PaymentStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateMembershipPayment = `-- name: UpdateMembershipPayment :one
UPDATE membership_payments SET
    membership_id = $2, contribution_id = $3, payment_amount = $4,
    payment_currency = $5, payment_date = $6, payment_status = $7,
    updated_at = NOW()
WHERE id = $1 RETURNING id, membership_id, contribution_id, payment_amount, payment_currency, payment_date, payment_status, created_at, updated_at
`

type UpdateMembershipPaymentParams struct {
	ID              uuid.UUID      `json:"id"`
	MembershipID    uuid.UUID      `json:"membership_id"`
	ContributionID  uuid.UUID      `json:"contribution_id"`
	PaymentAmount   string         `json:"payment_amount"`
	PaymentCurrency sql.NullString `json:"payment_currency"`
	PaymentDate     time.Time      `json:"payment_date"`
	PaymentStatus   sql.NullString `json:"payment_status"`
}

func (q *Queries) UpdateMembershipPayment(ctx context.Context, arg UpdateMembershipPaymentParams) (MembershipPayment, error) {
	row := q.db.QueryRowContext(ctx, UpdateMembershipPayment,
		arg.ID,
		arg.MembershipID,
		arg.ContributionID,
		arg.PaymentAmount,
		arg.PaymentCurrency,
		arg.PaymentDate,
		arg.PaymentStatus,
	)
	var i MembershipPayment
	err := row.Scan(
		&i.ID,
		&i.MembershipID,
		&i.ContributionID,
		&i.PaymentAmount,
		&i.PaymentCurrency,
		&i.PaymentDate,
		&i.PaymentStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdatePaymentStatus = `-- name: UpdatePaymentStatus :exec
UPDATE membership_payments SET payment_status = $2, updated_at = NOW() WHERE id = $1
`

type UpdatePaymentStatusParams struct {
	ID            uuid.UUID      `json:"id"`
	PaymentStatus sql.NullString `json:"payment_status"`
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) error {
	_, err := q.db.ExecContext(ctx, UpdatePaymentStatus, arg.ID, arg.PaymentStatus)
	return err
}
