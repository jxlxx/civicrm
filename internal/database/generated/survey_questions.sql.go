// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: survey_questions.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const ActivateSurveyQuestion = `-- name: ActivateSurveyQuestion :exec
UPDATE survey_questions SET is_active = TRUE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) ActivateSurveyQuestion(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, ActivateSurveyQuestion, id)
	return err
}

const CreateSurveyQuestion = `-- name: CreateSurveyQuestion :one
INSERT INTO survey_questions (
    survey_id, question_text, question_type, question_options, is_required, weight, help_text, is_active
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, survey_id, question_text, question_type, question_options, is_required, weight, help_text, is_active, created_at, updated_at
`

type CreateSurveyQuestionParams struct {
	SurveyID        uuid.UUID      `json:"survey_id"`
	QuestionText    string         `json:"question_text"`
	QuestionType    string         `json:"question_type"`
	QuestionOptions sql.NullString `json:"question_options"`
	IsRequired      sql.NullBool   `json:"is_required"`
	Weight          sql.NullInt32  `json:"weight"`
	HelpText        sql.NullString `json:"help_text"`
	IsActive        sql.NullBool   `json:"is_active"`
}

func (q *Queries) CreateSurveyQuestion(ctx context.Context, arg CreateSurveyQuestionParams) (SurveyQuestion, error) {
	row := q.db.QueryRowContext(ctx, CreateSurveyQuestion,
		arg.SurveyID,
		arg.QuestionText,
		arg.QuestionType,
		arg.QuestionOptions,
		arg.IsRequired,
		arg.Weight,
		arg.HelpText,
		arg.IsActive,
	)
	var i SurveyQuestion
	err := row.Scan(
		&i.ID,
		&i.SurveyID,
		&i.QuestionText,
		&i.QuestionType,
		&i.QuestionOptions,
		&i.IsRequired,
		&i.Weight,
		&i.HelpText,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeactivateSurveyQuestion = `-- name: DeactivateSurveyQuestion :exec
UPDATE survey_questions SET is_active = FALSE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) DeactivateSurveyQuestion(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeactivateSurveyQuestion, id)
	return err
}

const DeleteSurveyQuestion = `-- name: DeleteSurveyQuestion :exec
DELETE FROM survey_questions WHERE id = $1
`

func (q *Queries) DeleteSurveyQuestion(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteSurveyQuestion, id)
	return err
}

const GetActiveSurveyQuestionsBySurvey = `-- name: GetActiveSurveyQuestionsBySurvey :many
SELECT id, survey_id, question_text, question_type, question_options, is_required, weight, help_text, is_active, created_at, updated_at FROM survey_questions 
WHERE survey_id = $1 AND is_active = TRUE 
ORDER BY weight, id
`

func (q *Queries) GetActiveSurveyQuestionsBySurvey(ctx context.Context, surveyID uuid.UUID) ([]SurveyQuestion, error) {
	rows, err := q.db.QueryContext(ctx, GetActiveSurveyQuestionsBySurvey, surveyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SurveyQuestion{}
	for rows.Next() {
		var i SurveyQuestion
		if err := rows.Scan(
			&i.ID,
			&i.SurveyID,
			&i.QuestionText,
			&i.QuestionType,
			&i.QuestionOptions,
			&i.IsRequired,
			&i.Weight,
			&i.HelpText,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetRequiredSurveyQuestions = `-- name: GetRequiredSurveyQuestions :many
SELECT id, survey_id, question_text, question_type, question_options, is_required, weight, help_text, is_active, created_at, updated_at FROM survey_questions 
WHERE survey_id = $1 AND is_required = TRUE AND is_active = $2 
ORDER BY weight, id
`

type GetRequiredSurveyQuestionsParams struct {
	SurveyID uuid.UUID    `json:"survey_id"`
	IsActive sql.NullBool `json:"is_active"`
}

func (q *Queries) GetRequiredSurveyQuestions(ctx context.Context, arg GetRequiredSurveyQuestionsParams) ([]SurveyQuestion, error) {
	rows, err := q.db.QueryContext(ctx, GetRequiredSurveyQuestions, arg.SurveyID, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SurveyQuestion{}
	for rows.Next() {
		var i SurveyQuestion
		if err := rows.Scan(
			&i.ID,
			&i.SurveyID,
			&i.QuestionText,
			&i.QuestionType,
			&i.QuestionOptions,
			&i.IsRequired,
			&i.Weight,
			&i.HelpText,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetSurveyQuestion = `-- name: GetSurveyQuestion :one
SELECT id, survey_id, question_text, question_type, question_options, is_required, weight, help_text, is_active, created_at, updated_at FROM survey_questions WHERE id = $1
`

func (q *Queries) GetSurveyQuestion(ctx context.Context, id uuid.UUID) (SurveyQuestion, error) {
	row := q.db.QueryRowContext(ctx, GetSurveyQuestion, id)
	var i SurveyQuestion
	err := row.Scan(
		&i.ID,
		&i.SurveyID,
		&i.QuestionText,
		&i.QuestionType,
		&i.QuestionOptions,
		&i.IsRequired,
		&i.Weight,
		&i.HelpText,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetSurveyQuestionStats = `-- name: GetSurveyQuestionStats :many
SELECT 
    sq.question_type,
    COUNT(sq.id) as question_count
FROM survey_questions sq
WHERE sq.survey_id = $1 AND sq.is_active = $2
GROUP BY sq.question_type
ORDER BY sq.question_type
`

type GetSurveyQuestionStatsParams struct {
	SurveyID uuid.UUID    `json:"survey_id"`
	IsActive sql.NullBool `json:"is_active"`
}

type GetSurveyQuestionStatsRow struct {
	QuestionType  string `json:"question_type"`
	QuestionCount int64  `json:"question_count"`
}

func (q *Queries) GetSurveyQuestionStats(ctx context.Context, arg GetSurveyQuestionStatsParams) ([]GetSurveyQuestionStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetSurveyQuestionStats, arg.SurveyID, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSurveyQuestionStatsRow{}
	for rows.Next() {
		var i GetSurveyQuestionStatsRow
		if err := rows.Scan(&i.QuestionType, &i.QuestionCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetSurveyQuestionSummary = `-- name: GetSurveyQuestionSummary :many
SELECT 
    s.title as survey_title,
    COUNT(sq.id) as question_count,
    COUNT(CASE WHEN sq.is_required = TRUE THEN 1 END) as required_count,
    STRING_AGG(DISTINCT sq.question_type, ', ') as question_types
FROM surveys s
LEFT JOIN survey_questions sq ON s.id = sq.survey_id AND sq.is_active = TRUE
WHERE s.is_active = $1
GROUP BY s.id, s.title
ORDER BY s.created_date DESC
`

type GetSurveyQuestionSummaryRow struct {
	SurveyTitle   string `json:"survey_title"`
	QuestionCount int64  `json:"question_count"`
	RequiredCount int64  `json:"required_count"`
	QuestionTypes []byte `json:"question_types"`
}

func (q *Queries) GetSurveyQuestionSummary(ctx context.Context, isActive sql.NullBool) ([]GetSurveyQuestionSummaryRow, error) {
	rows, err := q.db.QueryContext(ctx, GetSurveyQuestionSummary, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSurveyQuestionSummaryRow{}
	for rows.Next() {
		var i GetSurveyQuestionSummaryRow
		if err := rows.Scan(
			&i.SurveyTitle,
			&i.QuestionCount,
			&i.RequiredCount,
			&i.QuestionTypes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetSurveyQuestionsBySurvey = `-- name: GetSurveyQuestionsBySurvey :many
SELECT id, survey_id, question_text, question_type, question_options, is_required, weight, help_text, is_active, created_at, updated_at FROM survey_questions 
WHERE survey_id = $1 AND is_active = $2 
ORDER BY weight, id
`

type GetSurveyQuestionsBySurveyParams struct {
	SurveyID uuid.UUID    `json:"survey_id"`
	IsActive sql.NullBool `json:"is_active"`
}

func (q *Queries) GetSurveyQuestionsBySurvey(ctx context.Context, arg GetSurveyQuestionsBySurveyParams) ([]SurveyQuestion, error) {
	rows, err := q.db.QueryContext(ctx, GetSurveyQuestionsBySurvey, arg.SurveyID, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SurveyQuestion{}
	for rows.Next() {
		var i SurveyQuestion
		if err := rows.Scan(
			&i.ID,
			&i.SurveyID,
			&i.QuestionText,
			&i.QuestionType,
			&i.QuestionOptions,
			&i.IsRequired,
			&i.Weight,
			&i.HelpText,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetSurveyQuestionsByType = `-- name: GetSurveyQuestionsByType :many
SELECT id, survey_id, question_text, question_type, question_options, is_required, weight, help_text, is_active, created_at, updated_at FROM survey_questions 
WHERE survey_id = $1 AND question_type = $2 AND is_active = $3 
ORDER BY weight, id
`

type GetSurveyQuestionsByTypeParams struct {
	SurveyID     uuid.UUID    `json:"survey_id"`
	QuestionType string       `json:"question_type"`
	IsActive     sql.NullBool `json:"is_active"`
}

func (q *Queries) GetSurveyQuestionsByType(ctx context.Context, arg GetSurveyQuestionsByTypeParams) ([]SurveyQuestion, error) {
	rows, err := q.db.QueryContext(ctx, GetSurveyQuestionsByType, arg.SurveyID, arg.QuestionType, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SurveyQuestion{}
	for rows.Next() {
		var i SurveyQuestion
		if err := rows.Scan(
			&i.ID,
			&i.SurveyID,
			&i.QuestionText,
			&i.QuestionType,
			&i.QuestionOptions,
			&i.IsRequired,
			&i.Weight,
			&i.HelpText,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListActiveSurveyQuestions = `-- name: ListActiveSurveyQuestions :many
SELECT id, survey_id, question_text, question_type, question_options, is_required, weight, help_text, is_active, created_at, updated_at FROM survey_questions 
WHERE is_active = TRUE 
ORDER BY weight, id
`

func (q *Queries) ListActiveSurveyQuestions(ctx context.Context) ([]SurveyQuestion, error) {
	rows, err := q.db.QueryContext(ctx, ListActiveSurveyQuestions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SurveyQuestion{}
	for rows.Next() {
		var i SurveyQuestion
		if err := rows.Scan(
			&i.ID,
			&i.SurveyID,
			&i.QuestionText,
			&i.QuestionType,
			&i.QuestionOptions,
			&i.IsRequired,
			&i.Weight,
			&i.HelpText,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListSurveyQuestions = `-- name: ListSurveyQuestions :many
SELECT id, survey_id, question_text, question_type, question_options, is_required, weight, help_text, is_active, created_at, updated_at FROM survey_questions 
ORDER BY weight, id
`

func (q *Queries) ListSurveyQuestions(ctx context.Context) ([]SurveyQuestion, error) {
	rows, err := q.db.QueryContext(ctx, ListSurveyQuestions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SurveyQuestion{}
	for rows.Next() {
		var i SurveyQuestion
		if err := rows.Scan(
			&i.ID,
			&i.SurveyID,
			&i.QuestionText,
			&i.QuestionType,
			&i.QuestionOptions,
			&i.IsRequired,
			&i.Weight,
			&i.HelpText,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListSurveyQuestionsByType = `-- name: ListSurveyQuestionsByType :many
SELECT id, survey_id, question_text, question_type, question_options, is_required, weight, help_text, is_active, created_at, updated_at FROM survey_questions 
WHERE question_type = $1 AND is_active = $2 
ORDER BY weight, id
`

type ListSurveyQuestionsByTypeParams struct {
	QuestionType string       `json:"question_type"`
	IsActive     sql.NullBool `json:"is_active"`
}

func (q *Queries) ListSurveyQuestionsByType(ctx context.Context, arg ListSurveyQuestionsByTypeParams) ([]SurveyQuestion, error) {
	rows, err := q.db.QueryContext(ctx, ListSurveyQuestionsByType, arg.QuestionType, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SurveyQuestion{}
	for rows.Next() {
		var i SurveyQuestion
		if err := rows.Scan(
			&i.ID,
			&i.SurveyID,
			&i.QuestionText,
			&i.QuestionType,
			&i.QuestionOptions,
			&i.IsRequired,
			&i.Weight,
			&i.HelpText,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchSurveyQuestions = `-- name: SearchSurveyQuestions :many
SELECT id, survey_id, question_text, question_type, question_options, is_required, weight, help_text, is_active, created_at, updated_at FROM survey_questions 
WHERE question_text ILIKE $1 AND is_active = $2 
ORDER BY weight, id
`

type SearchSurveyQuestionsParams struct {
	QuestionText string       `json:"question_text"`
	IsActive     sql.NullBool `json:"is_active"`
}

func (q *Queries) SearchSurveyQuestions(ctx context.Context, arg SearchSurveyQuestionsParams) ([]SurveyQuestion, error) {
	rows, err := q.db.QueryContext(ctx, SearchSurveyQuestions, arg.QuestionText, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SurveyQuestion{}
	for rows.Next() {
		var i SurveyQuestion
		if err := rows.Scan(
			&i.ID,
			&i.SurveyID,
			&i.QuestionText,
			&i.QuestionType,
			&i.QuestionOptions,
			&i.IsRequired,
			&i.Weight,
			&i.HelpText,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateSurveyQuestion = `-- name: UpdateSurveyQuestion :one
UPDATE survey_questions SET
    survey_id = $2, question_text = $3, question_type = $4, question_options = $5,
    is_required = $6, weight = $7, help_text = $8, is_active = $9, updated_at = NOW()
WHERE id = $1 RETURNING id, survey_id, question_text, question_type, question_options, is_required, weight, help_text, is_active, created_at, updated_at
`

type UpdateSurveyQuestionParams struct {
	ID              uuid.UUID      `json:"id"`
	SurveyID        uuid.UUID      `json:"survey_id"`
	QuestionText    string         `json:"question_text"`
	QuestionType    string         `json:"question_type"`
	QuestionOptions sql.NullString `json:"question_options"`
	IsRequired      sql.NullBool   `json:"is_required"`
	Weight          sql.NullInt32  `json:"weight"`
	HelpText        sql.NullString `json:"help_text"`
	IsActive        sql.NullBool   `json:"is_active"`
}

func (q *Queries) UpdateSurveyQuestion(ctx context.Context, arg UpdateSurveyQuestionParams) (SurveyQuestion, error) {
	row := q.db.QueryRowContext(ctx, UpdateSurveyQuestion,
		arg.ID,
		arg.SurveyID,
		arg.QuestionText,
		arg.QuestionType,
		arg.QuestionOptions,
		arg.IsRequired,
		arg.Weight,
		arg.HelpText,
		arg.IsActive,
	)
	var i SurveyQuestion
	err := row.Scan(
		&i.ID,
		&i.SurveyID,
		&i.QuestionText,
		&i.QuestionType,
		&i.QuestionOptions,
		&i.IsRequired,
		&i.Weight,
		&i.HelpText,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateSurveyQuestionWeight = `-- name: UpdateSurveyQuestionWeight :exec
UPDATE survey_questions SET weight = $2, updated_at = NOW() WHERE id = $1
`

type UpdateSurveyQuestionWeightParams struct {
	ID     uuid.UUID     `json:"id"`
	Weight sql.NullInt32 `json:"weight"`
}

func (q *Queries) UpdateSurveyQuestionWeight(ctx context.Context, arg UpdateSurveyQuestionWeightParams) error {
	_, err := q.db.ExecContext(ctx, UpdateSurveyQuestionWeight, arg.ID, arg.Weight)
	return err
}
