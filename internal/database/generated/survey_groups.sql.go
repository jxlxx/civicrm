// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: survey_groups.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const ActivateSurveyGroup = `-- name: ActivateSurveyGroup :exec
UPDATE survey_groups SET is_active = TRUE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) ActivateSurveyGroup(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, ActivateSurveyGroup, id)
	return err
}

const CreateSurveyGroup = `-- name: CreateSurveyGroup :one
INSERT INTO survey_groups (
    survey_id, group_id, is_active
) VALUES (
    $1, $2, $3
) RETURNING id, survey_id, group_id, is_active, created_at, updated_at
`

type CreateSurveyGroupParams struct {
	SurveyID uuid.UUID    `json:"survey_id"`
	GroupID  uuid.UUID    `json:"group_id"`
	IsActive sql.NullBool `json:"is_active"`
}

func (q *Queries) CreateSurveyGroup(ctx context.Context, arg CreateSurveyGroupParams) (SurveyGroup, error) {
	row := q.db.QueryRowContext(ctx, CreateSurveyGroup, arg.SurveyID, arg.GroupID, arg.IsActive)
	var i SurveyGroup
	err := row.Scan(
		&i.ID,
		&i.SurveyID,
		&i.GroupID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeactivateSurveyGroup = `-- name: DeactivateSurveyGroup :exec
UPDATE survey_groups SET is_active = FALSE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) DeactivateSurveyGroup(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeactivateSurveyGroup, id)
	return err
}

const DeleteSurveyGroup = `-- name: DeleteSurveyGroup :exec
DELETE FROM survey_groups WHERE id = $1
`

func (q *Queries) DeleteSurveyGroup(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteSurveyGroup, id)
	return err
}

const GetActiveSurveyGroups = `-- name: GetActiveSurveyGroups :many
SELECT id, survey_id, group_id, is_active, created_at, updated_at FROM survey_groups 
WHERE survey_id = $1 AND is_active = TRUE 
ORDER BY id
`

func (q *Queries) GetActiveSurveyGroups(ctx context.Context, surveyID uuid.UUID) ([]SurveyGroup, error) {
	rows, err := q.db.QueryContext(ctx, GetActiveSurveyGroups, surveyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SurveyGroup{}
	for rows.Next() {
		var i SurveyGroup
		if err := rows.Scan(
			&i.ID,
			&i.SurveyID,
			&i.GroupID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetSurveyGroup = `-- name: GetSurveyGroup :one
SELECT id, survey_id, group_id, is_active, created_at, updated_at FROM survey_groups WHERE id = $1
`

func (q *Queries) GetSurveyGroup(ctx context.Context, id uuid.UUID) (SurveyGroup, error) {
	row := q.db.QueryRowContext(ctx, GetSurveyGroup, id)
	var i SurveyGroup
	err := row.Scan(
		&i.ID,
		&i.SurveyID,
		&i.GroupID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetSurveyGroupBySurveyAndGroup = `-- name: GetSurveyGroupBySurveyAndGroup :one
SELECT id, survey_id, group_id, is_active, created_at, updated_at FROM survey_groups 
WHERE survey_id = $1 AND group_id = $2 
ORDER BY id LIMIT 1
`

type GetSurveyGroupBySurveyAndGroupParams struct {
	SurveyID uuid.UUID `json:"survey_id"`
	GroupID  uuid.UUID `json:"group_id"`
}

func (q *Queries) GetSurveyGroupBySurveyAndGroup(ctx context.Context, arg GetSurveyGroupBySurveyAndGroupParams) (SurveyGroup, error) {
	row := q.db.QueryRowContext(ctx, GetSurveyGroupBySurveyAndGroup, arg.SurveyID, arg.GroupID)
	var i SurveyGroup
	err := row.Scan(
		&i.ID,
		&i.SurveyID,
		&i.GroupID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetSurveyGroupStats = `-- name: GetSurveyGroupStats :many
SELECT 
    g.title as group_name,
    COUNT(sg.id) as survey_count
FROM survey_groups sg
JOIN groups g ON sg.group_id = g.id
WHERE sg.is_active = $1
GROUP BY g.title
ORDER BY g.title
`

type GetSurveyGroupStatsRow struct {
	GroupName   sql.NullString `json:"group_name"`
	SurveyCount int64          `json:"survey_count"`
}

func (q *Queries) GetSurveyGroupStats(ctx context.Context, isActive sql.NullBool) ([]GetSurveyGroupStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetSurveyGroupStats, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSurveyGroupStatsRow{}
	for rows.Next() {
		var i GetSurveyGroupStatsRow
		if err := rows.Scan(&i.GroupName, &i.SurveyCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetSurveyGroupsByGroup = `-- name: GetSurveyGroupsByGroup :many
SELECT id, survey_id, group_id, is_active, created_at, updated_at FROM survey_groups 
WHERE group_id = $1 
ORDER BY id
`

func (q *Queries) GetSurveyGroupsByGroup(ctx context.Context, groupID uuid.UUID) ([]SurveyGroup, error) {
	rows, err := q.db.QueryContext(ctx, GetSurveyGroupsByGroup, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SurveyGroup{}
	for rows.Next() {
		var i SurveyGroup
		if err := rows.Scan(
			&i.ID,
			&i.SurveyID,
			&i.GroupID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetSurveyGroupsBySurvey = `-- name: GetSurveyGroupsBySurvey :many
SELECT id, survey_id, group_id, is_active, created_at, updated_at FROM survey_groups 
WHERE survey_id = $1 
ORDER BY id
`

func (q *Queries) GetSurveyGroupsBySurvey(ctx context.Context, surveyID uuid.UUID) ([]SurveyGroup, error) {
	rows, err := q.db.QueryContext(ctx, GetSurveyGroupsBySurvey, surveyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SurveyGroup{}
	for rows.Next() {
		var i SurveyGroup
		if err := rows.Scan(
			&i.ID,
			&i.SurveyID,
			&i.GroupID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetSurveyTargetAudience = `-- name: GetSurveyTargetAudience :many
SELECT 
    s.title as survey_title,
    COUNT(sg.id) as group_count,
    STRING_AGG(g.title, ', ') as target_groups
FROM surveys s
LEFT JOIN survey_groups sg ON s.id = sg.survey_id AND sg.is_active = TRUE
LEFT JOIN groups g ON sg.group_id = g.id
WHERE s.is_active = $1
GROUP BY s.id, s.title
ORDER BY s.created_date DESC
`

type GetSurveyTargetAudienceRow struct {
	SurveyTitle  string `json:"survey_title"`
	GroupCount   int64  `json:"group_count"`
	TargetGroups []byte `json:"target_groups"`
}

func (q *Queries) GetSurveyTargetAudience(ctx context.Context, isActive sql.NullBool) ([]GetSurveyTargetAudienceRow, error) {
	rows, err := q.db.QueryContext(ctx, GetSurveyTargetAudience, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSurveyTargetAudienceRow{}
	for rows.Next() {
		var i GetSurveyTargetAudienceRow
		if err := rows.Scan(&i.SurveyTitle, &i.GroupCount, &i.TargetGroups); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListActiveSurveyGroups = `-- name: ListActiveSurveyGroups :many
SELECT id, survey_id, group_id, is_active, created_at, updated_at FROM survey_groups 
WHERE is_active = TRUE 
ORDER BY id
`

func (q *Queries) ListActiveSurveyGroups(ctx context.Context) ([]SurveyGroup, error) {
	rows, err := q.db.QueryContext(ctx, ListActiveSurveyGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SurveyGroup{}
	for rows.Next() {
		var i SurveyGroup
		if err := rows.Scan(
			&i.ID,
			&i.SurveyID,
			&i.GroupID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListSurveyGroups = `-- name: ListSurveyGroups :many
SELECT id, survey_id, group_id, is_active, created_at, updated_at FROM survey_groups 
ORDER BY id
`

func (q *Queries) ListSurveyGroups(ctx context.Context) ([]SurveyGroup, error) {
	rows, err := q.db.QueryContext(ctx, ListSurveyGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SurveyGroup{}
	for rows.Next() {
		var i SurveyGroup
		if err := rows.Scan(
			&i.ID,
			&i.SurveyID,
			&i.GroupID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchSurveyGroups = `-- name: SearchSurveyGroups :many
SELECT sg.id, sg.survey_id, sg.group_id, sg.is_active, sg.created_at, sg.updated_at FROM survey_groups sg
JOIN surveys s ON sg.survey_id = s.id
JOIN groups g ON sg.group_id = g.id
WHERE (s.title ILIKE $1 OR g.title ILIKE $1)
ORDER BY sg.id
`

func (q *Queries) SearchSurveyGroups(ctx context.Context, title string) ([]SurveyGroup, error) {
	rows, err := q.db.QueryContext(ctx, SearchSurveyGroups, title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SurveyGroup{}
	for rows.Next() {
		var i SurveyGroup
		if err := rows.Scan(
			&i.ID,
			&i.SurveyID,
			&i.GroupID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateSurveyGroup = `-- name: UpdateSurveyGroup :one
UPDATE survey_groups SET
    survey_id = $2, group_id = $3, is_active = $4, updated_at = NOW()
WHERE id = $1 RETURNING id, survey_id, group_id, is_active, created_at, updated_at
`

type UpdateSurveyGroupParams struct {
	ID       uuid.UUID    `json:"id"`
	SurveyID uuid.UUID    `json:"survey_id"`
	GroupID  uuid.UUID    `json:"group_id"`
	IsActive sql.NullBool `json:"is_active"`
}

func (q *Queries) UpdateSurveyGroup(ctx context.Context, arg UpdateSurveyGroupParams) (SurveyGroup, error) {
	row := q.db.QueryRowContext(ctx, UpdateSurveyGroup,
		arg.ID,
		arg.SurveyID,
		arg.GroupID,
		arg.IsActive,
	)
	var i SurveyGroup
	err := row.Scan(
		&i.ID,
		&i.SurveyID,
		&i.GroupID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
