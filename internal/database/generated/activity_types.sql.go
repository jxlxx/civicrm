// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: activity_types.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const CountActiveActivityTypes = `-- name: CountActiveActivityTypes :one
SELECT COUNT(*) FROM activity_types WHERE is_active = TRUE
`

func (q *Queries) CountActiveActivityTypes(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountActiveActivityTypes)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountActivityTypes = `-- name: CountActivityTypes :one
SELECT COUNT(*) FROM activity_types
`

func (q *Queries) CountActivityTypes(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountActivityTypes)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountReservedActivityTypes = `-- name: CountReservedActivityTypes :one
SELECT COUNT(*) FROM activity_types WHERE is_reserved = TRUE
`

func (q *Queries) CountReservedActivityTypes(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountReservedActivityTypes)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateActivityType = `-- name: CreateActivityType :one
INSERT INTO activity_types (
    name, label, description, icon, is_active, is_reserved,
    is_target, is_multi_record, is_component
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, name, label, description, icon, is_active, is_reserved, is_target, is_multi_record, is_component, created_at, updated_at
`

type CreateActivityTypeParams struct {
	Name          string         `json:"name"`
	Label         string         `json:"label"`
	Description   sql.NullString `json:"description"`
	Icon          sql.NullString `json:"icon"`
	IsActive      sql.NullBool   `json:"is_active"`
	IsReserved    sql.NullBool   `json:"is_reserved"`
	IsTarget      sql.NullBool   `json:"is_target"`
	IsMultiRecord sql.NullBool   `json:"is_multi_record"`
	IsComponent   sql.NullBool   `json:"is_component"`
}

func (q *Queries) CreateActivityType(ctx context.Context, arg CreateActivityTypeParams) (ActivityType, error) {
	row := q.db.QueryRowContext(ctx, CreateActivityType,
		arg.Name,
		arg.Label,
		arg.Description,
		arg.Icon,
		arg.IsActive,
		arg.IsReserved,
		arg.IsTarget,
		arg.IsMultiRecord,
		arg.IsComponent,
	)
	var i ActivityType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Label,
		&i.Description,
		&i.Icon,
		&i.IsActive,
		&i.IsReserved,
		&i.IsTarget,
		&i.IsMultiRecord,
		&i.IsComponent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteActivityType = `-- name: DeleteActivityType :exec
DELETE FROM activity_types WHERE id = $1
`

func (q *Queries) DeleteActivityType(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteActivityType, id)
	return err
}

const GetActivityType = `-- name: GetActivityType :one
SELECT id, name, label, description, icon, is_active, is_reserved, is_target, is_multi_record, is_component, created_at, updated_at FROM activity_types WHERE id = $1
`

func (q *Queries) GetActivityType(ctx context.Context, id uuid.UUID) (ActivityType, error) {
	row := q.db.QueryRowContext(ctx, GetActivityType, id)
	var i ActivityType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Label,
		&i.Description,
		&i.Icon,
		&i.IsActive,
		&i.IsReserved,
		&i.IsTarget,
		&i.IsMultiRecord,
		&i.IsComponent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetActivityTypeByLabel = `-- name: GetActivityTypeByLabel :one
SELECT id, name, label, description, icon, is_active, is_reserved, is_target, is_multi_record, is_component, created_at, updated_at FROM activity_types WHERE label = $1
`

func (q *Queries) GetActivityTypeByLabel(ctx context.Context, label string) (ActivityType, error) {
	row := q.db.QueryRowContext(ctx, GetActivityTypeByLabel, label)
	var i ActivityType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Label,
		&i.Description,
		&i.Icon,
		&i.IsActive,
		&i.IsReserved,
		&i.IsTarget,
		&i.IsMultiRecord,
		&i.IsComponent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetActivityTypeByName = `-- name: GetActivityTypeByName :one
SELECT id, name, label, description, icon, is_active, is_reserved, is_target, is_multi_record, is_component, created_at, updated_at FROM activity_types WHERE name = $1
`

func (q *Queries) GetActivityTypeByName(ctx context.Context, name string) (ActivityType, error) {
	row := q.db.QueryRowContext(ctx, GetActivityTypeByName, name)
	var i ActivityType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Label,
		&i.Description,
		&i.Icon,
		&i.IsActive,
		&i.IsReserved,
		&i.IsTarget,
		&i.IsMultiRecord,
		&i.IsComponent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListActiveActivityTypes = `-- name: ListActiveActivityTypes :many
SELECT id, name, label, description, icon, is_active, is_reserved, is_target, is_multi_record, is_component, created_at, updated_at FROM activity_types 
WHERE is_active = TRUE
ORDER BY name
`

func (q *Queries) ListActiveActivityTypes(ctx context.Context) ([]ActivityType, error) {
	rows, err := q.db.QueryContext(ctx, ListActiveActivityTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActivityType{}
	for rows.Next() {
		var i ActivityType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Description,
			&i.Icon,
			&i.IsActive,
			&i.IsReserved,
			&i.IsTarget,
			&i.IsMultiRecord,
			&i.IsComponent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListActivityTypes = `-- name: ListActivityTypes :many
SELECT id, name, label, description, icon, is_active, is_reserved, is_target, is_multi_record, is_component, created_at, updated_at FROM activity_types 
ORDER BY name
`

func (q *Queries) ListActivityTypes(ctx context.Context) ([]ActivityType, error) {
	rows, err := q.db.QueryContext(ctx, ListActivityTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActivityType{}
	for rows.Next() {
		var i ActivityType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Description,
			&i.Icon,
			&i.IsActive,
			&i.IsReserved,
			&i.IsTarget,
			&i.IsMultiRecord,
			&i.IsComponent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListMultiRecordActivityTypes = `-- name: ListMultiRecordActivityTypes :many
SELECT id, name, label, description, icon, is_active, is_reserved, is_target, is_multi_record, is_component, created_at, updated_at FROM activity_types 
WHERE is_multi_record = TRUE AND is_active = TRUE
ORDER BY name
`

func (q *Queries) ListMultiRecordActivityTypes(ctx context.Context) ([]ActivityType, error) {
	rows, err := q.db.QueryContext(ctx, ListMultiRecordActivityTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActivityType{}
	for rows.Next() {
		var i ActivityType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Description,
			&i.Icon,
			&i.IsActive,
			&i.IsReserved,
			&i.IsTarget,
			&i.IsMultiRecord,
			&i.IsComponent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListReservedActivityTypes = `-- name: ListReservedActivityTypes :many
SELECT id, name, label, description, icon, is_active, is_reserved, is_target, is_multi_record, is_component, created_at, updated_at FROM activity_types 
WHERE is_reserved = TRUE
ORDER BY name
`

func (q *Queries) ListReservedActivityTypes(ctx context.Context) ([]ActivityType, error) {
	rows, err := q.db.QueryContext(ctx, ListReservedActivityTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActivityType{}
	for rows.Next() {
		var i ActivityType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Description,
			&i.Icon,
			&i.IsActive,
			&i.IsReserved,
			&i.IsTarget,
			&i.IsMultiRecord,
			&i.IsComponent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListTargetActivityTypes = `-- name: ListTargetActivityTypes :many
SELECT id, name, label, description, icon, is_active, is_reserved, is_target, is_multi_record, is_component, created_at, updated_at FROM activity_types 
WHERE is_target = TRUE AND is_active = TRUE
ORDER BY name
`

func (q *Queries) ListTargetActivityTypes(ctx context.Context) ([]ActivityType, error) {
	rows, err := q.db.QueryContext(ctx, ListTargetActivityTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActivityType{}
	for rows.Next() {
		var i ActivityType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Description,
			&i.Icon,
			&i.IsActive,
			&i.IsReserved,
			&i.IsTarget,
			&i.IsMultiRecord,
			&i.IsComponent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchActivityTypes = `-- name: SearchActivityTypes :many
SELECT id, name, label, description, icon, is_active, is_reserved, is_target, is_multi_record, is_component, created_at, updated_at FROM activity_types 
WHERE (name ILIKE $1 OR label ILIKE $1 OR description ILIKE $1)
ORDER BY name
`

func (q *Queries) SearchActivityTypes(ctx context.Context, name string) ([]ActivityType, error) {
	rows, err := q.db.QueryContext(ctx, SearchActivityTypes, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActivityType{}
	for rows.Next() {
		var i ActivityType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Description,
			&i.Icon,
			&i.IsActive,
			&i.IsReserved,
			&i.IsTarget,
			&i.IsMultiRecord,
			&i.IsComponent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateActivityType = `-- name: UpdateActivityType :one
UPDATE activity_types SET
    name = $2, label = $3, description = $4, icon = $5, is_active = $6,
    is_reserved = $7, is_target = $8, is_multi_record = $9, is_component = $10,
    updated_at = NOW()
WHERE id = $1 RETURNING id, name, label, description, icon, is_active, is_reserved, is_target, is_multi_record, is_component, created_at, updated_at
`

type UpdateActivityTypeParams struct {
	ID            uuid.UUID      `json:"id"`
	Name          string         `json:"name"`
	Label         string         `json:"label"`
	Description   sql.NullString `json:"description"`
	Icon          sql.NullString `json:"icon"`
	IsActive      sql.NullBool   `json:"is_active"`
	IsReserved    sql.NullBool   `json:"is_reserved"`
	IsTarget      sql.NullBool   `json:"is_target"`
	IsMultiRecord sql.NullBool   `json:"is_multi_record"`
	IsComponent   sql.NullBool   `json:"is_component"`
}

func (q *Queries) UpdateActivityType(ctx context.Context, arg UpdateActivityTypeParams) (ActivityType, error) {
	row := q.db.QueryRowContext(ctx, UpdateActivityType,
		arg.ID,
		arg.Name,
		arg.Label,
		arg.Description,
		arg.Icon,
		arg.IsActive,
		arg.IsReserved,
		arg.IsTarget,
		arg.IsMultiRecord,
		arg.IsComponent,
	)
	var i ActivityType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Label,
		&i.Description,
		&i.Icon,
		&i.IsActive,
		&i.IsReserved,
		&i.IsTarget,
		&i.IsMultiRecord,
		&i.IsComponent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
