// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: campaigns.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const ActivateCampaign = `-- name: ActivateCampaign :exec
UPDATE campaigns SET is_active = TRUE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) ActivateCampaign(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, ActivateCampaign, id)
	return err
}

const CreateCampaign = `-- name: CreateCampaign :one
INSERT INTO campaigns (
    name, title, description, campaign_type_id, status_id, parent_id,
    is_active, start_date, end_date, goal_revenue, goal_contacts,
    actual_revenue, actual_contacts, external_identifier
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14
) RETURNING id, name, title, description, campaign_type_id, status_id, parent_id, is_active, start_date, end_date, goal_revenue, goal_contacts, actual_revenue, actual_contacts, external_identifier, created_date, modified_date, created_at, updated_at
`

type CreateCampaignParams struct {
	Name               string         `json:"name"`
	Title              string         `json:"title"`
	Description        sql.NullString `json:"description"`
	CampaignTypeID     uuid.NullUUID  `json:"campaign_type_id"`
	StatusID           uuid.NullUUID  `json:"status_id"`
	ParentID           uuid.NullUUID  `json:"parent_id"`
	IsActive           sql.NullBool   `json:"is_active"`
	StartDate          sql.NullTime   `json:"start_date"`
	EndDate            sql.NullTime   `json:"end_date"`
	GoalRevenue        sql.NullString `json:"goal_revenue"`
	GoalContacts       sql.NullInt32  `json:"goal_contacts"`
	ActualRevenue      sql.NullString `json:"actual_revenue"`
	ActualContacts     sql.NullInt32  `json:"actual_contacts"`
	ExternalIdentifier sql.NullString `json:"external_identifier"`
}

func (q *Queries) CreateCampaign(ctx context.Context, arg CreateCampaignParams) (Campaign, error) {
	row := q.db.QueryRowContext(ctx, CreateCampaign,
		arg.Name,
		arg.Title,
		arg.Description,
		arg.CampaignTypeID,
		arg.StatusID,
		arg.ParentID,
		arg.IsActive,
		arg.StartDate,
		arg.EndDate,
		arg.GoalRevenue,
		arg.GoalContacts,
		arg.ActualRevenue,
		arg.ActualContacts,
		arg.ExternalIdentifier,
	)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.CampaignTypeID,
		&i.StatusID,
		&i.ParentID,
		&i.IsActive,
		&i.StartDate,
		&i.EndDate,
		&i.GoalRevenue,
		&i.GoalContacts,
		&i.ActualRevenue,
		&i.ActualContacts,
		&i.ExternalIdentifier,
		&i.CreatedDate,
		&i.ModifiedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeactivateCampaign = `-- name: DeactivateCampaign :exec
UPDATE campaigns SET is_active = FALSE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) DeactivateCampaign(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeactivateCampaign, id)
	return err
}

const DeleteCampaign = `-- name: DeleteCampaign :exec
DELETE FROM campaigns WHERE id = $1
`

func (q *Queries) DeleteCampaign(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteCampaign, id)
	return err
}

const GetCampaign = `-- name: GetCampaign :one
SELECT id, name, title, description, campaign_type_id, status_id, parent_id, is_active, start_date, end_date, goal_revenue, goal_contacts, actual_revenue, actual_contacts, external_identifier, created_date, modified_date, created_at, updated_at FROM campaigns WHERE id = $1
`

func (q *Queries) GetCampaign(ctx context.Context, id uuid.UUID) (Campaign, error) {
	row := q.db.QueryRowContext(ctx, GetCampaign, id)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.CampaignTypeID,
		&i.StatusID,
		&i.ParentID,
		&i.IsActive,
		&i.StartDate,
		&i.EndDate,
		&i.GoalRevenue,
		&i.GoalContacts,
		&i.ActualRevenue,
		&i.ActualContacts,
		&i.ExternalIdentifier,
		&i.CreatedDate,
		&i.ModifiedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCampaignByExternalId = `-- name: GetCampaignByExternalId :one
SELECT id, name, title, description, campaign_type_id, status_id, parent_id, is_active, start_date, end_date, goal_revenue, goal_contacts, actual_revenue, actual_contacts, external_identifier, created_date, modified_date, created_at, updated_at FROM campaigns WHERE external_identifier = $1
`

func (q *Queries) GetCampaignByExternalId(ctx context.Context, externalIdentifier sql.NullString) (Campaign, error) {
	row := q.db.QueryRowContext(ctx, GetCampaignByExternalId, externalIdentifier)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.CampaignTypeID,
		&i.StatusID,
		&i.ParentID,
		&i.IsActive,
		&i.StartDate,
		&i.EndDate,
		&i.GoalRevenue,
		&i.GoalContacts,
		&i.ActualRevenue,
		&i.ActualContacts,
		&i.ExternalIdentifier,
		&i.CreatedDate,
		&i.ModifiedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCampaignByName = `-- name: GetCampaignByName :one
SELECT id, name, title, description, campaign_type_id, status_id, parent_id, is_active, start_date, end_date, goal_revenue, goal_contacts, actual_revenue, actual_contacts, external_identifier, created_date, modified_date, created_at, updated_at FROM campaigns WHERE name = $1
`

func (q *Queries) GetCampaignByName(ctx context.Context, name string) (Campaign, error) {
	row := q.db.QueryRowContext(ctx, GetCampaignByName, name)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.CampaignTypeID,
		&i.StatusID,
		&i.ParentID,
		&i.IsActive,
		&i.StartDate,
		&i.EndDate,
		&i.GoalRevenue,
		&i.GoalContacts,
		&i.ActualRevenue,
		&i.ActualContacts,
		&i.ExternalIdentifier,
		&i.CreatedDate,
		&i.ModifiedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCampaignHierarchy = `-- name: GetCampaignHierarchy :many
WITH RECURSIVE campaign_tree AS (
    SELECT id, name, title, parent_id, 0 as level
    FROM campaigns 
    WHERE parent_id IS NULL AND is_active = TRUE
    UNION ALL
    SELECT c.id, c.name, c.title, c.parent_id, ct.level + 1
    FROM campaigns c
    JOIN campaign_tree ct ON c.parent_id = ct.id
    WHERE c.is_active = TRUE
)
SELECT id, name, title, parent_id, level FROM campaign_tree ORDER BY level, name
`

type GetCampaignHierarchyRow struct {
	ID       uuid.UUID     `json:"id"`
	Name     string        `json:"name"`
	Title    string        `json:"title"`
	ParentID uuid.NullUUID `json:"parent_id"`
	Level    int32         `json:"level"`
}

func (q *Queries) GetCampaignHierarchy(ctx context.Context) ([]GetCampaignHierarchyRow, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignHierarchy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCampaignHierarchyRow{}
	for rows.Next() {
		var i GetCampaignHierarchyRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.ParentID,
			&i.Level,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCampaignStats = `-- name: GetCampaignStats :many
SELECT 
    ct.name as campaign_type,
    cs.grouping as status_grouping,
    cs.name as status,
    COUNT(c.id) as campaign_count,
    SUM(c.goal_revenue) as total_goal_revenue,
    SUM(c.actual_revenue) as total_actual_revenue
FROM campaigns c
LEFT JOIN campaign_types ct ON c.campaign_type_id = ct.id
LEFT JOIN campaign_status cs ON c.status_id = cs.id
WHERE c.is_active = $1
GROUP BY ct.name, cs.grouping, cs.name, ct.weight, cs.weight
ORDER BY ct.weight, ct.name, cs.weight, cs.name
`

type GetCampaignStatsRow struct {
	CampaignType       sql.NullString `json:"campaign_type"`
	StatusGrouping     sql.NullString `json:"status_grouping"`
	Status             sql.NullString `json:"status"`
	CampaignCount      int64          `json:"campaign_count"`
	TotalGoalRevenue   int64          `json:"total_goal_revenue"`
	TotalActualRevenue int64          `json:"total_actual_revenue"`
}

func (q *Queries) GetCampaignStats(ctx context.Context, isActive sql.NullBool) ([]GetCampaignStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignStats, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCampaignStatsRow{}
	for rows.Next() {
		var i GetCampaignStatsRow
		if err := rows.Scan(
			&i.CampaignType,
			&i.StatusGrouping,
			&i.Status,
			&i.CampaignCount,
			&i.TotalGoalRevenue,
			&i.TotalActualRevenue,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCampaignsByParent = `-- name: GetCampaignsByParent :many
SELECT id, name, title, description, campaign_type_id, status_id, parent_id, is_active, start_date, end_date, goal_revenue, goal_contacts, actual_revenue, actual_contacts, external_identifier, created_date, modified_date, created_at, updated_at FROM campaigns WHERE parent_id = $1 ORDER BY start_date DESC
`

func (q *Queries) GetCampaignsByParent(ctx context.Context, parentID uuid.NullUUID) ([]Campaign, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignsByParent, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Campaign{}
	for rows.Next() {
		var i Campaign
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.CampaignTypeID,
			&i.StatusID,
			&i.ParentID,
			&i.IsActive,
			&i.StartDate,
			&i.EndDate,
			&i.GoalRevenue,
			&i.GoalContacts,
			&i.ActualRevenue,
			&i.ActualContacts,
			&i.ExternalIdentifier,
			&i.CreatedDate,
			&i.ModifiedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCampaignsByStatus = `-- name: GetCampaignsByStatus :many
SELECT id, name, title, description, campaign_type_id, status_id, parent_id, is_active, start_date, end_date, goal_revenue, goal_contacts, actual_revenue, actual_contacts, external_identifier, created_date, modified_date, created_at, updated_at FROM campaigns WHERE status_id = $1 ORDER BY start_date DESC
`

func (q *Queries) GetCampaignsByStatus(ctx context.Context, statusID uuid.NullUUID) ([]Campaign, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignsByStatus, statusID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Campaign{}
	for rows.Next() {
		var i Campaign
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.CampaignTypeID,
			&i.StatusID,
			&i.ParentID,
			&i.IsActive,
			&i.StartDate,
			&i.EndDate,
			&i.GoalRevenue,
			&i.GoalContacts,
			&i.ActualRevenue,
			&i.ActualContacts,
			&i.ExternalIdentifier,
			&i.CreatedDate,
			&i.ModifiedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetCampaignsByType = `-- name: GetCampaignsByType :many
SELECT id, name, title, description, campaign_type_id, status_id, parent_id, is_active, start_date, end_date, goal_revenue, goal_contacts, actual_revenue, actual_contacts, external_identifier, created_date, modified_date, created_at, updated_at FROM campaigns WHERE campaign_type_id = $1 ORDER BY start_date DESC
`

func (q *Queries) GetCampaignsByType(ctx context.Context, campaignTypeID uuid.NullUUID) ([]Campaign, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignsByType, campaignTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Campaign{}
	for rows.Next() {
		var i Campaign
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.CampaignTypeID,
			&i.StatusID,
			&i.ParentID,
			&i.IsActive,
			&i.StartDate,
			&i.EndDate,
			&i.GoalRevenue,
			&i.GoalContacts,
			&i.ActualRevenue,
			&i.ActualContacts,
			&i.ExternalIdentifier,
			&i.CreatedDate,
			&i.ModifiedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListActiveCampaigns = `-- name: ListActiveCampaigns :many
SELECT id, name, title, description, campaign_type_id, status_id, parent_id, is_active, start_date, end_date, goal_revenue, goal_contacts, actual_revenue, actual_contacts, external_identifier, created_date, modified_date, created_at, updated_at FROM campaigns WHERE is_active = TRUE ORDER BY start_date DESC
`

func (q *Queries) ListActiveCampaigns(ctx context.Context) ([]Campaign, error) {
	rows, err := q.db.QueryContext(ctx, ListActiveCampaigns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Campaign{}
	for rows.Next() {
		var i Campaign
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.CampaignTypeID,
			&i.StatusID,
			&i.ParentID,
			&i.IsActive,
			&i.StartDate,
			&i.EndDate,
			&i.GoalRevenue,
			&i.GoalContacts,
			&i.ActualRevenue,
			&i.ActualContacts,
			&i.ExternalIdentifier,
			&i.CreatedDate,
			&i.ModifiedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCampaigns = `-- name: ListCampaigns :many
SELECT id, name, title, description, campaign_type_id, status_id, parent_id, is_active, start_date, end_date, goal_revenue, goal_contacts, actual_revenue, actual_contacts, external_identifier, created_date, modified_date, created_at, updated_at FROM campaigns ORDER BY start_date DESC
`

func (q *Queries) ListCampaigns(ctx context.Context) ([]Campaign, error) {
	rows, err := q.db.QueryContext(ctx, ListCampaigns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Campaign{}
	for rows.Next() {
		var i Campaign
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.CampaignTypeID,
			&i.StatusID,
			&i.ParentID,
			&i.IsActive,
			&i.StartDate,
			&i.EndDate,
			&i.GoalRevenue,
			&i.GoalContacts,
			&i.ActualRevenue,
			&i.ActualContacts,
			&i.ExternalIdentifier,
			&i.CreatedDate,
			&i.ModifiedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCampaignsByDateRange = `-- name: ListCampaignsByDateRange :many
SELECT id, name, title, description, campaign_type_id, status_id, parent_id, is_active, start_date, end_date, goal_revenue, goal_contacts, actual_revenue, actual_contacts, external_identifier, created_date, modified_date, created_at, updated_at FROM campaigns 
WHERE start_date >= $1 AND start_date <= $2 
ORDER BY start_date DESC
`

type ListCampaignsByDateRangeParams struct {
	StartDate   sql.NullTime `json:"start_date"`
	StartDate_2 sql.NullTime `json:"start_date_2"`
}

func (q *Queries) ListCampaignsByDateRange(ctx context.Context, arg ListCampaignsByDateRangeParams) ([]Campaign, error) {
	rows, err := q.db.QueryContext(ctx, ListCampaignsByDateRange, arg.StartDate, arg.StartDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Campaign{}
	for rows.Next() {
		var i Campaign
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.CampaignTypeID,
			&i.StatusID,
			&i.ParentID,
			&i.IsActive,
			&i.StartDate,
			&i.EndDate,
			&i.GoalRevenue,
			&i.GoalContacts,
			&i.ActualRevenue,
			&i.ActualContacts,
			&i.ExternalIdentifier,
			&i.CreatedDate,
			&i.ModifiedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCampaignsByGoal = `-- name: ListCampaignsByGoal :many
SELECT id, name, title, description, campaign_type_id, status_id, parent_id, is_active, start_date, end_date, goal_revenue, goal_contacts, actual_revenue, actual_contacts, external_identifier, created_date, modified_date, created_at, updated_at FROM campaigns 
WHERE goal_revenue >= $1 AND goal_revenue <= $2 
ORDER BY goal_revenue DESC
`

type ListCampaignsByGoalParams struct {
	GoalRevenue   sql.NullString `json:"goal_revenue"`
	GoalRevenue_2 sql.NullString `json:"goal_revenue_2"`
}

func (q *Queries) ListCampaignsByGoal(ctx context.Context, arg ListCampaignsByGoalParams) ([]Campaign, error) {
	rows, err := q.db.QueryContext(ctx, ListCampaignsByGoal, arg.GoalRevenue, arg.GoalRevenue_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Campaign{}
	for rows.Next() {
		var i Campaign
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.CampaignTypeID,
			&i.StatusID,
			&i.ParentID,
			&i.IsActive,
			&i.StartDate,
			&i.EndDate,
			&i.GoalRevenue,
			&i.GoalContacts,
			&i.ActualRevenue,
			&i.ActualContacts,
			&i.ExternalIdentifier,
			&i.CreatedDate,
			&i.ModifiedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListExpiringCampaigns = `-- name: ListExpiringCampaigns :many
SELECT id, name, title, description, campaign_type_id, status_id, parent_id, is_active, start_date, end_date, goal_revenue, goal_contacts, actual_revenue, actual_contacts, external_identifier, created_date, modified_date, created_at, updated_at FROM campaigns 
WHERE end_date >= $1 AND end_date <= $2 
ORDER BY end_date ASC
`

type ListExpiringCampaignsParams struct {
	EndDate   sql.NullTime `json:"end_date"`
	EndDate_2 sql.NullTime `json:"end_date_2"`
}

func (q *Queries) ListExpiringCampaigns(ctx context.Context, arg ListExpiringCampaignsParams) ([]Campaign, error) {
	rows, err := q.db.QueryContext(ctx, ListExpiringCampaigns, arg.EndDate, arg.EndDate_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Campaign{}
	for rows.Next() {
		var i Campaign
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.CampaignTypeID,
			&i.StatusID,
			&i.ParentID,
			&i.IsActive,
			&i.StartDate,
			&i.EndDate,
			&i.GoalRevenue,
			&i.GoalContacts,
			&i.ActualRevenue,
			&i.ActualContacts,
			&i.ExternalIdentifier,
			&i.CreatedDate,
			&i.ModifiedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchCampaigns = `-- name: SearchCampaigns :many
SELECT id, name, title, description, campaign_type_id, status_id, parent_id, is_active, start_date, end_date, goal_revenue, goal_contacts, actual_revenue, actual_contacts, external_identifier, created_date, modified_date, created_at, updated_at FROM campaigns 
WHERE (name ILIKE $1 OR title ILIKE $1 OR description ILIKE $1) 
ORDER BY start_date DESC
`

func (q *Queries) SearchCampaigns(ctx context.Context, name string) ([]Campaign, error) {
	rows, err := q.db.QueryContext(ctx, SearchCampaigns, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Campaign{}
	for rows.Next() {
		var i Campaign
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.CampaignTypeID,
			&i.StatusID,
			&i.ParentID,
			&i.IsActive,
			&i.StartDate,
			&i.EndDate,
			&i.GoalRevenue,
			&i.GoalContacts,
			&i.ActualRevenue,
			&i.ActualContacts,
			&i.ExternalIdentifier,
			&i.CreatedDate,
			&i.ModifiedDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateCampaign = `-- name: UpdateCampaign :one
UPDATE campaigns SET
    name = $2, title = $3, description = $4, campaign_type_id = $5,
    status_id = $6, parent_id = $7, is_active = $8, start_date = $9,
    end_date = $10, goal_revenue = $11, goal_contacts = $12,
    actual_revenue = $13, actual_contacts = $14, external_identifier = $15,
    modified_date = NOW(), updated_at = NOW()
WHERE id = $1 RETURNING id, name, title, description, campaign_type_id, status_id, parent_id, is_active, start_date, end_date, goal_revenue, goal_contacts, actual_revenue, actual_contacts, external_identifier, created_date, modified_date, created_at, updated_at
`

type UpdateCampaignParams struct {
	ID                 uuid.UUID      `json:"id"`
	Name               string         `json:"name"`
	Title              string         `json:"title"`
	Description        sql.NullString `json:"description"`
	CampaignTypeID     uuid.NullUUID  `json:"campaign_type_id"`
	StatusID           uuid.NullUUID  `json:"status_id"`
	ParentID           uuid.NullUUID  `json:"parent_id"`
	IsActive           sql.NullBool   `json:"is_active"`
	StartDate          sql.NullTime   `json:"start_date"`
	EndDate            sql.NullTime   `json:"end_date"`
	GoalRevenue        sql.NullString `json:"goal_revenue"`
	GoalContacts       sql.NullInt32  `json:"goal_contacts"`
	ActualRevenue      sql.NullString `json:"actual_revenue"`
	ActualContacts     sql.NullInt32  `json:"actual_contacts"`
	ExternalIdentifier sql.NullString `json:"external_identifier"`
}

func (q *Queries) UpdateCampaign(ctx context.Context, arg UpdateCampaignParams) (Campaign, error) {
	row := q.db.QueryRowContext(ctx, UpdateCampaign,
		arg.ID,
		arg.Name,
		arg.Title,
		arg.Description,
		arg.CampaignTypeID,
		arg.StatusID,
		arg.ParentID,
		arg.IsActive,
		arg.StartDate,
		arg.EndDate,
		arg.GoalRevenue,
		arg.GoalContacts,
		arg.ActualRevenue,
		arg.ActualContacts,
		arg.ExternalIdentifier,
	)
	var i Campaign
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.CampaignTypeID,
		&i.StatusID,
		&i.ParentID,
		&i.IsActive,
		&i.StartDate,
		&i.EndDate,
		&i.GoalRevenue,
		&i.GoalContacts,
		&i.ActualRevenue,
		&i.ActualContacts,
		&i.ExternalIdentifier,
		&i.CreatedDate,
		&i.ModifiedDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateCampaignContacts = `-- name: UpdateCampaignContacts :exec
UPDATE campaigns SET actual_contacts = $2, updated_at = NOW() WHERE id = $1
`

type UpdateCampaignContactsParams struct {
	ID             uuid.UUID     `json:"id"`
	ActualContacts sql.NullInt32 `json:"actual_contacts"`
}

func (q *Queries) UpdateCampaignContacts(ctx context.Context, arg UpdateCampaignContactsParams) error {
	_, err := q.db.ExecContext(ctx, UpdateCampaignContacts, arg.ID, arg.ActualContacts)
	return err
}

const UpdateCampaignRevenue = `-- name: UpdateCampaignRevenue :exec
UPDATE campaigns SET actual_revenue = $2, updated_at = NOW() WHERE id = $1
`

type UpdateCampaignRevenueParams struct {
	ID            uuid.UUID      `json:"id"`
	ActualRevenue sql.NullString `json:"actual_revenue"`
}

func (q *Queries) UpdateCampaignRevenue(ctx context.Context, arg UpdateCampaignRevenueParams) error {
	_, err := q.db.ExecContext(ctx, UpdateCampaignRevenue, arg.ID, arg.ActualRevenue)
	return err
}

const UpdateCampaignStatusById = `-- name: UpdateCampaignStatusById :exec
UPDATE campaigns SET status_id = $2, updated_at = NOW() WHERE id = $1
`

type UpdateCampaignStatusByIdParams struct {
	ID       uuid.UUID     `json:"id"`
	StatusID uuid.NullUUID `json:"status_id"`
}

func (q *Queries) UpdateCampaignStatusById(ctx context.Context, arg UpdateCampaignStatusByIdParams) error {
	_, err := q.db.ExecContext(ctx, UpdateCampaignStatusById, arg.ID, arg.StatusID)
	return err
}
