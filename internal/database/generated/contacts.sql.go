// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: contacts.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const CountAllContacts = `-- name: CountAllContacts :one
SELECT COUNT(*) FROM contacts
`

func (q *Queries) CountAllContacts(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountAllContacts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountContacts = `-- name: CountContacts :one
SELECT COUNT(*) FROM contacts WHERE contact_type = $1
`

func (q *Queries) CountContacts(ctx context.Context, contactType string) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountContacts, contactType)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateContact = `-- name: CreateContact :one
INSERT INTO contacts (
    contact_type, first_name, last_name, organization_name, 
    email, phone, address_line_1, address_line_2, 
    city, state_province, postal_code, country
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
) RETURNING id, contact_type, first_name, last_name, organization_name, email, phone, address_line_1, address_line_2, city, state_province, postal_code, country, created_at, updated_at
`

type CreateContactParams struct {
	ContactType      string         `json:"contact_type"`
	FirstName        sql.NullString `json:"first_name"`
	LastName         sql.NullString `json:"last_name"`
	OrganizationName sql.NullString `json:"organization_name"`
	Email            sql.NullString `json:"email"`
	Phone            sql.NullString `json:"phone"`
	AddressLine1     sql.NullString `json:"address_line_1"`
	AddressLine2     sql.NullString `json:"address_line_2"`
	City             sql.NullString `json:"city"`
	StateProvince    sql.NullString `json:"state_province"`
	PostalCode       sql.NullString `json:"postal_code"`
	Country          sql.NullString `json:"country"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, CreateContact,
		arg.ContactType,
		arg.FirstName,
		arg.LastName,
		arg.OrganizationName,
		arg.Email,
		arg.Phone,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.City,
		arg.StateProvince,
		arg.PostalCode,
		arg.Country,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.ContactType,
		&i.FirstName,
		&i.LastName,
		&i.OrganizationName,
		&i.Email,
		&i.Phone,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.City,
		&i.StateProvince,
		&i.PostalCode,
		&i.Country,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteContact = `-- name: DeleteContact :exec
DELETE FROM contacts WHERE id = $1
`

func (q *Queries) DeleteContact(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteContact, id)
	return err
}

const GetContact = `-- name: GetContact :one
SELECT id, contact_type, first_name, last_name, organization_name, email, phone, address_line_1, address_line_2, city, state_province, postal_code, country, created_at, updated_at FROM contacts WHERE id = $1
`

func (q *Queries) GetContact(ctx context.Context, id uuid.UUID) (Contact, error) {
	row := q.db.QueryRowContext(ctx, GetContact, id)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.ContactType,
		&i.FirstName,
		&i.LastName,
		&i.OrganizationName,
		&i.Email,
		&i.Phone,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.City,
		&i.StateProvince,
		&i.PostalCode,
		&i.Country,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetContactByEmail = `-- name: GetContactByEmail :one
SELECT id, contact_type, first_name, last_name, organization_name, email, phone, address_line_1, address_line_2, city, state_province, postal_code, country, created_at, updated_at FROM contacts WHERE email = $1
`

func (q *Queries) GetContactByEmail(ctx context.Context, email sql.NullString) (Contact, error) {
	row := q.db.QueryRowContext(ctx, GetContactByEmail, email)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.ContactType,
		&i.FirstName,
		&i.LastName,
		&i.OrganizationName,
		&i.Email,
		&i.Phone,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.City,
		&i.StateProvince,
		&i.PostalCode,
		&i.Country,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetContactByPhone = `-- name: GetContactByPhone :one
SELECT id, contact_type, first_name, last_name, organization_name, email, phone, address_line_1, address_line_2, city, state_province, postal_code, country, created_at, updated_at FROM contacts WHERE phone = $1
`

func (q *Queries) GetContactByPhone(ctx context.Context, phone sql.NullString) (Contact, error) {
	row := q.db.QueryRowContext(ctx, GetContactByPhone, phone)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.ContactType,
		&i.FirstName,
		&i.LastName,
		&i.OrganizationName,
		&i.Email,
		&i.Phone,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.City,
		&i.StateProvince,
		&i.PostalCode,
		&i.Country,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetContactsByLocation = `-- name: GetContactsByLocation :many
SELECT id, contact_type, first_name, last_name, organization_name, email, phone, address_line_1, address_line_2, city, state_province, postal_code, country, created_at, updated_at FROM contacts 
WHERE city = $1 AND state_province = $2 
ORDER BY created_at DESC
`

type GetContactsByLocationParams struct {
	City          sql.NullString `json:"city"`
	StateProvince sql.NullString `json:"state_province"`
}

func (q *Queries) GetContactsByLocation(ctx context.Context, arg GetContactsByLocationParams) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, GetContactsByLocation, arg.City, arg.StateProvince)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contact{}
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.ContactType,
			&i.FirstName,
			&i.LastName,
			&i.OrganizationName,
			&i.Email,
			&i.Phone,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.City,
			&i.StateProvince,
			&i.PostalCode,
			&i.Country,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetContactsByType = `-- name: GetContactsByType :many
SELECT id, contact_type, first_name, last_name, organization_name, email, phone, address_line_1, address_line_2, city, state_province, postal_code, country, created_at, updated_at FROM contacts 
WHERE contact_type = $1 
ORDER BY created_at DESC
`

func (q *Queries) GetContactsByType(ctx context.Context, contactType string) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, GetContactsByType, contactType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contact{}
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.ContactType,
			&i.FirstName,
			&i.LastName,
			&i.OrganizationName,
			&i.Email,
			&i.Phone,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.City,
			&i.StateProvince,
			&i.PostalCode,
			&i.Country,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListAllContacts = `-- name: ListAllContacts :many
SELECT id, contact_type, first_name, last_name, organization_name, email, phone, address_line_1, address_line_2, city, state_province, postal_code, country, created_at, updated_at FROM contacts 
ORDER BY created_at DESC 
LIMIT $1 OFFSET $2
`

type ListAllContactsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAllContacts(ctx context.Context, arg ListAllContactsParams) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, ListAllContacts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contact{}
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.ContactType,
			&i.FirstName,
			&i.LastName,
			&i.OrganizationName,
			&i.Email,
			&i.Phone,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.City,
			&i.StateProvince,
			&i.PostalCode,
			&i.Country,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListContacts = `-- name: ListContacts :many
SELECT id, contact_type, first_name, last_name, organization_name, email, phone, address_line_1, address_line_2, city, state_province, postal_code, country, created_at, updated_at FROM contacts 
WHERE contact_type = $1 
ORDER BY created_at DESC 
LIMIT $2 OFFSET $3
`

type ListContactsParams struct {
	ContactType string `json:"contact_type"`
	Limit       int32  `json:"limit"`
	Offset      int32  `json:"offset"`
}

func (q *Queries) ListContacts(ctx context.Context, arg ListContactsParams) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, ListContacts, arg.ContactType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contact{}
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.ContactType,
			&i.FirstName,
			&i.LastName,
			&i.OrganizationName,
			&i.Email,
			&i.Phone,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.City,
			&i.StateProvince,
			&i.PostalCode,
			&i.Country,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchContacts = `-- name: SearchContacts :many
SELECT id, contact_type, first_name, last_name, organization_name, email, phone, address_line_1, address_line_2, city, state_province, postal_code, country, created_at, updated_at FROM contacts 
WHERE (
    first_name ILIKE $1 OR 
    last_name ILIKE $1 OR 
    organization_name ILIKE $1 OR
    email ILIKE $1
)
ORDER BY created_at DESC 
LIMIT $2 OFFSET $3
`

type SearchContactsParams struct {
	FirstName sql.NullString `json:"first_name"`
	Limit     int32          `json:"limit"`
	Offset    int32          `json:"offset"`
}

func (q *Queries) SearchContacts(ctx context.Context, arg SearchContactsParams) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, SearchContacts, arg.FirstName, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contact{}
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.ContactType,
			&i.FirstName,
			&i.LastName,
			&i.OrganizationName,
			&i.Email,
			&i.Phone,
			&i.AddressLine1,
			&i.AddressLine2,
			&i.City,
			&i.StateProvince,
			&i.PostalCode,
			&i.Country,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateContact = `-- name: UpdateContact :one
UPDATE contacts 
SET 
    contact_type = $2,
    first_name = $3,
    last_name = $4,
    organization_name = $5,
    email = $6,
    phone = $7,
    address_line_1 = $8,
    address_line_2 = $9,
    city = $10,
    state_province = $11,
    postal_code = $12,
    country = $13,
    updated_at = NOW()
WHERE id = $1 
RETURNING id, contact_type, first_name, last_name, organization_name, email, phone, address_line_1, address_line_2, city, state_province, postal_code, country, created_at, updated_at
`

type UpdateContactParams struct {
	ID               uuid.UUID      `json:"id"`
	ContactType      string         `json:"contact_type"`
	FirstName        sql.NullString `json:"first_name"`
	LastName         sql.NullString `json:"last_name"`
	OrganizationName sql.NullString `json:"organization_name"`
	Email            sql.NullString `json:"email"`
	Phone            sql.NullString `json:"phone"`
	AddressLine1     sql.NullString `json:"address_line_1"`
	AddressLine2     sql.NullString `json:"address_line_2"`
	City             sql.NullString `json:"city"`
	StateProvince    sql.NullString `json:"state_province"`
	PostalCode       sql.NullString `json:"postal_code"`
	Country          sql.NullString `json:"country"`
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, UpdateContact,
		arg.ID,
		arg.ContactType,
		arg.FirstName,
		arg.LastName,
		arg.OrganizationName,
		arg.Email,
		arg.Phone,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.City,
		arg.StateProvince,
		arg.PostalCode,
		arg.Country,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.ContactType,
		&i.FirstName,
		&i.LastName,
		&i.OrganizationName,
		&i.Email,
		&i.Phone,
		&i.AddressLine1,
		&i.AddressLine2,
		&i.City,
		&i.StateProvince,
		&i.PostalCode,
		&i.Country,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
