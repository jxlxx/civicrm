// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: navigation.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const CountActiveNavigationByDomain = `-- name: CountActiveNavigationByDomain :one
SELECT COUNT(*) FROM navigation WHERE domain_id = $1 AND is_active = TRUE
`

func (q *Queries) CountActiveNavigationByDomain(ctx context.Context, domainID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountActiveNavigationByDomain, domainID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountNavigationByDomain = `-- name: CountNavigationByDomain :one
SELECT COUNT(*) FROM navigation WHERE domain_id = $1
`

func (q *Queries) CountNavigationByDomain(ctx context.Context, domainID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountNavigationByDomain, domainID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateNavigation = `-- name: CreateNavigation :one
INSERT INTO navigation (
    domain_id, parent_id, name, label, url, icon, permission, weight, is_active, is_visible
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id, domain_id, parent_id, name, label, url, icon, permission, weight, is_active, is_visible, created_at, updated_at
`

type CreateNavigationParams struct {
	DomainID   uuid.UUID      `json:"domain_id"`
	ParentID   uuid.NullUUID  `json:"parent_id"`
	Name       string         `json:"name"`
	Label      string         `json:"label"`
	Url        sql.NullString `json:"url"`
	Icon       sql.NullString `json:"icon"`
	Permission sql.NullString `json:"permission"`
	Weight     sql.NullInt32  `json:"weight"`
	IsActive   sql.NullBool   `json:"is_active"`
	IsVisible  sql.NullBool   `json:"is_visible"`
}

func (q *Queries) CreateNavigation(ctx context.Context, arg CreateNavigationParams) (Navigation, error) {
	row := q.db.QueryRowContext(ctx, CreateNavigation,
		arg.DomainID,
		arg.ParentID,
		arg.Name,
		arg.Label,
		arg.Url,
		arg.Icon,
		arg.Permission,
		arg.Weight,
		arg.IsActive,
		arg.IsVisible,
	)
	var i Navigation
	err := row.Scan(
		&i.ID,
		&i.DomainID,
		&i.ParentID,
		&i.Name,
		&i.Label,
		&i.Url,
		&i.Icon,
		&i.Permission,
		&i.Weight,
		&i.IsActive,
		&i.IsVisible,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteNavigation = `-- name: DeleteNavigation :exec
DELETE FROM navigation WHERE id = $1 AND domain_id = $2
`

type DeleteNavigationParams struct {
	ID       uuid.UUID `json:"id"`
	DomainID uuid.UUID `json:"domain_id"`
}

func (q *Queries) DeleteNavigation(ctx context.Context, arg DeleteNavigationParams) error {
	_, err := q.db.ExecContext(ctx, DeleteNavigation, arg.ID, arg.DomainID)
	return err
}

const DeleteNavigationByDomain = `-- name: DeleteNavigationByDomain :exec
DELETE FROM navigation WHERE domain_id = $1
`

func (q *Queries) DeleteNavigationByDomain(ctx context.Context, domainID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteNavigationByDomain, domainID)
	return err
}

const GetActiveNavigation = `-- name: GetActiveNavigation :many
SELECT id, domain_id, parent_id, name, label, url, icon, permission, weight, is_active, is_visible, created_at, updated_at FROM navigation 
WHERE domain_id = $1 AND is_active = TRUE 
ORDER BY weight ASC, name ASC
`

func (q *Queries) GetActiveNavigation(ctx context.Context, domainID uuid.UUID) ([]Navigation, error) {
	rows, err := q.db.QueryContext(ctx, GetActiveNavigation, domainID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Navigation{}
	for rows.Next() {
		var i Navigation
		if err := rows.Scan(
			&i.ID,
			&i.DomainID,
			&i.ParentID,
			&i.Name,
			&i.Label,
			&i.Url,
			&i.Icon,
			&i.Permission,
			&i.Weight,
			&i.IsActive,
			&i.IsVisible,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetChildNavigation = `-- name: GetChildNavigation :many
SELECT id, domain_id, parent_id, name, label, url, icon, permission, weight, is_active, is_visible, created_at, updated_at FROM navigation 
WHERE parent_id = $1 
ORDER BY weight ASC, name ASC
`

func (q *Queries) GetChildNavigation(ctx context.Context, parentID uuid.NullUUID) ([]Navigation, error) {
	rows, err := q.db.QueryContext(ctx, GetChildNavigation, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Navigation{}
	for rows.Next() {
		var i Navigation
		if err := rows.Scan(
			&i.ID,
			&i.DomainID,
			&i.ParentID,
			&i.Name,
			&i.Label,
			&i.Url,
			&i.Icon,
			&i.Permission,
			&i.Weight,
			&i.IsActive,
			&i.IsVisible,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetNavigation = `-- name: GetNavigation :one
SELECT id, domain_id, parent_id, name, label, url, icon, permission, weight, is_active, is_visible, created_at, updated_at FROM navigation WHERE id = $1
`

func (q *Queries) GetNavigation(ctx context.Context, id uuid.UUID) (Navigation, error) {
	row := q.db.QueryRowContext(ctx, GetNavigation, id)
	var i Navigation
	err := row.Scan(
		&i.ID,
		&i.DomainID,
		&i.ParentID,
		&i.Name,
		&i.Label,
		&i.Url,
		&i.Icon,
		&i.Permission,
		&i.Weight,
		&i.IsActive,
		&i.IsVisible,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetNavigationBreadcrumb = `-- name: GetNavigationBreadcrumb :many
WITH RECURSIVE breadcrumb AS (
    SELECT n.id, n.domain_id, n.parent_id, n.name, n.label, n.url, n.icon, n.permission, n.weight, n.is_active, n.is_visible, n.created_at, n.updated_at, 0 as level
    FROM navigation n
    WHERE n.id = $1
    
    UNION ALL
    
    SELECT p.id, p.domain_id, p.parent_id, p.name, p.label, p.url, p.icon, p.permission, p.weight, p.is_active, p.is_visible, p.created_at, p.updated_at, bc.level + 1
    FROM navigation p
    INNER JOIN breadcrumb bc ON p.id = bc.parent_id
)
SELECT id, domain_id, parent_id, name, label, url, icon, permission, weight, is_active, is_visible, created_at, updated_at, level FROM breadcrumb 
ORDER BY level DESC
`

type GetNavigationBreadcrumbRow struct {
	ID         uuid.UUID      `json:"id"`
	DomainID   uuid.UUID      `json:"domain_id"`
	ParentID   uuid.NullUUID  `json:"parent_id"`
	Name       string         `json:"name"`
	Label      string         `json:"label"`
	Url        sql.NullString `json:"url"`
	Icon       sql.NullString `json:"icon"`
	Permission sql.NullString `json:"permission"`
	Weight     sql.NullInt32  `json:"weight"`
	IsActive   sql.NullBool   `json:"is_active"`
	IsVisible  sql.NullBool   `json:"is_visible"`
	CreatedAt  sql.NullTime   `json:"created_at"`
	UpdatedAt  sql.NullTime   `json:"updated_at"`
	Level      int32          `json:"level"`
}

func (q *Queries) GetNavigationBreadcrumb(ctx context.Context, id uuid.UUID) ([]GetNavigationBreadcrumbRow, error) {
	rows, err := q.db.QueryContext(ctx, GetNavigationBreadcrumb, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetNavigationBreadcrumbRow{}
	for rows.Next() {
		var i GetNavigationBreadcrumbRow
		if err := rows.Scan(
			&i.ID,
			&i.DomainID,
			&i.ParentID,
			&i.Name,
			&i.Label,
			&i.Url,
			&i.Icon,
			&i.Permission,
			&i.Weight,
			&i.IsActive,
			&i.IsVisible,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Level,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetNavigationByName = `-- name: GetNavigationByName :one
SELECT id, domain_id, parent_id, name, label, url, icon, permission, weight, is_active, is_visible, created_at, updated_at FROM navigation WHERE domain_id = $1 AND name = $2
`

type GetNavigationByNameParams struct {
	DomainID uuid.UUID `json:"domain_id"`
	Name     string    `json:"name"`
}

func (q *Queries) GetNavigationByName(ctx context.Context, arg GetNavigationByNameParams) (Navigation, error) {
	row := q.db.QueryRowContext(ctx, GetNavigationByName, arg.DomainID, arg.Name)
	var i Navigation
	err := row.Scan(
		&i.ID,
		&i.DomainID,
		&i.ParentID,
		&i.Name,
		&i.Label,
		&i.Url,
		&i.Icon,
		&i.Permission,
		&i.Weight,
		&i.IsActive,
		&i.IsVisible,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetNavigationByPermission = `-- name: GetNavigationByPermission :many
SELECT id, domain_id, parent_id, name, label, url, icon, permission, weight, is_active, is_visible, created_at, updated_at FROM navigation 
WHERE domain_id = $1 AND permission = $2 AND is_active = TRUE 
ORDER BY weight ASC, name ASC
`

type GetNavigationByPermissionParams struct {
	DomainID   uuid.UUID      `json:"domain_id"`
	Permission sql.NullString `json:"permission"`
}

func (q *Queries) GetNavigationByPermission(ctx context.Context, arg GetNavigationByPermissionParams) ([]Navigation, error) {
	rows, err := q.db.QueryContext(ctx, GetNavigationByPermission, arg.DomainID, arg.Permission)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Navigation{}
	for rows.Next() {
		var i Navigation
		if err := rows.Scan(
			&i.ID,
			&i.DomainID,
			&i.ParentID,
			&i.Name,
			&i.Label,
			&i.Url,
			&i.Icon,
			&i.Permission,
			&i.Weight,
			&i.IsActive,
			&i.IsVisible,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetNavigationByURL = `-- name: GetNavigationByURL :one
SELECT id, domain_id, parent_id, name, label, url, icon, permission, weight, is_active, is_visible, created_at, updated_at FROM navigation WHERE domain_id = $1 AND url = $2
`

type GetNavigationByURLParams struct {
	DomainID uuid.UUID      `json:"domain_id"`
	Url      sql.NullString `json:"url"`
}

func (q *Queries) GetNavigationByURL(ctx context.Context, arg GetNavigationByURLParams) (Navigation, error) {
	row := q.db.QueryRowContext(ctx, GetNavigationByURL, arg.DomainID, arg.Url)
	var i Navigation
	err := row.Scan(
		&i.ID,
		&i.DomainID,
		&i.ParentID,
		&i.Name,
		&i.Label,
		&i.Url,
		&i.Icon,
		&i.Permission,
		&i.Weight,
		&i.IsActive,
		&i.IsVisible,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetNavigationSiblings = `-- name: GetNavigationSiblings :many
SELECT id, domain_id, parent_id, name, label, url, icon, permission, weight, is_active, is_visible, created_at, updated_at FROM navigation 
WHERE parent_id = (SELECT parent_id FROM navigation WHERE navigation.id = $1)
AND navigation.id != $1
ORDER BY weight ASC, name ASC
`

func (q *Queries) GetNavigationSiblings(ctx context.Context, id uuid.UUID) ([]Navigation, error) {
	rows, err := q.db.QueryContext(ctx, GetNavigationSiblings, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Navigation{}
	for rows.Next() {
		var i Navigation
		if err := rows.Scan(
			&i.ID,
			&i.DomainID,
			&i.ParentID,
			&i.Name,
			&i.Label,
			&i.Url,
			&i.Icon,
			&i.Permission,
			&i.Weight,
			&i.IsActive,
			&i.IsVisible,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetNavigationTree = `-- name: GetNavigationTree :many
WITH RECURSIVE nav_tree AS (
    SELECT n.id, n.domain_id, n.parent_id, n.name, n.label, n.url, n.icon, n.permission, n.weight, n.is_active, n.is_visible, n.created_at, n.updated_at, 0 as level, ARRAY[n.weight, n.id] as path
    FROM navigation n
    WHERE n.domain_id = $1 AND n.parent_id IS NULL
    
    UNION ALL
    
    SELECT n.id, n.domain_id, n.parent_id, n.name, n.label, n.url, n.icon, n.permission, n.weight, n.is_active, n.is_visible, n.created_at, n.updated_at, nt.level + 1, nt.path || n.weight || n.id
    FROM navigation n
    INNER JOIN nav_tree nt ON n.parent_id = nt.id
    WHERE n.domain_id = $1
)
SELECT id, domain_id, parent_id, name, label, url, icon, permission, weight, is_active, is_visible, created_at, updated_at, level, path FROM nav_tree 
ORDER BY path ASC
`

type GetNavigationTreeRow struct {
	ID         uuid.UUID      `json:"id"`
	DomainID   uuid.UUID      `json:"domain_id"`
	ParentID   uuid.NullUUID  `json:"parent_id"`
	Name       string         `json:"name"`
	Label      string         `json:"label"`
	Url        sql.NullString `json:"url"`
	Icon       sql.NullString `json:"icon"`
	Permission sql.NullString `json:"permission"`
	Weight     sql.NullInt32  `json:"weight"`
	IsActive   sql.NullBool   `json:"is_active"`
	IsVisible  sql.NullBool   `json:"is_visible"`
	CreatedAt  sql.NullTime   `json:"created_at"`
	UpdatedAt  sql.NullTime   `json:"updated_at"`
	Level      int32          `json:"level"`
	Path       interface{}    `json:"path"`
}

func (q *Queries) GetNavigationTree(ctx context.Context, domainID uuid.UUID) ([]GetNavigationTreeRow, error) {
	rows, err := q.db.QueryContext(ctx, GetNavigationTree, domainID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetNavigationTreeRow{}
	for rows.Next() {
		var i GetNavigationTreeRow
		if err := rows.Scan(
			&i.ID,
			&i.DomainID,
			&i.ParentID,
			&i.Name,
			&i.Label,
			&i.Url,
			&i.Icon,
			&i.Permission,
			&i.Weight,
			&i.IsActive,
			&i.IsVisible,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Level,
			&i.Path,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetRootNavigation = `-- name: GetRootNavigation :many
SELECT id, domain_id, parent_id, name, label, url, icon, permission, weight, is_active, is_visible, created_at, updated_at FROM navigation 
WHERE domain_id = $1 AND parent_id IS NULL 
ORDER BY weight ASC, name ASC
`

func (q *Queries) GetRootNavigation(ctx context.Context, domainID uuid.UUID) ([]Navigation, error) {
	rows, err := q.db.QueryContext(ctx, GetRootNavigation, domainID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Navigation{}
	for rows.Next() {
		var i Navigation
		if err := rows.Scan(
			&i.ID,
			&i.DomainID,
			&i.ParentID,
			&i.Name,
			&i.Label,
			&i.Url,
			&i.Icon,
			&i.Permission,
			&i.Weight,
			&i.IsActive,
			&i.IsVisible,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetVisibleNavigation = `-- name: GetVisibleNavigation :many
SELECT id, domain_id, parent_id, name, label, url, icon, permission, weight, is_active, is_visible, created_at, updated_at FROM navigation 
WHERE domain_id = $1 AND is_active = TRUE AND is_visible = TRUE 
ORDER BY weight ASC, name ASC
`

func (q *Queries) GetVisibleNavigation(ctx context.Context, domainID uuid.UUID) ([]Navigation, error) {
	rows, err := q.db.QueryContext(ctx, GetVisibleNavigation, domainID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Navigation{}
	for rows.Next() {
		var i Navigation
		if err := rows.Scan(
			&i.ID,
			&i.DomainID,
			&i.ParentID,
			&i.Name,
			&i.Label,
			&i.Url,
			&i.Icon,
			&i.Permission,
			&i.Weight,
			&i.IsActive,
			&i.IsVisible,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ReorderNavigation = `-- name: ReorderNavigation :many
UPDATE navigation 
SET 
    weight = CASE 
        WHEN navigation.id = $1 THEN $2
        WHEN navigation.id = $3 THEN $4
        WHEN navigation.id = $5 THEN $6
        ELSE weight
    END,
    updated_at = NOW()
WHERE domain_id = $7 AND navigation.id IN ($1, $3, $5)
RETURNING id, domain_id, parent_id, name, label, url, icon, permission, weight, is_active, is_visible, created_at, updated_at
`

type ReorderNavigationParams struct {
	ID       uuid.UUID     `json:"id"`
	Weight   sql.NullInt32 `json:"weight"`
	ID_2     uuid.UUID     `json:"id_2"`
	Weight_2 sql.NullInt32 `json:"weight_2"`
	ID_3     uuid.UUID     `json:"id_3"`
	Weight_3 sql.NullInt32 `json:"weight_3"`
	DomainID uuid.UUID     `json:"domain_id"`
}

func (q *Queries) ReorderNavigation(ctx context.Context, arg ReorderNavigationParams) ([]Navigation, error) {
	rows, err := q.db.QueryContext(ctx, ReorderNavigation,
		arg.ID,
		arg.Weight,
		arg.ID_2,
		arg.Weight_2,
		arg.ID_3,
		arg.Weight_3,
		arg.DomainID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Navigation{}
	for rows.Next() {
		var i Navigation
		if err := rows.Scan(
			&i.ID,
			&i.DomainID,
			&i.ParentID,
			&i.Name,
			&i.Label,
			&i.Url,
			&i.Icon,
			&i.Permission,
			&i.Weight,
			&i.IsActive,
			&i.IsVisible,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchNavigation = `-- name: SearchNavigation :many
SELECT id, domain_id, parent_id, name, label, url, icon, permission, weight, is_active, is_visible, created_at, updated_at FROM navigation 
WHERE domain_id = $1 
AND (name ILIKE $2 OR label ILIKE $2 OR url ILIKE $2)
ORDER BY weight ASC, name ASC
LIMIT $3 OFFSET $4
`

type SearchNavigationParams struct {
	DomainID uuid.UUID `json:"domain_id"`
	Name     string    `json:"name"`
	Limit    int32     `json:"limit"`
	Offset   int32     `json:"offset"`
}

func (q *Queries) SearchNavigation(ctx context.Context, arg SearchNavigationParams) ([]Navigation, error) {
	rows, err := q.db.QueryContext(ctx, SearchNavigation,
		arg.DomainID,
		arg.Name,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Navigation{}
	for rows.Next() {
		var i Navigation
		if err := rows.Scan(
			&i.ID,
			&i.DomainID,
			&i.ParentID,
			&i.Name,
			&i.Label,
			&i.Url,
			&i.Icon,
			&i.Permission,
			&i.Weight,
			&i.IsActive,
			&i.IsVisible,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateNavigation = `-- name: UpdateNavigation :one
UPDATE navigation 
SET 
    parent_id = $3,
    name = $4,
    label = $5,
    url = $6,
    icon = $7,
    permission = $8,
    weight = $9,
    is_active = $10,
    is_visible = $11,
    updated_at = NOW()
WHERE id = $1 AND domain_id = $2 
RETURNING id, domain_id, parent_id, name, label, url, icon, permission, weight, is_active, is_visible, created_at, updated_at
`

type UpdateNavigationParams struct {
	ID         uuid.UUID      `json:"id"`
	DomainID   uuid.UUID      `json:"domain_id"`
	ParentID   uuid.NullUUID  `json:"parent_id"`
	Name       string         `json:"name"`
	Label      string         `json:"label"`
	Url        sql.NullString `json:"url"`
	Icon       sql.NullString `json:"icon"`
	Permission sql.NullString `json:"permission"`
	Weight     sql.NullInt32  `json:"weight"`
	IsActive   sql.NullBool   `json:"is_active"`
	IsVisible  sql.NullBool   `json:"is_visible"`
}

func (q *Queries) UpdateNavigation(ctx context.Context, arg UpdateNavigationParams) (Navigation, error) {
	row := q.db.QueryRowContext(ctx, UpdateNavigation,
		arg.ID,
		arg.DomainID,
		arg.ParentID,
		arg.Name,
		arg.Label,
		arg.Url,
		arg.Icon,
		arg.Permission,
		arg.Weight,
		arg.IsActive,
		arg.IsVisible,
	)
	var i Navigation
	err := row.Scan(
		&i.ID,
		&i.DomainID,
		&i.ParentID,
		&i.Name,
		&i.Label,
		&i.Url,
		&i.Icon,
		&i.Permission,
		&i.Weight,
		&i.IsActive,
		&i.IsVisible,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateNavigationStatus = `-- name: UpdateNavigationStatus :one
UPDATE navigation 
SET 
    is_active = $3,
    is_visible = $4,
    updated_at = NOW()
WHERE id = $1 AND domain_id = $2 
RETURNING id, domain_id, parent_id, name, label, url, icon, permission, weight, is_active, is_visible, created_at, updated_at
`

type UpdateNavigationStatusParams struct {
	ID        uuid.UUID    `json:"id"`
	DomainID  uuid.UUID    `json:"domain_id"`
	IsActive  sql.NullBool `json:"is_active"`
	IsVisible sql.NullBool `json:"is_visible"`
}

func (q *Queries) UpdateNavigationStatus(ctx context.Context, arg UpdateNavigationStatusParams) (Navigation, error) {
	row := q.db.QueryRowContext(ctx, UpdateNavigationStatus,
		arg.ID,
		arg.DomainID,
		arg.IsActive,
		arg.IsVisible,
	)
	var i Navigation
	err := row.Scan(
		&i.ID,
		&i.DomainID,
		&i.ParentID,
		&i.Name,
		&i.Label,
		&i.Url,
		&i.Icon,
		&i.Permission,
		&i.Weight,
		&i.IsActive,
		&i.IsVisible,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateNavigationWeight = `-- name: UpdateNavigationWeight :one
UPDATE navigation 
SET 
    weight = $3,
    updated_at = NOW()
WHERE id = $1 AND domain_id = $2 
RETURNING id, domain_id, parent_id, name, label, url, icon, permission, weight, is_active, is_visible, created_at, updated_at
`

type UpdateNavigationWeightParams struct {
	ID       uuid.UUID     `json:"id"`
	DomainID uuid.UUID     `json:"domain_id"`
	Weight   sql.NullInt32 `json:"weight"`
}

func (q *Queries) UpdateNavigationWeight(ctx context.Context, arg UpdateNavigationWeightParams) (Navigation, error) {
	row := q.db.QueryRowContext(ctx, UpdateNavigationWeight, arg.ID, arg.DomainID, arg.Weight)
	var i Navigation
	err := row.Scan(
		&i.ID,
		&i.DomainID,
		&i.ParentID,
		&i.Name,
		&i.Label,
		&i.Url,
		&i.Icon,
		&i.Permission,
		&i.Weight,
		&i.IsActive,
		&i.IsVisible,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
