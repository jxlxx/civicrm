// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: survey_campaigns.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const ActivateSurveyCampaign = `-- name: ActivateSurveyCampaign :exec
UPDATE survey_campaigns SET is_active = TRUE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) ActivateSurveyCampaign(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, ActivateSurveyCampaign, id)
	return err
}

const CreateSurveyCampaign = `-- name: CreateSurveyCampaign :one
INSERT INTO survey_campaigns (
    survey_id, campaign_id, is_active
) VALUES (
    $1, $2, $3
) RETURNING id, survey_id, campaign_id, is_active, created_at, updated_at
`

type CreateSurveyCampaignParams struct {
	SurveyID   uuid.UUID    `json:"survey_id"`
	CampaignID uuid.UUID    `json:"campaign_id"`
	IsActive   sql.NullBool `json:"is_active"`
}

func (q *Queries) CreateSurveyCampaign(ctx context.Context, arg CreateSurveyCampaignParams) (SurveyCampaign, error) {
	row := q.db.QueryRowContext(ctx, CreateSurveyCampaign, arg.SurveyID, arg.CampaignID, arg.IsActive)
	var i SurveyCampaign
	err := row.Scan(
		&i.ID,
		&i.SurveyID,
		&i.CampaignID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeactivateSurveyCampaign = `-- name: DeactivateSurveyCampaign :exec
UPDATE survey_campaigns SET is_active = FALSE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) DeactivateSurveyCampaign(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeactivateSurveyCampaign, id)
	return err
}

const DeleteSurveyCampaign = `-- name: DeleteSurveyCampaign :exec
DELETE FROM survey_campaigns WHERE id = $1
`

func (q *Queries) DeleteSurveyCampaign(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteSurveyCampaign, id)
	return err
}

const GetActiveSurveyCampaigns = `-- name: GetActiveSurveyCampaigns :many
SELECT id, survey_id, campaign_id, is_active, created_at, updated_at FROM survey_campaigns 
WHERE survey_id = $1 AND is_active = TRUE 
ORDER BY id
`

func (q *Queries) GetActiveSurveyCampaigns(ctx context.Context, surveyID uuid.UUID) ([]SurveyCampaign, error) {
	rows, err := q.db.QueryContext(ctx, GetActiveSurveyCampaigns, surveyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SurveyCampaign{}
	for rows.Next() {
		var i SurveyCampaign
		if err := rows.Scan(
			&i.ID,
			&i.SurveyID,
			&i.CampaignID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetSurveyCampaign = `-- name: GetSurveyCampaign :one
SELECT id, survey_id, campaign_id, is_active, created_at, updated_at FROM survey_campaigns WHERE id = $1
`

func (q *Queries) GetSurveyCampaign(ctx context.Context, id uuid.UUID) (SurveyCampaign, error) {
	row := q.db.QueryRowContext(ctx, GetSurveyCampaign, id)
	var i SurveyCampaign
	err := row.Scan(
		&i.ID,
		&i.SurveyID,
		&i.CampaignID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetSurveyCampaignBySurveyAndCampaign = `-- name: GetSurveyCampaignBySurveyAndCampaign :one
SELECT id, survey_id, campaign_id, is_active, created_at, updated_at FROM survey_campaigns 
WHERE survey_id = $1 AND campaign_id = $2 
ORDER BY id LIMIT 1
`

type GetSurveyCampaignBySurveyAndCampaignParams struct {
	SurveyID   uuid.UUID `json:"survey_id"`
	CampaignID uuid.UUID `json:"campaign_id"`
}

func (q *Queries) GetSurveyCampaignBySurveyAndCampaign(ctx context.Context, arg GetSurveyCampaignBySurveyAndCampaignParams) (SurveyCampaign, error) {
	row := q.db.QueryRowContext(ctx, GetSurveyCampaignBySurveyAndCampaign, arg.SurveyID, arg.CampaignID)
	var i SurveyCampaign
	err := row.Scan(
		&i.ID,
		&i.SurveyID,
		&i.CampaignID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetSurveyCampaignStats = `-- name: GetSurveyCampaignStats :many
SELECT 
    c.name as campaign_name,
    COUNT(sc.id) as survey_count
FROM survey_campaigns sc
JOIN campaigns c ON sc.campaign_id = c.id
WHERE sc.is_active = $1
GROUP BY c.name
ORDER BY c.name
`

type GetSurveyCampaignStatsRow struct {
	CampaignName string `json:"campaign_name"`
	SurveyCount  int64  `json:"survey_count"`
}

func (q *Queries) GetSurveyCampaignStats(ctx context.Context, isActive sql.NullBool) ([]GetSurveyCampaignStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetSurveyCampaignStats, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSurveyCampaignStatsRow{}
	for rows.Next() {
		var i GetSurveyCampaignStatsRow
		if err := rows.Scan(&i.CampaignName, &i.SurveyCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetSurveyCampaignSummary = `-- name: GetSurveyCampaignSummary :many
SELECT 
    s.title as survey_title,
    COUNT(sc.id) as campaign_count,
    STRING_AGG(c.name, ', ') as campaign_names
FROM surveys s
LEFT JOIN survey_campaigns sc ON s.id = sc.survey_id AND sc.is_active = TRUE
LEFT JOIN campaigns c ON sc.campaign_id = c.id
WHERE s.is_active = $1
GROUP BY s.id, s.title
ORDER BY s.created_date DESC
`

type GetSurveyCampaignSummaryRow struct {
	SurveyTitle   string `json:"survey_title"`
	CampaignCount int64  `json:"campaign_count"`
	CampaignNames []byte `json:"campaign_names"`
}

func (q *Queries) GetSurveyCampaignSummary(ctx context.Context, isActive sql.NullBool) ([]GetSurveyCampaignSummaryRow, error) {
	rows, err := q.db.QueryContext(ctx, GetSurveyCampaignSummary, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetSurveyCampaignSummaryRow{}
	for rows.Next() {
		var i GetSurveyCampaignSummaryRow
		if err := rows.Scan(&i.SurveyTitle, &i.CampaignCount, &i.CampaignNames); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetSurveyCampaignsByCampaign = `-- name: GetSurveyCampaignsByCampaign :many
SELECT id, survey_id, campaign_id, is_active, created_at, updated_at FROM survey_campaigns 
WHERE campaign_id = $1 
ORDER BY id
`

func (q *Queries) GetSurveyCampaignsByCampaign(ctx context.Context, campaignID uuid.UUID) ([]SurveyCampaign, error) {
	rows, err := q.db.QueryContext(ctx, GetSurveyCampaignsByCampaign, campaignID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SurveyCampaign{}
	for rows.Next() {
		var i SurveyCampaign
		if err := rows.Scan(
			&i.ID,
			&i.SurveyID,
			&i.CampaignID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetSurveyCampaignsBySurvey = `-- name: GetSurveyCampaignsBySurvey :many
SELECT id, survey_id, campaign_id, is_active, created_at, updated_at FROM survey_campaigns 
WHERE survey_id = $1 
ORDER BY id
`

func (q *Queries) GetSurveyCampaignsBySurvey(ctx context.Context, surveyID uuid.UUID) ([]SurveyCampaign, error) {
	rows, err := q.db.QueryContext(ctx, GetSurveyCampaignsBySurvey, surveyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SurveyCampaign{}
	for rows.Next() {
		var i SurveyCampaign
		if err := rows.Scan(
			&i.ID,
			&i.SurveyID,
			&i.CampaignID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListActiveSurveyCampaigns = `-- name: ListActiveSurveyCampaigns :many
SELECT id, survey_id, campaign_id, is_active, created_at, updated_at FROM survey_campaigns 
WHERE is_active = TRUE 
ORDER BY id
`

func (q *Queries) ListActiveSurveyCampaigns(ctx context.Context) ([]SurveyCampaign, error) {
	rows, err := q.db.QueryContext(ctx, ListActiveSurveyCampaigns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SurveyCampaign{}
	for rows.Next() {
		var i SurveyCampaign
		if err := rows.Scan(
			&i.ID,
			&i.SurveyID,
			&i.CampaignID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListSurveyCampaigns = `-- name: ListSurveyCampaigns :many
SELECT id, survey_id, campaign_id, is_active, created_at, updated_at FROM survey_campaigns 
ORDER BY id
`

func (q *Queries) ListSurveyCampaigns(ctx context.Context) ([]SurveyCampaign, error) {
	rows, err := q.db.QueryContext(ctx, ListSurveyCampaigns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SurveyCampaign{}
	for rows.Next() {
		var i SurveyCampaign
		if err := rows.Scan(
			&i.ID,
			&i.SurveyID,
			&i.CampaignID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchSurveyCampaigns = `-- name: SearchSurveyCampaigns :many
SELECT sc.id, sc.survey_id, sc.campaign_id, sc.is_active, sc.created_at, sc.updated_at FROM survey_campaigns sc
JOIN surveys s ON sc.survey_id = s.id
JOIN campaigns c ON sc.campaign_id = c.id
WHERE (s.title ILIKE $1 OR c.name ILIKE $1)
ORDER BY sc.id
`

func (q *Queries) SearchSurveyCampaigns(ctx context.Context, title string) ([]SurveyCampaign, error) {
	rows, err := q.db.QueryContext(ctx, SearchSurveyCampaigns, title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SurveyCampaign{}
	for rows.Next() {
		var i SurveyCampaign
		if err := rows.Scan(
			&i.ID,
			&i.SurveyID,
			&i.CampaignID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateSurveyCampaign = `-- name: UpdateSurveyCampaign :one
UPDATE survey_campaigns SET
    survey_id = $2, campaign_id = $3, is_active = $4, updated_at = NOW()
WHERE id = $1 RETURNING id, survey_id, campaign_id, is_active, created_at, updated_at
`

type UpdateSurveyCampaignParams struct {
	ID         uuid.UUID    `json:"id"`
	SurveyID   uuid.UUID    `json:"survey_id"`
	CampaignID uuid.UUID    `json:"campaign_id"`
	IsActive   sql.NullBool `json:"is_active"`
}

func (q *Queries) UpdateSurveyCampaign(ctx context.Context, arg UpdateSurveyCampaignParams) (SurveyCampaign, error) {
	row := q.db.QueryRowContext(ctx, UpdateSurveyCampaign,
		arg.ID,
		arg.SurveyID,
		arg.CampaignID,
		arg.IsActive,
	)
	var i SurveyCampaign
	err := row.Scan(
		&i.ID,
		&i.SurveyID,
		&i.CampaignID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
