// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tag_sets.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const ActivateTagSet = `-- name: ActivateTagSet :exec
UPDATE tag_sets SET is_active = TRUE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) ActivateTagSet(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, ActivateTagSet, id)
	return err
}

const CreateTagSet = `-- name: CreateTagSet :one
INSERT INTO tag_sets (
    name, title, description, entity_table, is_active, is_reserved, weight
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, name, title, description, entity_table, is_active, is_reserved, weight, created_at, updated_at
`

type CreateTagSetParams struct {
	Name        string         `json:"name"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	EntityTable string         `json:"entity_table"`
	IsActive    sql.NullBool   `json:"is_active"`
	IsReserved  sql.NullBool   `json:"is_reserved"`
	Weight      sql.NullInt32  `json:"weight"`
}

func (q *Queries) CreateTagSet(ctx context.Context, arg CreateTagSetParams) (TagSet, error) {
	row := q.db.QueryRowContext(ctx, CreateTagSet,
		arg.Name,
		arg.Title,
		arg.Description,
		arg.EntityTable,
		arg.IsActive,
		arg.IsReserved,
		arg.Weight,
	)
	var i TagSet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.EntityTable,
		&i.IsActive,
		&i.IsReserved,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeactivateTagSet = `-- name: DeactivateTagSet :exec
UPDATE tag_sets SET is_active = FALSE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) DeactivateTagSet(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeactivateTagSet, id)
	return err
}

const DeleteTagSet = `-- name: DeleteTagSet :exec
DELETE FROM tag_sets WHERE id = $1
`

func (q *Queries) DeleteTagSet(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteTagSet, id)
	return err
}

const GetTagSet = `-- name: GetTagSet :one
SELECT id, name, title, description, entity_table, is_active, is_reserved, weight, created_at, updated_at FROM tag_sets WHERE id = $1
`

func (q *Queries) GetTagSet(ctx context.Context, id uuid.UUID) (TagSet, error) {
	row := q.db.QueryRowContext(ctx, GetTagSet, id)
	var i TagSet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.EntityTable,
		&i.IsActive,
		&i.IsReserved,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetTagSetByName = `-- name: GetTagSetByName :one
SELECT id, name, title, description, entity_table, is_active, is_reserved, weight, created_at, updated_at FROM tag_sets WHERE name = $1
`

func (q *Queries) GetTagSetByName(ctx context.Context, name string) (TagSet, error) {
	row := q.db.QueryRowContext(ctx, GetTagSetByName, name)
	var i TagSet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.EntityTable,
		&i.IsActive,
		&i.IsReserved,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetTagSetStats = `-- name: GetTagSetStats :many
SELECT 
    ts.name as tag_set_name,
    ts.entity_table,
    COUNT(t.id) as tag_count
FROM tag_sets ts
LEFT JOIN tags t ON ts.id = t.tag_set_id AND t.is_active = TRUE
WHERE ts.is_active = $1
GROUP BY ts.name, ts.entity_table, ts.weight
ORDER BY ts.weight, ts.name
`

type GetTagSetStatsRow struct {
	TagSetName  string `json:"tag_set_name"`
	EntityTable string `json:"entity_table"`
	TagCount    int64  `json:"tag_count"`
}

func (q *Queries) GetTagSetStats(ctx context.Context, isActive sql.NullBool) ([]GetTagSetStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetTagSetStats, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTagSetStatsRow{}
	for rows.Next() {
		var i GetTagSetStatsRow
		if err := rows.Scan(&i.TagSetName, &i.EntityTable, &i.TagCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTagSetsByEntityTable = `-- name: GetTagSetsByEntityTable :many
SELECT id, name, title, description, entity_table, is_active, is_reserved, weight, created_at, updated_at FROM tag_sets 
WHERE entity_table = $1 AND is_active = $2 
ORDER BY weight, name
`

type GetTagSetsByEntityTableParams struct {
	EntityTable string       `json:"entity_table"`
	IsActive    sql.NullBool `json:"is_active"`
}

func (q *Queries) GetTagSetsByEntityTable(ctx context.Context, arg GetTagSetsByEntityTableParams) ([]TagSet, error) {
	rows, err := q.db.QueryContext(ctx, GetTagSetsByEntityTable, arg.EntityTable, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TagSet{}
	for rows.Next() {
		var i TagSet
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.EntityTable,
			&i.IsActive,
			&i.IsReserved,
			&i.Weight,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListActiveTagSets = `-- name: ListActiveTagSets :many
SELECT id, name, title, description, entity_table, is_active, is_reserved, weight, created_at, updated_at FROM tag_sets 
WHERE is_active = TRUE 
ORDER BY weight, name
`

func (q *Queries) ListActiveTagSets(ctx context.Context) ([]TagSet, error) {
	rows, err := q.db.QueryContext(ctx, ListActiveTagSets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TagSet{}
	for rows.Next() {
		var i TagSet
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.EntityTable,
			&i.IsActive,
			&i.IsReserved,
			&i.Weight,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListReservedTagSets = `-- name: ListReservedTagSets :many
SELECT id, name, title, description, entity_table, is_active, is_reserved, weight, created_at, updated_at FROM tag_sets 
WHERE is_reserved = TRUE AND is_active = $1 
ORDER BY weight, name
`

func (q *Queries) ListReservedTagSets(ctx context.Context, isActive sql.NullBool) ([]TagSet, error) {
	rows, err := q.db.QueryContext(ctx, ListReservedTagSets, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TagSet{}
	for rows.Next() {
		var i TagSet
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.EntityTable,
			&i.IsActive,
			&i.IsReserved,
			&i.Weight,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListTagSets = `-- name: ListTagSets :many
SELECT id, name, title, description, entity_table, is_active, is_reserved, weight, created_at, updated_at FROM tag_sets 
WHERE is_active = $1 
ORDER BY weight, name
`

func (q *Queries) ListTagSets(ctx context.Context, isActive sql.NullBool) ([]TagSet, error) {
	rows, err := q.db.QueryContext(ctx, ListTagSets, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TagSet{}
	for rows.Next() {
		var i TagSet
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.EntityTable,
			&i.IsActive,
			&i.IsReserved,
			&i.Weight,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchTagSets = `-- name: SearchTagSets :many
SELECT id, name, title, description, entity_table, is_active, is_reserved, weight, created_at, updated_at FROM tag_sets 
WHERE (name ILIKE $1 OR title ILIKE $1 OR description ILIKE $1) 
AND is_active = $2 
ORDER BY weight, name
`

type SearchTagSetsParams struct {
	Name     string       `json:"name"`
	IsActive sql.NullBool `json:"is_active"`
}

func (q *Queries) SearchTagSets(ctx context.Context, arg SearchTagSetsParams) ([]TagSet, error) {
	rows, err := q.db.QueryContext(ctx, SearchTagSets, arg.Name, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TagSet{}
	for rows.Next() {
		var i TagSet
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.EntityTable,
			&i.IsActive,
			&i.IsReserved,
			&i.Weight,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateTagSet = `-- name: UpdateTagSet :one
UPDATE tag_sets SET
    name = $2, title = $3, description = $4, entity_table = $5,
    is_active = $6, is_reserved = $7, weight = $8, updated_at = NOW()
WHERE id = $1 RETURNING id, name, title, description, entity_table, is_active, is_reserved, weight, created_at, updated_at
`

type UpdateTagSetParams struct {
	ID          uuid.UUID      `json:"id"`
	Name        string         `json:"name"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	EntityTable string         `json:"entity_table"`
	IsActive    sql.NullBool   `json:"is_active"`
	IsReserved  sql.NullBool   `json:"is_reserved"`
	Weight      sql.NullInt32  `json:"weight"`
}

func (q *Queries) UpdateTagSet(ctx context.Context, arg UpdateTagSetParams) (TagSet, error) {
	row := q.db.QueryRowContext(ctx, UpdateTagSet,
		arg.ID,
		arg.Name,
		arg.Title,
		arg.Description,
		arg.EntityTable,
		arg.IsActive,
		arg.IsReserved,
		arg.Weight,
	)
	var i TagSet
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.EntityTable,
		&i.IsActive,
		&i.IsReserved,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateTagSetWeight = `-- name: UpdateTagSetWeight :exec
UPDATE tag_sets SET weight = $2, updated_at = NOW() WHERE id = $1
`

type UpdateTagSetWeightParams struct {
	ID     uuid.UUID     `json:"id"`
	Weight sql.NullInt32 `json:"weight"`
}

func (q *Queries) UpdateTagSetWeight(ctx context.Context, arg UpdateTagSetWeightParams) error {
	_, err := q.db.ExecContext(ctx, UpdateTagSetWeight, arg.ID, arg.Weight)
	return err
}
