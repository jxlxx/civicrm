// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: report_templates.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const ActivateReportTemplate = `-- name: ActivateReportTemplate :exec
UPDATE report_templates SET is_active = TRUE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) ActivateReportTemplate(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, ActivateReportTemplate, id)
	return err
}

const CreateReportTemplate = `-- name: CreateReportTemplate :one
INSERT INTO report_templates (
    name, description, report_type, query_template, parameters, is_active, is_system, created_by
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, name, description, report_type, query_template, parameters, is_active, is_system, created_by, created_at, updated_at
`

type CreateReportTemplateParams struct {
	Name          string                `json:"name"`
	Description   sql.NullString        `json:"description"`
	ReportType    string                `json:"report_type"`
	QueryTemplate string                `json:"query_template"`
	Parameters    pqtype.NullRawMessage `json:"parameters"`
	IsActive      sql.NullBool          `json:"is_active"`
	IsSystem      sql.NullBool          `json:"is_system"`
	CreatedBy     uuid.NullUUID         `json:"created_by"`
}

func (q *Queries) CreateReportTemplate(ctx context.Context, arg CreateReportTemplateParams) (ReportTemplate, error) {
	row := q.db.QueryRowContext(ctx, CreateReportTemplate,
		arg.Name,
		arg.Description,
		arg.ReportType,
		arg.QueryTemplate,
		arg.Parameters,
		arg.IsActive,
		arg.IsSystem,
		arg.CreatedBy,
	)
	var i ReportTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ReportType,
		&i.QueryTemplate,
		&i.Parameters,
		&i.IsActive,
		&i.IsSystem,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeactivateReportTemplate = `-- name: DeactivateReportTemplate :exec
UPDATE report_templates SET is_active = FALSE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) DeactivateReportTemplate(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeactivateReportTemplate, id)
	return err
}

const DeleteReportTemplate = `-- name: DeleteReportTemplate :exec
DELETE FROM report_templates WHERE id = $1
`

func (q *Queries) DeleteReportTemplate(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteReportTemplate, id)
	return err
}

const GetCustomReportTemplates = `-- name: GetCustomReportTemplates :many
SELECT id, name, description, report_type, query_template, parameters, is_active, is_system, created_by, created_at, updated_at FROM report_templates 
WHERE is_system = FALSE AND is_active = $1 
ORDER BY name
`

func (q *Queries) GetCustomReportTemplates(ctx context.Context, isActive sql.NullBool) ([]ReportTemplate, error) {
	rows, err := q.db.QueryContext(ctx, GetCustomReportTemplates, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReportTemplate{}
	for rows.Next() {
		var i ReportTemplate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ReportType,
			&i.QueryTemplate,
			&i.Parameters,
			&i.IsActive,
			&i.IsSystem,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetReportTemplate = `-- name: GetReportTemplate :one
SELECT id, name, description, report_type, query_template, parameters, is_active, is_system, created_by, created_at, updated_at FROM report_templates WHERE id = $1
`

func (q *Queries) GetReportTemplate(ctx context.Context, id uuid.UUID) (ReportTemplate, error) {
	row := q.db.QueryRowContext(ctx, GetReportTemplate, id)
	var i ReportTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ReportType,
		&i.QueryTemplate,
		&i.Parameters,
		&i.IsActive,
		&i.IsSystem,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetReportTemplateByName = `-- name: GetReportTemplateByName :one
SELECT id, name, description, report_type, query_template, parameters, is_active, is_system, created_by, created_at, updated_at FROM report_templates WHERE name = $1
`

func (q *Queries) GetReportTemplateByName(ctx context.Context, name string) (ReportTemplate, error) {
	row := q.db.QueryRowContext(ctx, GetReportTemplateByName, name)
	var i ReportTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ReportType,
		&i.QueryTemplate,
		&i.Parameters,
		&i.IsActive,
		&i.IsSystem,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetReportTemplateStats = `-- name: GetReportTemplateStats :many
SELECT 
    rt.report_type,
    COUNT(rt.id) as template_count,
    COUNT(CASE WHEN rt.is_system = TRUE THEN 1 END) as system_count,
    COUNT(CASE WHEN rt.is_system = FALSE THEN 1 END) as custom_count
FROM report_templates rt
WHERE rt.is_active = $1
GROUP BY rt.report_type
ORDER BY rt.report_type
`

type GetReportTemplateStatsRow struct {
	ReportType    string `json:"report_type"`
	TemplateCount int64  `json:"template_count"`
	SystemCount   int64  `json:"system_count"`
	CustomCount   int64  `json:"custom_count"`
}

func (q *Queries) GetReportTemplateStats(ctx context.Context, isActive sql.NullBool) ([]GetReportTemplateStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetReportTemplateStats, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetReportTemplateStatsRow{}
	for rows.Next() {
		var i GetReportTemplateStatsRow
		if err := rows.Scan(
			&i.ReportType,
			&i.TemplateCount,
			&i.SystemCount,
			&i.CustomCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetReportTemplateSummary = `-- name: GetReportTemplateSummary :many
SELECT 
    rt.name,
    rt.description,
    rt.report_type,
    rt.is_system,
    rt.created_at,
    c.first_name || ' ' || c.last_name as created_by_name
FROM report_templates rt
LEFT JOIN contacts c ON rt.created_by = c.id
WHERE rt.is_active = $1
ORDER BY rt.created_at DESC
`

type GetReportTemplateSummaryRow struct {
	Name          string         `json:"name"`
	Description   sql.NullString `json:"description"`
	ReportType    string         `json:"report_type"`
	IsSystem      sql.NullBool   `json:"is_system"`
	CreatedAt     sql.NullTime   `json:"created_at"`
	CreatedByName interface{}    `json:"created_by_name"`
}

func (q *Queries) GetReportTemplateSummary(ctx context.Context, isActive sql.NullBool) ([]GetReportTemplateSummaryRow, error) {
	rows, err := q.db.QueryContext(ctx, GetReportTemplateSummary, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetReportTemplateSummaryRow{}
	for rows.Next() {
		var i GetReportTemplateSummaryRow
		if err := rows.Scan(
			&i.Name,
			&i.Description,
			&i.ReportType,
			&i.IsSystem,
			&i.CreatedAt,
			&i.CreatedByName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetReportTemplatesByType = `-- name: GetReportTemplatesByType :many
SELECT id, name, description, report_type, query_template, parameters, is_active, is_system, created_by, created_at, updated_at FROM report_templates 
WHERE report_type = $1 AND is_active = $2 
ORDER BY name
`

type GetReportTemplatesByTypeParams struct {
	ReportType string       `json:"report_type"`
	IsActive   sql.NullBool `json:"is_active"`
}

func (q *Queries) GetReportTemplatesByType(ctx context.Context, arg GetReportTemplatesByTypeParams) ([]ReportTemplate, error) {
	rows, err := q.db.QueryContext(ctx, GetReportTemplatesByType, arg.ReportType, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReportTemplate{}
	for rows.Next() {
		var i ReportTemplate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ReportType,
			&i.QueryTemplate,
			&i.Parameters,
			&i.IsActive,
			&i.IsSystem,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetSystemReportTemplates = `-- name: GetSystemReportTemplates :many
SELECT id, name, description, report_type, query_template, parameters, is_active, is_system, created_by, created_at, updated_at FROM report_templates 
WHERE is_system = TRUE AND is_active = $1 
ORDER BY name
`

func (q *Queries) GetSystemReportTemplates(ctx context.Context, isActive sql.NullBool) ([]ReportTemplate, error) {
	rows, err := q.db.QueryContext(ctx, GetSystemReportTemplates, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReportTemplate{}
	for rows.Next() {
		var i ReportTemplate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ReportType,
			&i.QueryTemplate,
			&i.Parameters,
			&i.IsActive,
			&i.IsSystem,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListActiveReportTemplates = `-- name: ListActiveReportTemplates :many
SELECT id, name, description, report_type, query_template, parameters, is_active, is_system, created_by, created_at, updated_at FROM report_templates 
WHERE is_active = TRUE 
ORDER BY name
`

func (q *Queries) ListActiveReportTemplates(ctx context.Context) ([]ReportTemplate, error) {
	rows, err := q.db.QueryContext(ctx, ListActiveReportTemplates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReportTemplate{}
	for rows.Next() {
		var i ReportTemplate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ReportType,
			&i.QueryTemplate,
			&i.Parameters,
			&i.IsActive,
			&i.IsSystem,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListReportTemplates = `-- name: ListReportTemplates :many
SELECT id, name, description, report_type, query_template, parameters, is_active, is_system, created_by, created_at, updated_at FROM report_templates 
ORDER BY name
`

func (q *Queries) ListReportTemplates(ctx context.Context) ([]ReportTemplate, error) {
	rows, err := q.db.QueryContext(ctx, ListReportTemplates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReportTemplate{}
	for rows.Next() {
		var i ReportTemplate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ReportType,
			&i.QueryTemplate,
			&i.Parameters,
			&i.IsActive,
			&i.IsSystem,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListReportTemplatesByCreator = `-- name: ListReportTemplatesByCreator :many
SELECT id, name, description, report_type, query_template, parameters, is_active, is_system, created_by, created_at, updated_at FROM report_templates 
WHERE created_by = $1 AND is_active = $2 
ORDER BY name
`

type ListReportTemplatesByCreatorParams struct {
	CreatedBy uuid.NullUUID `json:"created_by"`
	IsActive  sql.NullBool  `json:"is_active"`
}

func (q *Queries) ListReportTemplatesByCreator(ctx context.Context, arg ListReportTemplatesByCreatorParams) ([]ReportTemplate, error) {
	rows, err := q.db.QueryContext(ctx, ListReportTemplatesByCreator, arg.CreatedBy, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReportTemplate{}
	for rows.Next() {
		var i ReportTemplate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ReportType,
			&i.QueryTemplate,
			&i.Parameters,
			&i.IsActive,
			&i.IsSystem,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchReportTemplates = `-- name: SearchReportTemplates :many
SELECT id, name, description, report_type, query_template, parameters, is_active, is_system, created_by, created_at, updated_at FROM report_templates 
WHERE (name ILIKE $1 OR description ILIKE $1) AND is_active = $2 
ORDER BY name
`

type SearchReportTemplatesParams struct {
	Name     string       `json:"name"`
	IsActive sql.NullBool `json:"is_active"`
}

func (q *Queries) SearchReportTemplates(ctx context.Context, arg SearchReportTemplatesParams) ([]ReportTemplate, error) {
	rows, err := q.db.QueryContext(ctx, SearchReportTemplates, arg.Name, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReportTemplate{}
	for rows.Next() {
		var i ReportTemplate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ReportType,
			&i.QueryTemplate,
			&i.Parameters,
			&i.IsActive,
			&i.IsSystem,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateReportTemplate = `-- name: UpdateReportTemplate :one
UPDATE report_templates SET
    name = $2, description = $3, report_type = $4, query_template = $5,
    parameters = $6, is_active = $7, is_system = $8, updated_at = NOW()
WHERE id = $1 RETURNING id, name, description, report_type, query_template, parameters, is_active, is_system, created_by, created_at, updated_at
`

type UpdateReportTemplateParams struct {
	ID            uuid.UUID             `json:"id"`
	Name          string                `json:"name"`
	Description   sql.NullString        `json:"description"`
	ReportType    string                `json:"report_type"`
	QueryTemplate string                `json:"query_template"`
	Parameters    pqtype.NullRawMessage `json:"parameters"`
	IsActive      sql.NullBool          `json:"is_active"`
	IsSystem      sql.NullBool          `json:"is_system"`
}

func (q *Queries) UpdateReportTemplate(ctx context.Context, arg UpdateReportTemplateParams) (ReportTemplate, error) {
	row := q.db.QueryRowContext(ctx, UpdateReportTemplate,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.ReportType,
		arg.QueryTemplate,
		arg.Parameters,
		arg.IsActive,
		arg.IsSystem,
	)
	var i ReportTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ReportType,
		&i.QueryTemplate,
		&i.Parameters,
		&i.IsActive,
		&i.IsSystem,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
