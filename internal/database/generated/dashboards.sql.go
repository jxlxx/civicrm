// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: dashboards.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const ActivateDashboard = `-- name: ActivateDashboard :exec
UPDATE dashboards SET is_active = TRUE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) ActivateDashboard(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, ActivateDashboard, id)
	return err
}

const CreateDashboard = `-- name: CreateDashboard :one
INSERT INTO dashboards (
    name, description, layout, is_active, is_default, created_by
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, name, description, layout, is_active, is_default, created_by, created_at, updated_at
`

type CreateDashboardParams struct {
	Name        string                `json:"name"`
	Description sql.NullString        `json:"description"`
	Layout      pqtype.NullRawMessage `json:"layout"`
	IsActive    sql.NullBool          `json:"is_active"`
	IsDefault   sql.NullBool          `json:"is_default"`
	CreatedBy   uuid.NullUUID         `json:"created_by"`
}

func (q *Queries) CreateDashboard(ctx context.Context, arg CreateDashboardParams) (Dashboard, error) {
	row := q.db.QueryRowContext(ctx, CreateDashboard,
		arg.Name,
		arg.Description,
		arg.Layout,
		arg.IsActive,
		arg.IsDefault,
		arg.CreatedBy,
	)
	var i Dashboard
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Layout,
		&i.IsActive,
		&i.IsDefault,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeactivateDashboard = `-- name: DeactivateDashboard :exec
UPDATE dashboards SET is_active = FALSE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) DeactivateDashboard(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeactivateDashboard, id)
	return err
}

const DeleteDashboard = `-- name: DeleteDashboard :exec
DELETE FROM dashboards WHERE id = $1
`

func (q *Queries) DeleteDashboard(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteDashboard, id)
	return err
}

const GetActiveDashboards = `-- name: GetActiveDashboards :many
SELECT id, name, description, layout, is_active, is_default, created_by, created_at, updated_at FROM dashboards 
WHERE is_active = TRUE 
ORDER BY name
`

func (q *Queries) GetActiveDashboards(ctx context.Context) ([]Dashboard, error) {
	rows, err := q.db.QueryContext(ctx, GetActiveDashboards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Dashboard{}
	for rows.Next() {
		var i Dashboard
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Layout,
			&i.IsActive,
			&i.IsDefault,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetDashboard = `-- name: GetDashboard :one
SELECT id, name, description, layout, is_active, is_default, created_by, created_at, updated_at FROM dashboards WHERE id = $1
`

func (q *Queries) GetDashboard(ctx context.Context, id uuid.UUID) (Dashboard, error) {
	row := q.db.QueryRowContext(ctx, GetDashboard, id)
	var i Dashboard
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Layout,
		&i.IsActive,
		&i.IsDefault,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetDashboardByName = `-- name: GetDashboardByName :one
SELECT id, name, description, layout, is_active, is_default, created_by, created_at, updated_at FROM dashboards WHERE name = $1
`

func (q *Queries) GetDashboardByName(ctx context.Context, name string) (Dashboard, error) {
	row := q.db.QueryRowContext(ctx, GetDashboardByName, name)
	var i Dashboard
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Layout,
		&i.IsActive,
		&i.IsDefault,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetDashboardStats = `-- name: GetDashboardStats :many
SELECT 
    d.name as dashboard_name,
    COUNT(dw.id) as widget_count,
    COUNT(CASE WHEN dw.is_active = TRUE THEN 1 END) as active_widgets
FROM dashboards d
LEFT JOIN dashboard_widgets dw ON d.id = dw.dashboard_id
WHERE d.is_active = $1
GROUP BY d.id, d.name
ORDER BY d.name
`

type GetDashboardStatsRow struct {
	DashboardName string `json:"dashboard_name"`
	WidgetCount   int64  `json:"widget_count"`
	ActiveWidgets int64  `json:"active_widgets"`
}

func (q *Queries) GetDashboardStats(ctx context.Context, isActive sql.NullBool) ([]GetDashboardStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetDashboardStats, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDashboardStatsRow{}
	for rows.Next() {
		var i GetDashboardStatsRow
		if err := rows.Scan(&i.DashboardName, &i.WidgetCount, &i.ActiveWidgets); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetDashboardSummary = `-- name: GetDashboardSummary :many
SELECT 
    d.name,
    d.description,
    d.is_default,
    d.created_at,
    COUNT(dw.id) as widget_count,
    c.first_name || ' ' || c.last_name as created_by_name
FROM dashboards d
LEFT JOIN dashboard_widgets dw ON d.id = dw.dashboard_id AND dw.is_active = TRUE
LEFT JOIN contacts c ON d.created_by = c.id
WHERE d.is_active = $1
GROUP BY d.id, d.name, d.description, d.is_default, d.created_at, c.first_name, c.last_name
ORDER BY d.created_at DESC
`

type GetDashboardSummaryRow struct {
	Name          string         `json:"name"`
	Description   sql.NullString `json:"description"`
	IsDefault     sql.NullBool   `json:"is_default"`
	CreatedAt     sql.NullTime   `json:"created_at"`
	WidgetCount   int64          `json:"widget_count"`
	CreatedByName interface{}    `json:"created_by_name"`
}

func (q *Queries) GetDashboardSummary(ctx context.Context, isActive sql.NullBool) ([]GetDashboardSummaryRow, error) {
	rows, err := q.db.QueryContext(ctx, GetDashboardSummary, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDashboardSummaryRow{}
	for rows.Next() {
		var i GetDashboardSummaryRow
		if err := rows.Scan(
			&i.Name,
			&i.Description,
			&i.IsDefault,
			&i.CreatedAt,
			&i.WidgetCount,
			&i.CreatedByName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetDashboardsByCreator = `-- name: GetDashboardsByCreator :many
SELECT id, name, description, layout, is_active, is_default, created_by, created_at, updated_at FROM dashboards 
WHERE created_by = $1 AND is_active = $2 
ORDER BY name
`

type GetDashboardsByCreatorParams struct {
	CreatedBy uuid.NullUUID `json:"created_by"`
	IsActive  sql.NullBool  `json:"is_active"`
}

func (q *Queries) GetDashboardsByCreator(ctx context.Context, arg GetDashboardsByCreatorParams) ([]Dashboard, error) {
	rows, err := q.db.QueryContext(ctx, GetDashboardsByCreator, arg.CreatedBy, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Dashboard{}
	for rows.Next() {
		var i Dashboard
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Layout,
			&i.IsActive,
			&i.IsDefault,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetDefaultDashboard = `-- name: GetDefaultDashboard :one
SELECT id, name, description, layout, is_active, is_default, created_by, created_at, updated_at FROM dashboards WHERE is_default = TRUE AND is_active = TRUE LIMIT 1
`

func (q *Queries) GetDefaultDashboard(ctx context.Context) (Dashboard, error) {
	row := q.db.QueryRowContext(ctx, GetDefaultDashboard)
	var i Dashboard
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Layout,
		&i.IsActive,
		&i.IsDefault,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListDashboards = `-- name: ListDashboards :many
SELECT id, name, description, layout, is_active, is_default, created_by, created_at, updated_at FROM dashboards 
ORDER BY name
`

func (q *Queries) ListDashboards(ctx context.Context) ([]Dashboard, error) {
	rows, err := q.db.QueryContext(ctx, ListDashboards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Dashboard{}
	for rows.Next() {
		var i Dashboard
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Layout,
			&i.IsActive,
			&i.IsDefault,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListDashboardsByDateRange = `-- name: ListDashboardsByDateRange :many
SELECT id, name, description, layout, is_active, is_default, created_by, created_at, updated_at FROM dashboards 
WHERE created_at >= $1 AND created_at <= $2 
ORDER BY created_at DESC
`

type ListDashboardsByDateRangeParams struct {
	CreatedAt   sql.NullTime `json:"created_at"`
	CreatedAt_2 sql.NullTime `json:"created_at_2"`
}

func (q *Queries) ListDashboardsByDateRange(ctx context.Context, arg ListDashboardsByDateRangeParams) ([]Dashboard, error) {
	rows, err := q.db.QueryContext(ctx, ListDashboardsByDateRange, arg.CreatedAt, arg.CreatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Dashboard{}
	for rows.Next() {
		var i Dashboard
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Layout,
			&i.IsActive,
			&i.IsDefault,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchDashboards = `-- name: SearchDashboards :many
SELECT id, name, description, layout, is_active, is_default, created_by, created_at, updated_at FROM dashboards 
WHERE (name ILIKE $1 OR description ILIKE $1) AND is_active = $2 
ORDER BY name
`

type SearchDashboardsParams struct {
	Name     string       `json:"name"`
	IsActive sql.NullBool `json:"is_active"`
}

func (q *Queries) SearchDashboards(ctx context.Context, arg SearchDashboardsParams) ([]Dashboard, error) {
	rows, err := q.db.QueryContext(ctx, SearchDashboards, arg.Name, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Dashboard{}
	for rows.Next() {
		var i Dashboard
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Layout,
			&i.IsActive,
			&i.IsDefault,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SetDefaultDashboard = `-- name: SetDefaultDashboard :exec
UPDATE dashboards SET is_default = FALSE, updated_at = NOW()
`

func (q *Queries) SetDefaultDashboard(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, SetDefaultDashboard)
	return err
}

const UpdateDashboard = `-- name: UpdateDashboard :one
UPDATE dashboards SET
    name = $2, description = $3, layout = $4, is_active = $5,
    is_default = $6, updated_at = NOW()
WHERE id = $1 RETURNING id, name, description, layout, is_active, is_default, created_by, created_at, updated_at
`

type UpdateDashboardParams struct {
	ID          uuid.UUID             `json:"id"`
	Name        string                `json:"name"`
	Description sql.NullString        `json:"description"`
	Layout      pqtype.NullRawMessage `json:"layout"`
	IsActive    sql.NullBool          `json:"is_active"`
	IsDefault   sql.NullBool          `json:"is_default"`
}

func (q *Queries) UpdateDashboard(ctx context.Context, arg UpdateDashboardParams) (Dashboard, error) {
	row := q.db.QueryRowContext(ctx, UpdateDashboard,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Layout,
		arg.IsActive,
		arg.IsDefault,
	)
	var i Dashboard
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Layout,
		&i.IsActive,
		&i.IsDefault,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateDashboardLayout = `-- name: UpdateDashboardLayout :exec
UPDATE dashboards SET layout = $2, updated_at = NOW() WHERE id = $1
`

type UpdateDashboardLayoutParams struct {
	ID     uuid.UUID             `json:"id"`
	Layout pqtype.NullRawMessage `json:"layout"`
}

func (q *Queries) UpdateDashboardLayout(ctx context.Context, arg UpdateDashboardLayoutParams) error {
	_, err := q.db.ExecContext(ctx, UpdateDashboardLayout, arg.ID, arg.Layout)
	return err
}
