// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: campaign_types.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const ActivateCampaignType = `-- name: ActivateCampaignType :exec
UPDATE campaign_types SET is_active = TRUE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) ActivateCampaignType(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, ActivateCampaignType, id)
	return err
}

const CreateCampaignType = `-- name: CreateCampaignType :one
INSERT INTO campaign_types (
    name, label, description, is_active, is_reserved, weight
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, name, label, description, is_active, is_reserved, weight, created_at, updated_at
`

type CreateCampaignTypeParams struct {
	Name        string         `json:"name"`
	Label       string         `json:"label"`
	Description sql.NullString `json:"description"`
	IsActive    sql.NullBool   `json:"is_active"`
	IsReserved  sql.NullBool   `json:"is_reserved"`
	Weight      sql.NullInt32  `json:"weight"`
}

func (q *Queries) CreateCampaignType(ctx context.Context, arg CreateCampaignTypeParams) (CampaignType, error) {
	row := q.db.QueryRowContext(ctx, CreateCampaignType,
		arg.Name,
		arg.Label,
		arg.Description,
		arg.IsActive,
		arg.IsReserved,
		arg.Weight,
	)
	var i CampaignType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Label,
		&i.Description,
		&i.IsActive,
		&i.IsReserved,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeactivateCampaignType = `-- name: DeactivateCampaignType :exec
UPDATE campaign_types SET is_active = FALSE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) DeactivateCampaignType(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeactivateCampaignType, id)
	return err
}

const DeleteCampaignType = `-- name: DeleteCampaignType :exec
DELETE FROM campaign_types WHERE id = $1
`

func (q *Queries) DeleteCampaignType(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteCampaignType, id)
	return err
}

const GetCampaignType = `-- name: GetCampaignType :one
SELECT id, name, label, description, is_active, is_reserved, weight, created_at, updated_at FROM campaign_types WHERE id = $1
`

func (q *Queries) GetCampaignType(ctx context.Context, id uuid.UUID) (CampaignType, error) {
	row := q.db.QueryRowContext(ctx, GetCampaignType, id)
	var i CampaignType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Label,
		&i.Description,
		&i.IsActive,
		&i.IsReserved,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCampaignTypeByName = `-- name: GetCampaignTypeByName :one
SELECT id, name, label, description, is_active, is_reserved, weight, created_at, updated_at FROM campaign_types WHERE name = $1
`

func (q *Queries) GetCampaignTypeByName(ctx context.Context, name string) (CampaignType, error) {
	row := q.db.QueryRowContext(ctx, GetCampaignTypeByName, name)
	var i CampaignType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Label,
		&i.Description,
		&i.IsActive,
		&i.IsReserved,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetCampaignTypeStats = `-- name: GetCampaignTypeStats :many
SELECT 
    ct.name as campaign_type,
    COUNT(c.id) as campaign_count
FROM campaign_types ct
LEFT JOIN campaigns c ON ct.id = c.campaign_type_id AND c.is_active = TRUE
WHERE ct.is_active = $1
GROUP BY ct.name, ct.weight
ORDER BY ct.weight, ct.name
`

type GetCampaignTypeStatsRow struct {
	CampaignType  string `json:"campaign_type"`
	CampaignCount int64  `json:"campaign_count"`
}

func (q *Queries) GetCampaignTypeStats(ctx context.Context, isActive sql.NullBool) ([]GetCampaignTypeStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetCampaignTypeStats, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCampaignTypeStatsRow{}
	for rows.Next() {
		var i GetCampaignTypeStatsRow
		if err := rows.Scan(&i.CampaignType, &i.CampaignCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListActiveCampaignTypes = `-- name: ListActiveCampaignTypes :many
SELECT id, name, label, description, is_active, is_reserved, weight, created_at, updated_at FROM campaign_types 
WHERE is_active = TRUE 
ORDER BY weight, name
`

func (q *Queries) ListActiveCampaignTypes(ctx context.Context) ([]CampaignType, error) {
	rows, err := q.db.QueryContext(ctx, ListActiveCampaignTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignType{}
	for rows.Next() {
		var i CampaignType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Description,
			&i.IsActive,
			&i.IsReserved,
			&i.Weight,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListCampaignTypes = `-- name: ListCampaignTypes :many
SELECT id, name, label, description, is_active, is_reserved, weight, created_at, updated_at FROM campaign_types 
WHERE is_active = $1 
ORDER BY weight, name
`

func (q *Queries) ListCampaignTypes(ctx context.Context, isActive sql.NullBool) ([]CampaignType, error) {
	rows, err := q.db.QueryContext(ctx, ListCampaignTypes, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignType{}
	for rows.Next() {
		var i CampaignType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Description,
			&i.IsActive,
			&i.IsReserved,
			&i.Weight,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListReservedCampaignTypes = `-- name: ListReservedCampaignTypes :many
SELECT id, name, label, description, is_active, is_reserved, weight, created_at, updated_at FROM campaign_types 
WHERE is_reserved = TRUE AND is_active = $1 
ORDER BY weight, name
`

func (q *Queries) ListReservedCampaignTypes(ctx context.Context, isActive sql.NullBool) ([]CampaignType, error) {
	rows, err := q.db.QueryContext(ctx, ListReservedCampaignTypes, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignType{}
	for rows.Next() {
		var i CampaignType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Description,
			&i.IsActive,
			&i.IsReserved,
			&i.Weight,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchCampaignTypes = `-- name: SearchCampaignTypes :many
SELECT id, name, label, description, is_active, is_reserved, weight, created_at, updated_at FROM campaign_types 
WHERE (name ILIKE $1 OR label ILIKE $1 OR description ILIKE $1) 
AND is_active = $2 
ORDER BY weight, name
`

type SearchCampaignTypesParams struct {
	Name     string       `json:"name"`
	IsActive sql.NullBool `json:"is_active"`
}

func (q *Queries) SearchCampaignTypes(ctx context.Context, arg SearchCampaignTypesParams) ([]CampaignType, error) {
	rows, err := q.db.QueryContext(ctx, SearchCampaignTypes, arg.Name, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CampaignType{}
	for rows.Next() {
		var i CampaignType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Label,
			&i.Description,
			&i.IsActive,
			&i.IsReserved,
			&i.Weight,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateCampaignType = `-- name: UpdateCampaignType :one
UPDATE campaign_types SET
    name = $2, label = $3, description = $4, is_active = $5,
    is_reserved = $6, weight = $7, updated_at = NOW()
WHERE id = $1 RETURNING id, name, label, description, is_active, is_reserved, weight, created_at, updated_at
`

type UpdateCampaignTypeParams struct {
	ID          uuid.UUID      `json:"id"`
	Name        string         `json:"name"`
	Label       string         `json:"label"`
	Description sql.NullString `json:"description"`
	IsActive    sql.NullBool   `json:"is_active"`
	IsReserved  sql.NullBool   `json:"is_reserved"`
	Weight      sql.NullInt32  `json:"weight"`
}

func (q *Queries) UpdateCampaignType(ctx context.Context, arg UpdateCampaignTypeParams) (CampaignType, error) {
	row := q.db.QueryRowContext(ctx, UpdateCampaignType,
		arg.ID,
		arg.Name,
		arg.Label,
		arg.Description,
		arg.IsActive,
		arg.IsReserved,
		arg.Weight,
	)
	var i CampaignType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Label,
		&i.Description,
		&i.IsActive,
		&i.IsReserved,
		&i.Weight,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateCampaignTypeWeight = `-- name: UpdateCampaignTypeWeight :exec
UPDATE campaign_types SET weight = $2, updated_at = NOW() WHERE id = $1
`

type UpdateCampaignTypeWeightParams struct {
	ID     uuid.UUID     `json:"id"`
	Weight sql.NullInt32 `json:"weight"`
}

func (q *Queries) UpdateCampaignTypeWeight(ctx context.Context, arg UpdateCampaignTypeWeightParams) error {
	_, err := q.db.ExecContext(ctx, UpdateCampaignTypeWeight, arg.ID, arg.Weight)
	return err
}
