// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: events.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const CountEvents = `-- name: CountEvents :one
SELECT COUNT(*) FROM events
`

func (q *Queries) CountEvents(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountEvents)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CountUpcomingEvents = `-- name: CountUpcomingEvents :one
SELECT COUNT(*) FROM events WHERE start_date > NOW()
`

func (q *Queries) CountUpcomingEvents(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountUpcomingEvents)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateEvent = `-- name: CreateEvent :one
INSERT INTO events (
    title, description, start_date, end_date, 
    location, max_participants
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, title, description, start_date, end_date, location, max_participants, created_at, updated_at
`

type CreateEventParams struct {
	Title           string         `json:"title"`
	Description     sql.NullString `json:"description"`
	StartDate       time.Time      `json:"start_date"`
	EndDate         time.Time      `json:"end_date"`
	Location        sql.NullString `json:"location"`
	MaxParticipants sql.NullInt32  `json:"max_participants"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, CreateEvent,
		arg.Title,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
		arg.Location,
		arg.MaxParticipants,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Location,
		&i.MaxParticipants,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteEvent, id)
	return err
}

const GetEvent = `-- name: GetEvent :one
SELECT id, title, description, start_date, end_date, location, max_participants, created_at, updated_at FROM events WHERE id = $1
`

func (q *Queries) GetEvent(ctx context.Context, id uuid.UUID) (Event, error) {
	row := q.db.QueryRowContext(ctx, GetEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Location,
		&i.MaxParticipants,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetEventByTitle = `-- name: GetEventByTitle :one
SELECT id, title, description, start_date, end_date, location, max_participants, created_at, updated_at FROM events WHERE title = $1
`

func (q *Queries) GetEventByTitle(ctx context.Context, title string) (Event, error) {
	row := q.db.QueryRowContext(ctx, GetEventByTitle, title)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Location,
		&i.MaxParticipants,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetEventsByDateRange = `-- name: GetEventsByDateRange :many
SELECT id, title, description, start_date, end_date, location, max_participants, created_at, updated_at FROM events 
WHERE start_date >= $1 AND end_date <= $2 
ORDER BY start_date ASC
`

type GetEventsByDateRangeParams struct {
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
}

func (q *Queries) GetEventsByDateRange(ctx context.Context, arg GetEventsByDateRangeParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, GetEventsByDateRange, arg.StartDate, arg.EndDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.Location,
			&i.MaxParticipants,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListEvents = `-- name: ListEvents :many
SELECT id, title, description, start_date, end_date, location, max_participants, created_at, updated_at FROM events 
ORDER BY start_date ASC 
LIMIT $1 OFFSET $2
`

type ListEventsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEvents(ctx context.Context, arg ListEventsParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, ListEvents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.Location,
			&i.MaxParticipants,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListPastEvents = `-- name: ListPastEvents :many
SELECT id, title, description, start_date, end_date, location, max_participants, created_at, updated_at FROM events 
WHERE end_date < NOW() 
ORDER BY start_date DESC 
LIMIT $1 OFFSET $2
`

type ListPastEventsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPastEvents(ctx context.Context, arg ListPastEventsParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, ListPastEvents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.Location,
			&i.MaxParticipants,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListUpcomingEvents = `-- name: ListUpcomingEvents :many
SELECT id, title, description, start_date, end_date, location, max_participants, created_at, updated_at FROM events 
WHERE start_date > NOW() 
ORDER BY start_date ASC 
LIMIT $1 OFFSET $2
`

type ListUpcomingEventsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUpcomingEvents(ctx context.Context, arg ListUpcomingEventsParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, ListUpcomingEvents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.Location,
			&i.MaxParticipants,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchEvents = `-- name: SearchEvents :many
SELECT id, title, description, start_date, end_date, location, max_participants, created_at, updated_at FROM events 
WHERE (
    title ILIKE $1 OR 
    description ILIKE $1 OR 
    location ILIKE $1
)
ORDER BY start_date ASC 
LIMIT $2 OFFSET $3
`

type SearchEventsParams struct {
	Title  string `json:"title"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) SearchEvents(ctx context.Context, arg SearchEventsParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, SearchEvents, arg.Title, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.Location,
			&i.MaxParticipants,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateEvent = `-- name: UpdateEvent :one
UPDATE events 
SET 
    title = $2,
    description = $3,
    start_date = $4,
    end_date = $5,
    location = $6,
    max_participants = $7,
    updated_at = NOW()
WHERE id = $1 
RETURNING id, title, description, start_date, end_date, location, max_participants, created_at, updated_at
`

type UpdateEventParams struct {
	ID              uuid.UUID      `json:"id"`
	Title           string         `json:"title"`
	Description     sql.NullString `json:"description"`
	StartDate       time.Time      `json:"start_date"`
	EndDate         time.Time      `json:"end_date"`
	Location        sql.NullString `json:"location"`
	MaxParticipants sql.NullInt32  `json:"max_participants"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, UpdateEvent,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
		arg.Location,
		arg.MaxParticipants,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Location,
		&i.MaxParticipants,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
