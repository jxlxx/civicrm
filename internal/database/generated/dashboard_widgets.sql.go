// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: dashboard_widgets.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const ActivateDashboardWidget = `-- name: ActivateDashboardWidget :exec
UPDATE dashboard_widgets SET is_active = TRUE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) ActivateDashboardWidget(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, ActivateDashboardWidget, id)
	return err
}

const CreateDashboardWidget = `-- name: CreateDashboardWidget :one
INSERT INTO dashboard_widgets (
    dashboard_id, name, widget_type, configuration, position_x, position_y, width, height, is_active
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, dashboard_id, name, widget_type, configuration, position_x, position_y, width, height, is_active, created_at, updated_at
`

type CreateDashboardWidgetParams struct {
	DashboardID   uuid.UUID             `json:"dashboard_id"`
	Name          string                `json:"name"`
	WidgetType    string                `json:"widget_type"`
	Configuration pqtype.NullRawMessage `json:"configuration"`
	PositionX     sql.NullInt32         `json:"position_x"`
	PositionY     sql.NullInt32         `json:"position_y"`
	Width         sql.NullInt32         `json:"width"`
	Height        sql.NullInt32         `json:"height"`
	IsActive      sql.NullBool          `json:"is_active"`
}

func (q *Queries) CreateDashboardWidget(ctx context.Context, arg CreateDashboardWidgetParams) (DashboardWidget, error) {
	row := q.db.QueryRowContext(ctx, CreateDashboardWidget,
		arg.DashboardID,
		arg.Name,
		arg.WidgetType,
		arg.Configuration,
		arg.PositionX,
		arg.PositionY,
		arg.Width,
		arg.Height,
		arg.IsActive,
	)
	var i DashboardWidget
	err := row.Scan(
		&i.ID,
		&i.DashboardID,
		&i.Name,
		&i.WidgetType,
		&i.Configuration,
		&i.PositionX,
		&i.PositionY,
		&i.Width,
		&i.Height,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeactivateDashboardWidget = `-- name: DeactivateDashboardWidget :exec
UPDATE dashboard_widgets SET is_active = FALSE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) DeactivateDashboardWidget(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeactivateDashboardWidget, id)
	return err
}

const DeleteDashboardWidget = `-- name: DeleteDashboardWidget :exec
DELETE FROM dashboard_widgets WHERE id = $1
`

func (q *Queries) DeleteDashboardWidget(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteDashboardWidget, id)
	return err
}

const GetActiveDashboardWidgets = `-- name: GetActiveDashboardWidgets :many
SELECT id, dashboard_id, name, widget_type, configuration, position_x, position_y, width, height, is_active, created_at, updated_at FROM dashboard_widgets 
WHERE dashboard_id = $1 AND is_active = TRUE 
ORDER BY position_y, position_x
`

func (q *Queries) GetActiveDashboardWidgets(ctx context.Context, dashboardID uuid.UUID) ([]DashboardWidget, error) {
	rows, err := q.db.QueryContext(ctx, GetActiveDashboardWidgets, dashboardID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DashboardWidget{}
	for rows.Next() {
		var i DashboardWidget
		if err := rows.Scan(
			&i.ID,
			&i.DashboardID,
			&i.Name,
			&i.WidgetType,
			&i.Configuration,
			&i.PositionX,
			&i.PositionY,
			&i.Width,
			&i.Height,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetDashboardWidget = `-- name: GetDashboardWidget :one
SELECT id, dashboard_id, name, widget_type, configuration, position_x, position_y, width, height, is_active, created_at, updated_at FROM dashboard_widgets WHERE id = $1
`

func (q *Queries) GetDashboardWidget(ctx context.Context, id uuid.UUID) (DashboardWidget, error) {
	row := q.db.QueryRowContext(ctx, GetDashboardWidget, id)
	var i DashboardWidget
	err := row.Scan(
		&i.ID,
		&i.DashboardID,
		&i.Name,
		&i.WidgetType,
		&i.Configuration,
		&i.PositionX,
		&i.PositionY,
		&i.Width,
		&i.Height,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetDashboardWidgetStats = `-- name: GetDashboardWidgetStats :many
SELECT 
    dw.widget_type,
    COUNT(dw.id) as widget_count
FROM dashboard_widgets dw
WHERE dw.dashboard_id = $1 AND dw.is_active = $2
GROUP BY dw.widget_type
ORDER BY dw.widget_type
`

type GetDashboardWidgetStatsParams struct {
	DashboardID uuid.UUID    `json:"dashboard_id"`
	IsActive    sql.NullBool `json:"is_active"`
}

type GetDashboardWidgetStatsRow struct {
	WidgetType  string `json:"widget_type"`
	WidgetCount int64  `json:"widget_count"`
}

func (q *Queries) GetDashboardWidgetStats(ctx context.Context, arg GetDashboardWidgetStatsParams) ([]GetDashboardWidgetStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetDashboardWidgetStats, arg.DashboardID, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDashboardWidgetStatsRow{}
	for rows.Next() {
		var i GetDashboardWidgetStatsRow
		if err := rows.Scan(&i.WidgetType, &i.WidgetCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetDashboardWidgetSummary = `-- name: GetDashboardWidgetSummary :many
SELECT 
    dw.name,
    dw.widget_type,
    dw.position_x,
    dw.position_y,
    dw.width,
    dw.height,
    d.name as dashboard_name
FROM dashboard_widgets dw
JOIN dashboards d ON dw.dashboard_id = d.id
WHERE dw.is_active = $1
ORDER BY d.name, dw.position_y, dw.position_x
`

type GetDashboardWidgetSummaryRow struct {
	Name          string        `json:"name"`
	WidgetType    string        `json:"widget_type"`
	PositionX     sql.NullInt32 `json:"position_x"`
	PositionY     sql.NullInt32 `json:"position_y"`
	Width         sql.NullInt32 `json:"width"`
	Height        sql.NullInt32 `json:"height"`
	DashboardName string        `json:"dashboard_name"`
}

func (q *Queries) GetDashboardWidgetSummary(ctx context.Context, isActive sql.NullBool) ([]GetDashboardWidgetSummaryRow, error) {
	rows, err := q.db.QueryContext(ctx, GetDashboardWidgetSummary, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDashboardWidgetSummaryRow{}
	for rows.Next() {
		var i GetDashboardWidgetSummaryRow
		if err := rows.Scan(
			&i.Name,
			&i.WidgetType,
			&i.PositionX,
			&i.PositionY,
			&i.Width,
			&i.Height,
			&i.DashboardName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetDashboardWidgetsByDashboard = `-- name: GetDashboardWidgetsByDashboard :many
SELECT id, dashboard_id, name, widget_type, configuration, position_x, position_y, width, height, is_active, created_at, updated_at FROM dashboard_widgets 
WHERE dashboard_id = $1 AND is_active = $2 
ORDER BY position_y, position_x
`

type GetDashboardWidgetsByDashboardParams struct {
	DashboardID uuid.UUID    `json:"dashboard_id"`
	IsActive    sql.NullBool `json:"is_active"`
}

func (q *Queries) GetDashboardWidgetsByDashboard(ctx context.Context, arg GetDashboardWidgetsByDashboardParams) ([]DashboardWidget, error) {
	rows, err := q.db.QueryContext(ctx, GetDashboardWidgetsByDashboard, arg.DashboardID, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DashboardWidget{}
	for rows.Next() {
		var i DashboardWidget
		if err := rows.Scan(
			&i.ID,
			&i.DashboardID,
			&i.Name,
			&i.WidgetType,
			&i.Configuration,
			&i.PositionX,
			&i.PositionY,
			&i.Width,
			&i.Height,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetDashboardWidgetsByType = `-- name: GetDashboardWidgetsByType :many
SELECT id, dashboard_id, name, widget_type, configuration, position_x, position_y, width, height, is_active, created_at, updated_at FROM dashboard_widgets 
WHERE dashboard_id = $1 AND widget_type = $2 AND is_active = $3 
ORDER BY position_y, position_x
`

type GetDashboardWidgetsByTypeParams struct {
	DashboardID uuid.UUID    `json:"dashboard_id"`
	WidgetType  string       `json:"widget_type"`
	IsActive    sql.NullBool `json:"is_active"`
}

func (q *Queries) GetDashboardWidgetsByType(ctx context.Context, arg GetDashboardWidgetsByTypeParams) ([]DashboardWidget, error) {
	rows, err := q.db.QueryContext(ctx, GetDashboardWidgetsByType, arg.DashboardID, arg.WidgetType, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DashboardWidget{}
	for rows.Next() {
		var i DashboardWidget
		if err := rows.Scan(
			&i.ID,
			&i.DashboardID,
			&i.Name,
			&i.WidgetType,
			&i.Configuration,
			&i.PositionX,
			&i.PositionY,
			&i.Width,
			&i.Height,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListActiveDashboardWidgets = `-- name: ListActiveDashboardWidgets :many
SELECT id, dashboard_id, name, widget_type, configuration, position_x, position_y, width, height, is_active, created_at, updated_at FROM dashboard_widgets 
WHERE is_active = TRUE 
ORDER BY dashboard_id, position_y, position_x
`

func (q *Queries) ListActiveDashboardWidgets(ctx context.Context) ([]DashboardWidget, error) {
	rows, err := q.db.QueryContext(ctx, ListActiveDashboardWidgets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DashboardWidget{}
	for rows.Next() {
		var i DashboardWidget
		if err := rows.Scan(
			&i.ID,
			&i.DashboardID,
			&i.Name,
			&i.WidgetType,
			&i.Configuration,
			&i.PositionX,
			&i.PositionY,
			&i.Width,
			&i.Height,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListDashboardWidgets = `-- name: ListDashboardWidgets :many
SELECT id, dashboard_id, name, widget_type, configuration, position_x, position_y, width, height, is_active, created_at, updated_at FROM dashboard_widgets 
ORDER BY dashboard_id, position_y, position_x
`

func (q *Queries) ListDashboardWidgets(ctx context.Context) ([]DashboardWidget, error) {
	rows, err := q.db.QueryContext(ctx, ListDashboardWidgets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DashboardWidget{}
	for rows.Next() {
		var i DashboardWidget
		if err := rows.Scan(
			&i.ID,
			&i.DashboardID,
			&i.Name,
			&i.WidgetType,
			&i.Configuration,
			&i.PositionX,
			&i.PositionY,
			&i.Width,
			&i.Height,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListDashboardWidgetsByType = `-- name: ListDashboardWidgetsByType :many
SELECT id, dashboard_id, name, widget_type, configuration, position_x, position_y, width, height, is_active, created_at, updated_at FROM dashboard_widgets 
WHERE widget_type = $1 AND is_active = $2 
ORDER BY dashboard_id, position_y, position_x
`

type ListDashboardWidgetsByTypeParams struct {
	WidgetType string       `json:"widget_type"`
	IsActive   sql.NullBool `json:"is_active"`
}

func (q *Queries) ListDashboardWidgetsByType(ctx context.Context, arg ListDashboardWidgetsByTypeParams) ([]DashboardWidget, error) {
	rows, err := q.db.QueryContext(ctx, ListDashboardWidgetsByType, arg.WidgetType, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DashboardWidget{}
	for rows.Next() {
		var i DashboardWidget
		if err := rows.Scan(
			&i.ID,
			&i.DashboardID,
			&i.Name,
			&i.WidgetType,
			&i.Configuration,
			&i.PositionX,
			&i.PositionY,
			&i.Width,
			&i.Height,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchDashboardWidgets = `-- name: SearchDashboardWidgets :many
SELECT id, dashboard_id, name, widget_type, configuration, position_x, position_y, width, height, is_active, created_at, updated_at FROM dashboard_widgets 
WHERE name ILIKE $1 AND is_active = $2 
ORDER BY dashboard_id, position_y, position_x
`

type SearchDashboardWidgetsParams struct {
	Name     string       `json:"name"`
	IsActive sql.NullBool `json:"is_active"`
}

func (q *Queries) SearchDashboardWidgets(ctx context.Context, arg SearchDashboardWidgetsParams) ([]DashboardWidget, error) {
	rows, err := q.db.QueryContext(ctx, SearchDashboardWidgets, arg.Name, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DashboardWidget{}
	for rows.Next() {
		var i DashboardWidget
		if err := rows.Scan(
			&i.ID,
			&i.DashboardID,
			&i.Name,
			&i.WidgetType,
			&i.Configuration,
			&i.PositionX,
			&i.PositionY,
			&i.Width,
			&i.Height,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateDashboardWidget = `-- name: UpdateDashboardWidget :one
UPDATE dashboard_widgets SET
    dashboard_id = $2, name = $3, widget_type = $4, configuration = $5,
    position_x = $6, position_y = $7, width = $8, height = $9, is_active = $10, updated_at = NOW()
WHERE id = $1 RETURNING id, dashboard_id, name, widget_type, configuration, position_x, position_y, width, height, is_active, created_at, updated_at
`

type UpdateDashboardWidgetParams struct {
	ID            uuid.UUID             `json:"id"`
	DashboardID   uuid.UUID             `json:"dashboard_id"`
	Name          string                `json:"name"`
	WidgetType    string                `json:"widget_type"`
	Configuration pqtype.NullRawMessage `json:"configuration"`
	PositionX     sql.NullInt32         `json:"position_x"`
	PositionY     sql.NullInt32         `json:"position_y"`
	Width         sql.NullInt32         `json:"width"`
	Height        sql.NullInt32         `json:"height"`
	IsActive      sql.NullBool          `json:"is_active"`
}

func (q *Queries) UpdateDashboardWidget(ctx context.Context, arg UpdateDashboardWidgetParams) (DashboardWidget, error) {
	row := q.db.QueryRowContext(ctx, UpdateDashboardWidget,
		arg.ID,
		arg.DashboardID,
		arg.Name,
		arg.WidgetType,
		arg.Configuration,
		arg.PositionX,
		arg.PositionY,
		arg.Width,
		arg.Height,
		arg.IsActive,
	)
	var i DashboardWidget
	err := row.Scan(
		&i.ID,
		&i.DashboardID,
		&i.Name,
		&i.WidgetType,
		&i.Configuration,
		&i.PositionX,
		&i.PositionY,
		&i.Width,
		&i.Height,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateDashboardWidgetConfiguration = `-- name: UpdateDashboardWidgetConfiguration :exec
UPDATE dashboard_widgets SET configuration = $2, updated_at = NOW() WHERE id = $1
`

type UpdateDashboardWidgetConfigurationParams struct {
	ID            uuid.UUID             `json:"id"`
	Configuration pqtype.NullRawMessage `json:"configuration"`
}

func (q *Queries) UpdateDashboardWidgetConfiguration(ctx context.Context, arg UpdateDashboardWidgetConfigurationParams) error {
	_, err := q.db.ExecContext(ctx, UpdateDashboardWidgetConfiguration, arg.ID, arg.Configuration)
	return err
}

const UpdateDashboardWidgetPosition = `-- name: UpdateDashboardWidgetPosition :exec
UPDATE dashboard_widgets SET position_x = $2, position_y = $3, updated_at = NOW() WHERE id = $1
`

type UpdateDashboardWidgetPositionParams struct {
	ID        uuid.UUID     `json:"id"`
	PositionX sql.NullInt32 `json:"position_x"`
	PositionY sql.NullInt32 `json:"position_y"`
}

func (q *Queries) UpdateDashboardWidgetPosition(ctx context.Context, arg UpdateDashboardWidgetPositionParams) error {
	_, err := q.db.ExecContext(ctx, UpdateDashboardWidgetPosition, arg.ID, arg.PositionX, arg.PositionY)
	return err
}

const UpdateDashboardWidgetSize = `-- name: UpdateDashboardWidgetSize :exec
UPDATE dashboard_widgets SET width = $2, height = $3, updated_at = NOW() WHERE id = $1
`

type UpdateDashboardWidgetSizeParams struct {
	ID     uuid.UUID     `json:"id"`
	Width  sql.NullInt32 `json:"width"`
	Height sql.NullInt32 `json:"height"`
}

func (q *Queries) UpdateDashboardWidgetSize(ctx context.Context, arg UpdateDashboardWidgetSizeParams) error {
	_, err := q.db.ExecContext(ctx, UpdateDashboardWidgetSize, arg.ID, arg.Width, arg.Height)
	return err
}
