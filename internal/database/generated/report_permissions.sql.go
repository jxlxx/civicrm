// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: report_permissions.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const ActivateReportPermission = `-- name: ActivateReportPermission :exec
UPDATE report_permissions SET is_active = TRUE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) ActivateReportPermission(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, ActivateReportPermission, id)
	return err
}

const CreateReportPermission = `-- name: CreateReportPermission :one
INSERT INTO report_permissions (
    report_template_id, role_id, permission_type, is_active
) VALUES (
    $1, $2, $3, $4
) RETURNING id, report_template_id, role_id, permission_type, is_active, created_at, updated_at
`

type CreateReportPermissionParams struct {
	ReportTemplateID uuid.UUID     `json:"report_template_id"`
	RoleID           uuid.NullUUID `json:"role_id"`
	PermissionType   string        `json:"permission_type"`
	IsActive         sql.NullBool  `json:"is_active"`
}

func (q *Queries) CreateReportPermission(ctx context.Context, arg CreateReportPermissionParams) (ReportPermission, error) {
	row := q.db.QueryRowContext(ctx, CreateReportPermission,
		arg.ReportTemplateID,
		arg.RoleID,
		arg.PermissionType,
		arg.IsActive,
	)
	var i ReportPermission
	err := row.Scan(
		&i.ID,
		&i.ReportTemplateID,
		&i.RoleID,
		&i.PermissionType,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeactivateReportPermission = `-- name: DeactivateReportPermission :exec
UPDATE report_permissions SET is_active = FALSE, updated_at = NOW() WHERE id = $1
`

func (q *Queries) DeactivateReportPermission(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeactivateReportPermission, id)
	return err
}

const DeleteReportPermission = `-- name: DeleteReportPermission :exec
DELETE FROM report_permissions WHERE id = $1
`

func (q *Queries) DeleteReportPermission(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, DeleteReportPermission, id)
	return err
}

const GetActiveReportPermissions = `-- name: GetActiveReportPermissions :many
SELECT id, report_template_id, role_id, permission_type, is_active, created_at, updated_at FROM report_permissions 
WHERE is_active = TRUE 
ORDER BY report_template_id, permission_type
`

func (q *Queries) GetActiveReportPermissions(ctx context.Context) ([]ReportPermission, error) {
	rows, err := q.db.QueryContext(ctx, GetActiveReportPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReportPermission{}
	for rows.Next() {
		var i ReportPermission
		if err := rows.Scan(
			&i.ID,
			&i.ReportTemplateID,
			&i.RoleID,
			&i.PermissionType,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetPublicReportPermissions = `-- name: GetPublicReportPermissions :many
SELECT id, report_template_id, role_id, permission_type, is_active, created_at, updated_at FROM report_permissions 
WHERE role_id IS NULL AND is_active = $1 
ORDER BY permission_type
`

func (q *Queries) GetPublicReportPermissions(ctx context.Context, isActive sql.NullBool) ([]ReportPermission, error) {
	rows, err := q.db.QueryContext(ctx, GetPublicReportPermissions, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReportPermission{}
	for rows.Next() {
		var i ReportPermission
		if err := rows.Scan(
			&i.ID,
			&i.ReportTemplateID,
			&i.RoleID,
			&i.PermissionType,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetReportPermission = `-- name: GetReportPermission :one
SELECT id, report_template_id, role_id, permission_type, is_active, created_at, updated_at FROM report_permissions WHERE id = $1
`

func (q *Queries) GetReportPermission(ctx context.Context, id uuid.UUID) (ReportPermission, error) {
	row := q.db.QueryRowContext(ctx, GetReportPermission, id)
	var i ReportPermission
	err := row.Scan(
		&i.ID,
		&i.ReportTemplateID,
		&i.RoleID,
		&i.PermissionType,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetReportPermissionByTemplateAndRole = `-- name: GetReportPermissionByTemplateAndRole :one
SELECT id, report_template_id, role_id, permission_type, is_active, created_at, updated_at FROM report_permissions 
WHERE report_template_id = $1 AND role_id = $2 
ORDER BY permission_type LIMIT 1
`

type GetReportPermissionByTemplateAndRoleParams struct {
	ReportTemplateID uuid.UUID     `json:"report_template_id"`
	RoleID           uuid.NullUUID `json:"role_id"`
}

func (q *Queries) GetReportPermissionByTemplateAndRole(ctx context.Context, arg GetReportPermissionByTemplateAndRoleParams) (ReportPermission, error) {
	row := q.db.QueryRowContext(ctx, GetReportPermissionByTemplateAndRole, arg.ReportTemplateID, arg.RoleID)
	var i ReportPermission
	err := row.Scan(
		&i.ID,
		&i.ReportTemplateID,
		&i.RoleID,
		&i.PermissionType,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetReportPermissionStats = `-- name: GetReportPermissionStats :many
SELECT 
    rp.permission_type,
    COUNT(rp.id) as permission_count
FROM report_permissions rp
WHERE rp.is_active = $1
GROUP BY rp.permission_type
ORDER BY rp.permission_type
`

type GetReportPermissionStatsRow struct {
	PermissionType  string `json:"permission_type"`
	PermissionCount int64  `json:"permission_count"`
}

func (q *Queries) GetReportPermissionStats(ctx context.Context, isActive sql.NullBool) ([]GetReportPermissionStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, GetReportPermissionStats, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetReportPermissionStatsRow{}
	for rows.Next() {
		var i GetReportPermissionStatsRow
		if err := rows.Scan(&i.PermissionType, &i.PermissionCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetReportPermissionSummary = `-- name: GetReportPermissionSummary :many
SELECT 
    rt.name as report_name,
    rt.report_type,
    rp.permission_type,
    rp.role_id,
    rp.is_active,
    rp.created_at
FROM report_permissions rp
JOIN report_templates rt ON rp.report_template_id = rt.id
WHERE rp.is_active = $1
ORDER BY rt.name, rp.permission_type
`

type GetReportPermissionSummaryRow struct {
	ReportName     string        `json:"report_name"`
	ReportType     string        `json:"report_type"`
	PermissionType string        `json:"permission_type"`
	RoleID         uuid.NullUUID `json:"role_id"`
	IsActive       sql.NullBool  `json:"is_active"`
	CreatedAt      sql.NullTime  `json:"created_at"`
}

func (q *Queries) GetReportPermissionSummary(ctx context.Context, isActive sql.NullBool) ([]GetReportPermissionSummaryRow, error) {
	rows, err := q.db.QueryContext(ctx, GetReportPermissionSummary, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetReportPermissionSummaryRow{}
	for rows.Next() {
		var i GetReportPermissionSummaryRow
		if err := rows.Scan(
			&i.ReportName,
			&i.ReportType,
			&i.PermissionType,
			&i.RoleID,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetReportPermissionsByRole = `-- name: GetReportPermissionsByRole :many
SELECT id, report_template_id, role_id, permission_type, is_active, created_at, updated_at FROM report_permissions 
WHERE role_id = $1 AND is_active = $2 
ORDER BY permission_type
`

type GetReportPermissionsByRoleParams struct {
	RoleID   uuid.NullUUID `json:"role_id"`
	IsActive sql.NullBool  `json:"is_active"`
}

func (q *Queries) GetReportPermissionsByRole(ctx context.Context, arg GetReportPermissionsByRoleParams) ([]ReportPermission, error) {
	rows, err := q.db.QueryContext(ctx, GetReportPermissionsByRole, arg.RoleID, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReportPermission{}
	for rows.Next() {
		var i ReportPermission
		if err := rows.Scan(
			&i.ID,
			&i.ReportTemplateID,
			&i.RoleID,
			&i.PermissionType,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetReportPermissionsByTemplate = `-- name: GetReportPermissionsByTemplate :many
SELECT id, report_template_id, role_id, permission_type, is_active, created_at, updated_at FROM report_permissions 
WHERE report_template_id = $1 AND is_active = $2 
ORDER BY permission_type
`

type GetReportPermissionsByTemplateParams struct {
	ReportTemplateID uuid.UUID    `json:"report_template_id"`
	IsActive         sql.NullBool `json:"is_active"`
}

func (q *Queries) GetReportPermissionsByTemplate(ctx context.Context, arg GetReportPermissionsByTemplateParams) ([]ReportPermission, error) {
	rows, err := q.db.QueryContext(ctx, GetReportPermissionsByTemplate, arg.ReportTemplateID, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReportPermission{}
	for rows.Next() {
		var i ReportPermission
		if err := rows.Scan(
			&i.ID,
			&i.ReportTemplateID,
			&i.RoleID,
			&i.PermissionType,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetReportPermissionsByType = `-- name: GetReportPermissionsByType :many
SELECT id, report_template_id, role_id, permission_type, is_active, created_at, updated_at FROM report_permissions 
WHERE permission_type = $1 AND is_active = $2 
ORDER BY report_template_id
`

type GetReportPermissionsByTypeParams struct {
	PermissionType string       `json:"permission_type"`
	IsActive       sql.NullBool `json:"is_active"`
}

func (q *Queries) GetReportPermissionsByType(ctx context.Context, arg GetReportPermissionsByTypeParams) ([]ReportPermission, error) {
	rows, err := q.db.QueryContext(ctx, GetReportPermissionsByType, arg.PermissionType, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReportPermission{}
	for rows.Next() {
		var i ReportPermission
		if err := rows.Scan(
			&i.ID,
			&i.ReportTemplateID,
			&i.RoleID,
			&i.PermissionType,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListReportPermissions = `-- name: ListReportPermissions :many
SELECT id, report_template_id, role_id, permission_type, is_active, created_at, updated_at FROM report_permissions 
ORDER BY report_template_id, permission_type
`

func (q *Queries) ListReportPermissions(ctx context.Context) ([]ReportPermission, error) {
	rows, err := q.db.QueryContext(ctx, ListReportPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReportPermission{}
	for rows.Next() {
		var i ReportPermission
		if err := rows.Scan(
			&i.ID,
			&i.ReportTemplateID,
			&i.RoleID,
			&i.PermissionType,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListReportPermissionsByDateRange = `-- name: ListReportPermissionsByDateRange :many
SELECT id, report_template_id, role_id, permission_type, is_active, created_at, updated_at FROM report_permissions 
WHERE created_at >= $1 AND created_at <= $2 
ORDER BY created_at DESC
`

type ListReportPermissionsByDateRangeParams struct {
	CreatedAt   sql.NullTime `json:"created_at"`
	CreatedAt_2 sql.NullTime `json:"created_at_2"`
}

func (q *Queries) ListReportPermissionsByDateRange(ctx context.Context, arg ListReportPermissionsByDateRangeParams) ([]ReportPermission, error) {
	rows, err := q.db.QueryContext(ctx, ListReportPermissionsByDateRange, arg.CreatedAt, arg.CreatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReportPermission{}
	for rows.Next() {
		var i ReportPermission
		if err := rows.Scan(
			&i.ID,
			&i.ReportTemplateID,
			&i.RoleID,
			&i.PermissionType,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const SearchReportPermissions = `-- name: SearchReportPermissions :many
SELECT rp.id, rp.report_template_id, rp.role_id, rp.permission_type, rp.is_active, rp.created_at, rp.updated_at FROM report_permissions rp
JOIN report_templates rt ON rp.report_template_id = rt.id
WHERE rt.name ILIKE $1 AND rp.is_active = $2
ORDER BY rp.id
`

type SearchReportPermissionsParams struct {
	Name     string       `json:"name"`
	IsActive sql.NullBool `json:"is_active"`
}

func (q *Queries) SearchReportPermissions(ctx context.Context, arg SearchReportPermissionsParams) ([]ReportPermission, error) {
	rows, err := q.db.QueryContext(ctx, SearchReportPermissions, arg.Name, arg.IsActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReportPermission{}
	for rows.Next() {
		var i ReportPermission
		if err := rows.Scan(
			&i.ID,
			&i.ReportTemplateID,
			&i.RoleID,
			&i.PermissionType,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateReportPermission = `-- name: UpdateReportPermission :one
UPDATE report_permissions SET
    report_template_id = $2, role_id = $3, permission_type = $4,
    is_active = $5, updated_at = NOW()
WHERE id = $1 RETURNING id, report_template_id, role_id, permission_type, is_active, created_at, updated_at
`

type UpdateReportPermissionParams struct {
	ID               uuid.UUID     `json:"id"`
	ReportTemplateID uuid.UUID     `json:"report_template_id"`
	RoleID           uuid.NullUUID `json:"role_id"`
	PermissionType   string        `json:"permission_type"`
	IsActive         sql.NullBool  `json:"is_active"`
}

func (q *Queries) UpdateReportPermission(ctx context.Context, arg UpdateReportPermissionParams) (ReportPermission, error) {
	row := q.db.QueryRowContext(ctx, UpdateReportPermission,
		arg.ID,
		arg.ReportTemplateID,
		arg.RoleID,
		arg.PermissionType,
		arg.IsActive,
	)
	var i ReportPermission
	err := row.Scan(
		&i.ID,
		&i.ReportTemplateID,
		&i.RoleID,
		&i.PermissionType,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const UpdateReportPermissionType = `-- name: UpdateReportPermissionType :exec
UPDATE report_permissions SET permission_type = $2, updated_at = NOW() WHERE id = $1
`

type UpdateReportPermissionTypeParams struct {
	ID             uuid.UUID `json:"id"`
	PermissionType string    `json:"permission_type"`
}

func (q *Queries) UpdateReportPermissionType(ctx context.Context, arg UpdateReportPermissionTypeParams) error {
	_, err := q.db.ExecContext(ctx, UpdateReportPermissionType, arg.ID, arg.PermissionType)
	return err
}
